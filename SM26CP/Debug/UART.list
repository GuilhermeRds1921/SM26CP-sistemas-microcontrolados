
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080080d8  080080d8  000090d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b8  080084b8  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080084b8  080084b8  000094b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c0  080084c0  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084c4  080084c4  000094c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080084c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001dc  080086a4  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  080086a4  0000a550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2f6  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002639  00000000  00000000  000194fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8a  00000000  00000000  0001ca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195cf  00000000  00000000  0001d59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112cb  00000000  00000000  00036b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009168c  00000000  00000000  00047e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d94c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000d9504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000de554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080080bc 	.word	0x080080bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080080bc 	.word	0x080080bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <uprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uprintf(char *str){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f819 	bl	8000150 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4803      	ldr	r0, [pc, #12]	@ (8001134 <uprintf+0x24>)
 8001128:	f003 fff4 	bl	8005114 <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000368 	.word	0x20000368

08001138 <toggleSystemOnOff>:

void toggleSystemOnOff() {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    // Implement the logic to toggle the system on and off;
	systemOn = !systemOn;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <toggleSystemOnOff+0x3c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <toggleSystemOnOff+0x3c>)
 800114e:	601a      	str	r2, [r3, #0]
    if (systemOn) {
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <toggleSystemOnOff+0x3c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <toggleSystemOnOff+0x2c>
        // Turn on system
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Example LED ON
 8001158:	2201      	movs	r2, #1
 800115a:	2180      	movs	r1, #128	@ 0x80
 800115c:	4806      	ldr	r0, [pc, #24]	@ (8001178 <toggleSystemOnOff+0x40>)
 800115e:	f002 f917 	bl	8003390 <HAL_GPIO_WritePin>
    } else {
        // Turn off system
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Example LED OFF
    }
}
 8001162:	e004      	b.n	800116e <toggleSystemOnOff+0x36>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Example LED OFF
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <toggleSystemOnOff+0x40>)
 800116a:	f002 f911 	bl	8003390 <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000240 	.word	0x20000240
 8001178:	40010800 	.word	0x40010800
 800117c:	00000000 	.word	0x00000000

08001180 <readTemperature>:

void readTemperature() {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
	uint32_t soma = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc1);
 800118a:	4823      	ldr	r0, [pc, #140]	@ (8001218 <readTemperature+0x98>)
 800118c:	f001 f8c0 	bl	8002310 <HAL_ADC_Start>
    for(int i = 0; i < 8; i++){
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	e011      	b.n	80011ba <readTemperature+0x3a>
    	HAL_ADC_PollForConversion(&hadc1,100);
 8001196:	2164      	movs	r1, #100	@ 0x64
 8001198:	481f      	ldr	r0, [pc, #124]	@ (8001218 <readTemperature+0x98>)
 800119a:	f001 f993 	bl	80024c4 <HAL_ADC_PollForConversion>
        adcValue = HAL_ADC_GetValue(&hadc1);
 800119e:	481e      	ldr	r0, [pc, #120]	@ (8001218 <readTemperature+0x98>)
 80011a0:	f001 fb4c 	bl	800283c <HAL_ADC_GetValue>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <readTemperature+0x9c>)
 80011a8:	6013      	str	r3, [r2, #0]
        soma += adcValue;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <readTemperature+0x9c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < 8; i++){
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b07      	cmp	r3, #7
 80011be:	ddea      	ble.n	8001196 <readTemperature+0x16>
    }
    adcValue = soma/8;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	4a15      	ldr	r2, [pc, #84]	@ (800121c <readTemperature+0x9c>)
 80011c6:	6013      	str	r3, [r2, #0]
        float voltage = (adcValue / 4095.0); // ADC de 12 bits, Vref = 2.5V
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <readTemperature+0x9c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f909 	bl	80003e4 <__aeabi_ui2d>
 80011d2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001210 <readTemperature+0x90>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff faa8 	bl	800072c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fc50 	bl	8000a88 <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	607b      	str	r3, [r7, #4]
        temperatureMeasured = (voltage) * 50.0; // Escala de 0 a 50ºC
 80011ec:	490c      	ldr	r1, [pc, #48]	@ (8001220 <readTemperature+0xa0>)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fda8 	bl	8000d44 <__aeabi_fmul>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <readTemperature+0xa4>)
 80011fa:	601a      	str	r2, [r3, #0]

    HAL_ADC_Stop(&hadc1);
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <readTemperature+0x98>)
 80011fe:	f001 f935 	bl	800246c <HAL_ADC_Stop>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	00000000 	.word	0x00000000
 8001214:	40affe00 	.word	0x40affe00
 8001218:	20000258 	.word	0x20000258
 800121c:	2000024c 	.word	0x2000024c
 8001220:	42480000 	.word	0x42480000
 8001224:	20000238 	.word	0x20000238

08001228 <updatePWM>:

void updatePWM() {
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0

    if (systemOn) {
 800122c:	4b3c      	ldr	r3, [pc, #240]	@ (8001320 <updatePWM+0xf8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d06e      	beq.n	8001312 <updatePWM+0xea>
        if (temperatureMeasured < (temperatureAdjusted - hysteresis)) {
 8001234:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <updatePWM+0xfc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a3b      	ldr	r2, [pc, #236]	@ (8001328 <updatePWM+0x100>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_fsub>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b38      	ldr	r3, [pc, #224]	@ (800132c <updatePWM+0x104>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f7ff ff34 	bl	80010bc <__aeabi_fcmpgt>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d023      	beq.n	80012a2 <updatePWM+0x7a>

        	 x = (temperatureAdjusted-temperatureMeasured)/45;
 800125a:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <updatePWM+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a33      	ldr	r2, [pc, #204]	@ (800132c <updatePWM+0x104>)
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fc63 	bl	8000b30 <__aeabi_fsub>
 800126a:	4603      	mov	r3, r0
 800126c:	4930      	ldr	r1, [pc, #192]	@ (8001330 <updatePWM+0x108>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe1c 	bl	8000eac <__aeabi_fdiv>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <updatePWM+0x10c>)
 800127a:	601a      	str	r2, [r3, #0]

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x*10000);
 800127c:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <updatePWM+0x10c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	492d      	ldr	r1, [pc, #180]	@ (8001338 <updatePWM+0x110>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd5e 	bl	8000d44 <__aeabi_fmul>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <updatePWM+0x114>)
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	4610      	mov	r0, r2
 8001292:	f7ff ff1d 	bl	80010d0 <__aeabi_f2uiz>
 8001296:	4603      	mov	r3, r0
 8001298:	6363      	str	r3, [r4, #52]	@ 0x34
            controlador = 0;
 800129a:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <updatePWM+0x118>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        }
    } else {
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    }
}
 80012a0:	e03b      	b.n	800131a <updatePWM+0xf2>
        } else if (temperatureMeasured > (temperatureAdjusted + hysteresis)) {
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <updatePWM+0xfc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <updatePWM+0x100>)
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc41 	bl	8000b34 <__addsf3>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <updatePWM+0x104>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4610      	mov	r0, r2
 80012be:	f7ff fedf 	bl	8001080 <__aeabi_fcmplt>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00d      	beq.n	80012e4 <updatePWM+0xbc>
        		x=0;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <updatePWM+0x10c>)
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x);
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <updatePWM+0x10c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	@ (800133c <updatePWM+0x114>)
 80012d6:	6814      	ldr	r4, [r2, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fef9 	bl	80010d0 <__aeabi_f2uiz>
 80012de:	4603      	mov	r3, r0
 80012e0:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80012e2:	e01a      	b.n	800131a <updatePWM+0xf2>
            if(controlador == 0){
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <updatePWM+0x118>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d116      	bne.n	800131a <updatePWM+0xf2>
            	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x*10000);
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <updatePWM+0x10c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4911      	ldr	r1, [pc, #68]	@ (8001338 <updatePWM+0x110>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fd26 	bl	8000d44 <__aeabi_fmul>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <updatePWM+0x114>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4610      	mov	r0, r2
 8001302:	f7ff fee5 	bl	80010d0 <__aeabi_f2uiz>
 8001306:	4603      	mov	r3, r0
 8001308:	6363      	str	r3, [r4, #52]	@ 0x34
            	controlador = 1;
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <updatePWM+0x118>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	e003      	b.n	800131a <updatePWM+0xf2>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <updatePWM+0x114>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800131a:	bf00      	nop
 800131c:	bd98      	pop	{r3, r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	20000240 	.word	0x20000240
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004
 800132c:	20000238 	.word	0x20000238
 8001330:	42340000 	.word	0x42340000
 8001334:	20000248 	.word	0x20000248
 8001338:	461c4000 	.word	0x461c4000
 800133c:	200002d8 	.word	0x200002d8
 8001340:	20000244 	.word	0x20000244

08001344 <encoderPushButtonHandler>:

void encoderPushButtonHandler() {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
    adjustmentMode = !adjustmentMode;
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <encoderPushButtonHandler+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <encoderPushButtonHandler+0x40>)
 800135a:	601a      	str	r2, [r3, #0]
    if (adjustmentMode) {
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <encoderPushButtonHandler+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <encoderPushButtonHandler+0x2e>
        HAL_GPIO_WritePin(GPIOA, ledAjuste_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800136a:	4807      	ldr	r0, [pc, #28]	@ (8001388 <encoderPushButtonHandler+0x44>)
 800136c:	f002 f810 	bl	8003390 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOA, ledAjuste_Pin, GPIO_PIN_RESET);
    }
}
 8001370:	e005      	b.n	800137e <encoderPushButtonHandler+0x3a>
        HAL_GPIO_WritePin(GPIOA, ledAjuste_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <encoderPushButtonHandler+0x44>)
 800137a:	f002 f809 	bl	8003390 <HAL_GPIO_WritePin>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000023c 	.word	0x2000023c
 8001388:	40010800 	.word	0x40010800

0800138c <encoderRotationHandler>:
void encoderRotationHandler(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
    static int32_t lastCounterValue = 0;
    int32_t currentCounterValue = (int32_t)__HAL_TIM_GET_COUNTER(&htim4);
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <encoderRotationHandler+0x98>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	607b      	str	r3, [r7, #4]
    int32_t difference = currentCounterValue - lastCounterValue;
 800139a:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <encoderRotationHandler+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	603b      	str	r3, [r7, #0]

    if (adjustmentMode) {
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <encoderRotationHandler+0xa0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d037      	beq.n	800141c <encoderRotationHandler+0x90>
        if (difference > 0) {
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd0b      	ble.n	80013ca <encoderRotationHandler+0x3e>
        	temperatureAdjusted++;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fbba 	bl	8000b34 <__addsf3>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e00d      	b.n	80013e6 <encoderRotationHandler+0x5a>
        } else if (difference < 0) {
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da0a      	bge.n	80013e6 <encoderRotationHandler+0x5a>
        	temperatureAdjusted--;
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fba9 	bl	8000b30 <__aeabi_fsub>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013e4:	601a      	str	r2, [r3, #0]
        }

        // Ensure temperatureTAJ stays within a valid range
        if (temperatureAdjusted < 30) temperatureAdjusted = 30;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4912      	ldr	r1, [pc, #72]	@ (8001434 <encoderRotationHandler+0xa8>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe47 	bl	8001080 <__aeabi_fcmplt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <encoderRotationHandler+0x72>
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <encoderRotationHandler+0xa8>)
 80013fc:	601a      	str	r2, [r3, #0]
        if (temperatureAdjusted > 45) temperatureAdjusted = 45;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <encoderRotationHandler+0xa4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	490d      	ldr	r1, [pc, #52]	@ (8001438 <encoderRotationHandler+0xac>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe59 	bl	80010bc <__aeabi_fcmpgt>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <encoderRotationHandler+0x8a>
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <encoderRotationHandler+0xa4>)
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <encoderRotationHandler+0xac>)
 8001414:	601a      	str	r2, [r3, #0]

        // Update the last counter value
        lastCounterValue = currentCounterValue;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <encoderRotationHandler+0x9c>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6013      	str	r3, [r2, #0]
    }

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000320 	.word	0x20000320
 8001428:	200003b0 	.word	0x200003b0
 800142c:	2000023c 	.word	0x2000023c
 8001430:	20000000 	.word	0x20000000
 8001434:	41f00000 	.word	0x41f00000
 8001438:	42340000 	.word	0x42340000

0800143c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
	// pega o tempo atual do sistema
	currentMillis = HAL_GetTick();
 8001446:	f000 fe81 	bl	800214c <HAL_GetTick>
 800144a:	4603      	mov	r3, r0
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_GPIO_EXTI_Callback+0x50>)
 800144e:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 500){
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <HAL_GPIO_EXTI_Callback+0x50>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_GPIO_EXTI_Callback+0x54>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800145e:	d910      	bls.n	8001482 <HAL_GPIO_EXTI_Callback+0x46>

		if (GPIO_Pin == OnOff_Pin ) {
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001466:	d102      	bne.n	800146e <HAL_GPIO_EXTI_Callback+0x32>
			toggleSystemOnOff();
 8001468:	f7ff fe66 	bl	8001138 <toggleSystemOnOff>
 800146c:	e005      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x3e>
		} else if (GPIO_Pin == Mode_Pin) {
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001474:	d101      	bne.n	800147a <HAL_GPIO_EXTI_Callback+0x3e>
			encoderPushButtonHandler();
 8001476:	f7ff ff65 	bl	8001344 <encoderPushButtonHandler>
		}
		previousMillis = currentMillis;
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <HAL_GPIO_EXTI_Callback+0x50>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_GPIO_EXTI_Callback+0x54>)
 8001480:	6013      	str	r3, [r2, #0]
	}
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000254 	.word	0x20000254
 8001490:	20000250 	.word	0x20000250

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001498:	b089      	sub	sp, #36	@ 0x24
 800149a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 fe2e 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f868 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 fa56 	bl	8001954 <MX_GPIO_Init>
  MX_CRC_Init();
 80014a8:	f000 f8fe 	bl	80016a8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80014ac:	f000 fa28 	bl	8001900 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014b0:	f000 f8bc 	bl	800162c <MX_ADC1_Init>
  MX_TIM2_Init();
 80014b4:	f000 f90c 	bl	80016d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014b8:	f000 f958 	bl	800176c <MX_TIM3_Init>
  MX_TIM4_Init();
 80014bc:	f000 f9cc 	bl	8001858 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);// Gera pwm para o adc
 80014c0:	2104      	movs	r1, #4
 80014c2:	4821      	ldr	r0, [pc, #132]	@ (8001548 <main+0xb4>)
 80014c4:	f002 fe3a 	bl	800413c <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1); // Calibra o adc antes de iniciar
 80014c8:	4820      	ldr	r0, [pc, #128]	@ (800154c <main+0xb8>)
 80014ca:	f001 fc29 	bl	8002d20 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1); //inicia adc
 80014ce:	481f      	ldr	r0, [pc, #124]	@ (800154c <main+0xb8>)
 80014d0:	f001 f8fe 	bl	80026d0 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Inicia PWM para o aquecedor
 80014d4:	2100      	movs	r1, #0
 80014d6:	481e      	ldr	r0, [pc, #120]	@ (8001550 <main+0xbc>)
 80014d8:	f002 fe30 	bl	800413c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80014dc:	213c      	movs	r1, #60	@ 0x3c
 80014de:	481d      	ldr	r0, [pc, #116]	@ (8001554 <main+0xc0>)
 80014e0:	f002 ff70 	bl	80043c4 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    	readTemperature();
 80014e4:	f7ff fe4c 	bl	8001180 <readTemperature>
	    updatePWM();
 80014e8:	f7ff fe9e 	bl	8001228 <updatePWM>
	    encoderRotationHandler();
 80014ec:	f7ff ff4e 	bl	800138c <encoderRotationHandler>
	    //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, temperatureMeasured*100);

	    sprintf(buffer, "TM: %.2f, TAJ: %.2f, ST: %d, MD: %d, RC: %.2f \n", temperatureMeasured, temperatureAdjusted, systemOn, adjustmentMode, x);
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <main+0xc4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff97 	bl	8000428 <__aeabi_f2d>
 80014fa:	4680      	mov	r8, r0
 80014fc:	4689      	mov	r9, r1
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <main+0xc8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ff90 	bl	8000428 <__aeabi_f2d>
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <main+0xcc>)
 800150e:	681e      	ldr	r6, [r3, #0]
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <main+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <main+0xd4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ff84 	bl	8000428 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	9303      	str	r3, [sp, #12]
 800152c:	9602      	str	r6, [sp, #8]
 800152e:	e9cd 4500 	strd	r4, r5, [sp]
 8001532:	4642      	mov	r2, r8
 8001534:	464b      	mov	r3, r9
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <main+0xd8>)
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <main+0xdc>)
 800153a:	f004 fc89 	bl	8005e50 <siprintf>
	    uprintf(buffer);
 800153e:	480c      	ldr	r0, [pc, #48]	@ (8001570 <main+0xdc>)
 8001540:	f7ff fde6 	bl	8001110 <uprintf>
    	readTemperature();
 8001544:	bf00      	nop
 8001546:	e7cd      	b.n	80014e4 <main+0x50>
 8001548:	20000290 	.word	0x20000290
 800154c:	20000258 	.word	0x20000258
 8001550:	200002d8 	.word	0x200002d8
 8001554:	20000320 	.word	0x20000320
 8001558:	20000238 	.word	0x20000238
 800155c:	20000000 	.word	0x20000000
 8001560:	20000240 	.word	0x20000240
 8001564:	2000023c 	.word	0x2000023c
 8001568:	20000248 	.word	0x20000248
 800156c:	080080d8 	.word	0x080080d8
 8001570:	200001f8 	.word	0x200001f8

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	@ 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157e:	2228      	movs	r2, #40	@ 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fcc7 	bl	8005f16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b2:	2301      	movs	r3, #1
 80015b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b6:	2302      	movs	r3, #2
 80015b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 ff10 	bl	80033f0 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015d6:	f000 fa61 	bl	8001a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 f97c 	bl	80038f4 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001602:	f000 fa4b 	bl	8001a9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001606:	2302      	movs	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800160a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800160e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fb2c 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800161e:	f000 fa3d 	bl	8001a9c <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	@ 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800163e:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <MX_ADC1_Init+0x78>)
 8001640:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001656:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800165a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001664:	2201      	movs	r2, #1
 8001666:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001668:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800166a:	f000 fd79 	bl	8002160 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 fa12 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2301      	movs	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001680:	2302      	movs	r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800168a:	f001 f9b5 	bl	80029f8 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001694:	f000 fa02 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000258 	.word	0x20000258
 80016a4:	40012400 	.word	0x40012400

080016a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_CRC_Init+0x20>)
 80016ae:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <MX_CRC_Init+0x24>)
 80016b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_CRC_Init+0x20>)
 80016b4:	f001 fccb 	bl	800304e <HAL_CRC_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016be:	f000 f9ed 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000288 	.word	0x20000288
 80016cc:	40023000 	.word	0x40023000

080016d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <MX_TIM2_Init+0x98>)
 80016ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <MX_TIM2_Init+0x98>)
 80016f6:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80016fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_TIM2_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3333;
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_TIM2_Init+0x98>)
 8001704:	f640 5205 	movw	r2, #3333	@ 0xd05
 8001708:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_TIM2_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_TIM2_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001716:	4814      	ldr	r0, [pc, #80]	@ (8001768 <MX_TIM2_Init+0x98>)
 8001718:	f002 fc16 	bl	8003f48 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001722:	f000 f9bb 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	@ (8001768 <MX_TIM2_Init+0x98>)
 8001734:	f003 f89e 	bl	8004874 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800173e:	f000 f9ad 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <MX_TIM2_Init+0x98>)
 8001750:	f003 fc20 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800175a:	f000 f99f 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000290 	.word	0x20000290

0800176c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	@ 0x38
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <MX_TIM3_Init+0xe4>)
 800179e:	4a2d      	ldr	r2, [pc, #180]	@ (8001854 <MX_TIM3_Init+0xe8>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017a4:	2248      	movs	r2, #72	@ 0x48
 80017a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c2:	4823      	ldr	r0, [pc, #140]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017c4:	f002 fbc0 	bl	8003f48 <HAL_TIM_Base_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017ce:	f000 f965 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017dc:	4619      	mov	r1, r3
 80017de:	481c      	ldr	r0, [pc, #112]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017e0:	f003 f848 	bl	8004874 <HAL_TIM_ConfigClockSource>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017ea:	f000 f957 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017ee:	4818      	ldr	r0, [pc, #96]	@ (8001850 <MX_TIM3_Init+0xe4>)
 80017f0:	f002 fc4c 	bl	800408c <HAL_TIM_PWM_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017fa:	f000 f94f 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	4619      	mov	r1, r3
 800180c:	4810      	ldr	r0, [pc, #64]	@ (8001850 <MX_TIM3_Init+0xe4>)
 800180e:	f003 fbc1 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001818:	f000 f940 	bl	8001a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181c:	2360      	movs	r3, #96	@ 0x60
 800181e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	4807      	ldr	r0, [pc, #28]	@ (8001850 <MX_TIM3_Init+0xe4>)
 8001834:	f002 ff5c 	bl	80046f0 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800183e:	f000 f92d 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001842:	4803      	ldr	r0, [pc, #12]	@ (8001850 <MX_TIM3_Init+0xe4>)
 8001844:	f000 fa32 	bl	8001cac <HAL_TIM_MspPostInit>

}
 8001848:	bf00      	nop
 800184a:	3738      	adds	r7, #56	@ 0x38
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200002d8 	.word	0x200002d8
 8001854:	40000400 	.word	0x40000400

08001858 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2224      	movs	r2, #36	@ 0x24
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fb55 	bl	8005f16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001874:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 8001876:	4a21      	ldr	r2, [pc, #132]	@ (80018fc <MX_TIM4_Init+0xa4>)
 8001878:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 8001888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800188c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800189a:	2303      	movs	r3, #3
 800189c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018a2:	2301      	movs	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018aa:	230a      	movs	r3, #10
 80018ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018b2:	2301      	movs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 80018c6:	f002 fcdb 	bl	8004280 <HAL_TIM_Encoder_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f000 f8e4 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <MX_TIM4_Init+0xa0>)
 80018e2:	f003 fb57 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80018ec:	f000 f8d6 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	@ 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000320 	.word	0x20000320
 80018fc:	40000800 	.word	0x40000800

08001900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <MX_USART2_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 800190c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_USART2_UART_Init+0x4c>)
 8001938:	f003 fb9c 	bl	8005074 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f000 f8ab 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000368 	.word	0x20000368
 8001950:	40004400 	.word	0x40004400

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	4b3f      	ldr	r3, [pc, #252]	@ (8001a68 <MX_GPIO_Init+0x114>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a68 <MX_GPIO_Init+0x114>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b3c      	ldr	r3, [pc, #240]	@ (8001a68 <MX_GPIO_Init+0x114>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <MX_GPIO_Init+0x114>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a38      	ldr	r2, [pc, #224]	@ (8001a68 <MX_GPIO_Init+0x114>)
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <MX_GPIO_Init+0x114>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b33      	ldr	r3, [pc, #204]	@ (8001a68 <MX_GPIO_Init+0x114>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a32      	ldr	r2, [pc, #200]	@ (8001a68 <MX_GPIO_Init+0x114>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <MX_GPIO_Init+0x114>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <MX_GPIO_Init+0x114>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a68 <MX_GPIO_Init+0x114>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <MX_GPIO_Init+0x114>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDX_GPIO_Port, LEDX_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ce:	4827      	ldr	r0, [pc, #156]	@ (8001a6c <MX_GPIO_Init+0x118>)
 80019d0:	f001 fcde 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedOnOff_Pin|ledAjuste_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80019da:	4825      	ldr	r0, [pc, #148]	@ (8001a70 <MX_GPIO_Init+0x11c>)
 80019dc:	f001 fcd8 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDX_Pin */
  GPIO_InitStruct.Pin = LEDX_Pin;
 80019e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDX_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	481c      	ldr	r0, [pc, #112]	@ (8001a6c <MX_GPIO_Init+0x118>)
 80019fa:	f001 fb45 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedOnOff_Pin ledAjuste_Pin */
  GPIO_InitStruct.Pin = LedOnOff_Pin|ledAjuste_Pin;
 80019fe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	4619      	mov	r1, r3
 8001a16:	4816      	ldr	r0, [pc, #88]	@ (8001a70 <MX_GPIO_Init+0x11c>)
 8001a18:	f001 fb36 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : Taj_Pin */
  GPIO_InitStruct.Pin = Taj_Pin;
 8001a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Taj_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480f      	ldr	r0, [pc, #60]	@ (8001a70 <MX_GPIO_Init+0x11c>)
 8001a32:	f001 fb29 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : OnOff_Pin Mode_Pin */
  GPIO_InitStruct.Pin = OnOff_Pin|Mode_Pin;
 8001a36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <MX_GPIO_Init+0x120>)
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <MX_GPIO_Init+0x11c>)
 8001a4c:	f001 fb1c 	bl	8003088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2028      	movs	r0, #40	@ 0x28
 8001a56:	f001 fad0 	bl	8002ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a5a:	2028      	movs	r0, #40	@ 0x28
 8001a5c:	f001 fae9 	bl	8003032 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	40010800 	.word	0x40010800
 8001a74:	10110000 	.word	0x10110000

08001a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8a:	f000 fb4d 	bl	8002128 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40012c00 	.word	0x40012c00

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <Error_Handler+0x8>

08001aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_MspInit+0x5c>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <HAL_MspInit+0x5c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_MspInit+0x5c>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <HAL_MspInit+0x5c>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <HAL_MspInit+0x5c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <HAL_MspInit+0x5c>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_MspInit+0x60>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <HAL_MspInit+0x60>)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000

08001b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <HAL_ADC_MspInit+0x7c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d129      	bne.n	8001b80 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_ADC_MspInit+0x80>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <HAL_ADC_MspInit+0x80>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_ADC_MspInit+0x80>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_ADC_MspInit+0x80>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a10      	ldr	r2, [pc, #64]	@ (8001b8c <HAL_ADC_MspInit+0x80>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <HAL_ADC_MspInit+0x80>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	2303      	movs	r3, #3
 8001b62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4809      	ldr	r0, [pc, #36]	@ (8001b90 <HAL_ADC_MspInit+0x84>)
 8001b6c:	f001 fa8c 	bl	8003088 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2012      	movs	r0, #18
 8001b76:	f001 fa40 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b7a:	2012      	movs	r0, #18
 8001b7c:	f001 fa59 	bl	8003032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40012400 	.word	0x40012400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010800 	.word	0x40010800

08001b94 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a09      	ldr	r2, [pc, #36]	@ (8001bc8 <HAL_CRC_MspInit+0x34>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10b      	bne.n	8001bbe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_CRC_MspInit+0x38>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_CRC_MspInit+0x38>)
 8001bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb0:	6153      	str	r3, [r2, #20]
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_CRC_MspInit+0x38>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40023000 	.word	0x40023000
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be0:	d10c      	bne.n	8001bfc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_TIM_Base_MspInit+0x58>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a10      	ldr	r2, [pc, #64]	@ (8001c28 <HAL_TIM_Base_MspInit+0x58>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	61d3      	str	r3, [r2, #28]
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_TIM_Base_MspInit+0x58>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bfa:	e010      	b.n	8001c1e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <HAL_TIM_Base_MspInit+0x5c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10b      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_TIM_Base_MspInit+0x58>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_TIM_Base_MspInit+0x58>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_TIM_Base_MspInit+0x58>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40000400 	.word	0x40000400

08001c30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d123      	bne.n	8001c98 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	61d3      	str	r3, [r2, #28]
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c80:	23c0      	movs	r3, #192	@ 0xc0
 8001c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4619      	mov	r1, r3
 8001c92:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001c94:	f001 f9f8 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010c00 	.word	0x40010c00

08001cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d04 <HAL_TIM_MspPostInit+0x58>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d117      	bne.n	8001cfc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_TIM_MspPostInit+0x5c>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <HAL_TIM_MspPostInit+0x5c>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_TIM_MspPostInit+0x5c>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ce4:	2340      	movs	r3, #64	@ 0x40
 8001ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <HAL_TIM_MspPostInit+0x60>)
 8001cf8:	f001 f9c6 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010800 	.word	0x40010800

08001d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <HAL_UART_MspInit+0x88>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d12f      	bne.n	8001d90 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d30:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_UART_MspInit+0x8c>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <HAL_UART_MspInit+0x8c>)
 8001d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3a:	61d3      	str	r3, [r2, #28]
 8001d3c:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <HAL_UART_MspInit+0x8c>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <HAL_UART_MspInit+0x8c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a13      	ldr	r2, [pc, #76]	@ (8001d9c <HAL_UART_MspInit+0x8c>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_UART_MspInit+0x8c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d60:	2304      	movs	r3, #4
 8001d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	480b      	ldr	r0, [pc, #44]	@ (8001da0 <HAL_UART_MspInit+0x90>)
 8001d74:	f001 f988 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <HAL_UART_MspInit+0x90>)
 8001d8c:	f001 f97c 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40004400 	.word	0x40004400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800

08001da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	@ 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001dc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd2:	f107 020c 	add.w	r2, r7, #12
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f001 fef9 	bl	8003bd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001de2:	f001 fee3 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8001de6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dea:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <HAL_InitTick+0xd4>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9b      	lsrs	r3, r3, #18
 8001df2:	3b01      	subs	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001df8:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_InitTick+0xdc>)
 8001dfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001dfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e02:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e04:	4a1d      	ldr	r2, [pc, #116]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e1c:	4817      	ldr	r0, [pc, #92]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001e1e:	f002 f893 	bl	8003f48 <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11b      	bne.n	8001e68 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e30:	4812      	ldr	r0, [pc, #72]	@ (8001e7c <HAL_InitTick+0xd8>)
 8001e32:	f002 f8d9 	bl	8003fe8 <HAL_TIM_Base_Start_IT>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d111      	bne.n	8001e68 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e44:	2019      	movs	r0, #25
 8001e46:	f001 f8f4 	bl	8003032 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d808      	bhi.n	8001e62 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	2019      	movs	r0, #25
 8001e56:	f001 f8d0 	bl	8002ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <HAL_InitTick+0xe0>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e002      	b.n	8001e68 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3730      	adds	r7, #48	@ 0x30
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	431bde83 	.word	0x431bde83
 8001e7c:	200003b4 	.word	0x200003b4
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <NMI_Handler+0x4>

08001e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <MemManage_Handler+0x4>

08001ea0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <BusFault_Handler+0x4>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <UsageFault_Handler+0x4>

08001eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	@ (8001ef0 <ADC1_2_IRQHandler+0x10>)
 8001ee6:	f000 fcb5 	bl	8002854 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000258 	.word	0x20000258

08001ef4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <TIM1_UP_IRQHandler+0x10>)
 8001efa:	f002 faf1 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200003b4 	.word	0x200003b4

08001f08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OnOff_Pin);
 8001f0c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f10:	f001 fa56 	bl	80033c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Mode_Pin);
 8001f14:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001f18:	f001 fa52 	bl	80033c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <_kill>:

int _kill(int pid, int sig)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f38:	f004 f840 	bl	8005fbc <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2216      	movs	r2, #22
 8001f40:	601a      	str	r2, [r3, #0]
  return -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_exit>:

void _exit (int status)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffe7 	bl	8001f2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <_exit+0x12>

08001f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e00a      	b.n	8001f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f76:	f3af 8000 	nop.w
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	b2ca      	uxtb	r2, r1
 8001f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf0      	blt.n	8001f76 <_read+0x12>
  }

  return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e009      	b.n	8001fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf1      	blt.n	8001fb0 <_write+0x12>
  }
  return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_close>:

int _close(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ffc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <_isatty>:

int _isatty(int file)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f003 ffa8 	bl	8005fbc <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20005000 	.word	0x20005000
 8002098:	00000400 	.word	0x00000400
 800209c:	200003fc 	.word	0x200003fc
 80020a0:	20000550 	.word	0x20000550

080020a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020b0:	f7ff fff8 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b4:	480b      	ldr	r0, [pc, #44]	@ (80020e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020b6:	490c      	ldr	r1, [pc, #48]	@ (80020e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020b8:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020cc:	4c09      	ldr	r4, [pc, #36]	@ (80020f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020da:	f003 ff75 	bl	8005fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020de:	f7ff f9d9 	bl	8001494 <main>
  bx lr
 80020e2:	4770      	bx	lr
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80020ec:	080084c8 	.word	0x080084c8
  ldr r2, =_sbss
 80020f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80020f4:	20000550 	.word	0x20000550

080020f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <CAN1_RX1_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_Init+0x28>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_Init+0x28>)
 8002106:	f043 0310 	orr.w	r3, r3, #16
 800210a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 ff69 	bl	8002fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	200f      	movs	r0, #15
 8002114:	f7ff fe46 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff fcc6 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000

08002128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_IncTick+0x1c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_IncTick+0x20>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <HAL_IncTick+0x20>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000010 	.word	0x20000010
 8002148:	20000400 	.word	0x20000400

0800214c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b02      	ldr	r3, [pc, #8]	@ (800215c <HAL_GetTick+0x10>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	20000400 	.word	0x20000400

08002160 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e0be      	b.n	8002300 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d109      	bne.n	80021a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fcb4 	bl	8001b0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fd79 	bl	8002c9c <ADC_ConversionStop_Disable>
 80021aa:	4603      	mov	r3, r0
 80021ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8099 	bne.w	80022ee <HAL_ADC_Init+0x18e>
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8095 	bne.w	80022ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021cc:	f023 0302 	bic.w	r3, r3, #2
 80021d0:	f043 0202 	orr.w	r2, r3, #2
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
 80021e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f8:	d003      	beq.n	8002202 <HAL_ADC_Init+0xa2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d102      	bne.n	8002208 <HAL_ADC_Init+0xa8>
 8002202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002206:	e000      	b.n	800220a <HAL_ADC_Init+0xaa>
 8002208:	2300      	movs	r3, #0
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7d1b      	ldrb	r3, [r3, #20]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d119      	bne.n	800224c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7b1b      	ldrb	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	3b01      	subs	r3, #1
 8002226:	035a      	lsls	r2, r3, #13
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e00b      	b.n	800224c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	4b28      	ldr	r3, [pc, #160]	@ (8002308 <HAL_ADC_Init+0x1a8>)
 8002268:	4013      	ands	r3, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	430b      	orrs	r3, r1
 8002272:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800227c:	d003      	beq.n	8002286 <HAL_ADC_Init+0x126>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d104      	bne.n	8002290 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	3b01      	subs	r3, #1
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002296:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	4b18      	ldr	r3, [pc, #96]	@ (800230c <HAL_ADC_Init+0x1ac>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d10b      	bne.n	80022cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022ca:	e018      	b.n	80022fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d0:	f023 0312 	bic.w	r3, r3, #18
 80022d4:	f043 0210 	orr.w	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022ec:	e007      	b.n	80022fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ffe1f7fd 	.word	0xffe1f7fd
 800230c:	ff1f0efe 	.word	0xff1f0efe

08002310 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_Start+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e098      	b.n	800245c <HAL_ADC_Start+0x14c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fc58 	bl	8002be8 <ADC_Enable>
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 8087 	bne.w	8002452 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a41      	ldr	r2, [pc, #260]	@ (8002464 <HAL_ADC_Start+0x154>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d105      	bne.n	800236e <HAL_ADC_Start+0x5e>
 8002362:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_ADC_Start+0x158>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d115      	bne.n	800239a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d026      	beq.n	80023d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002390:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002398:	e01d      	b.n	80023d6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002468 <HAL_ADC_Start+0x158>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_ADC_Start+0xaa>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002464 <HAL_ADC_Start+0x154>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_Start+0xc6>
 80023ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_ADC_Start+0x158>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	f023 0206 	bic.w	r2, r3, #6
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0202 	mvn.w	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002412:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002416:	d113      	bne.n	8002440 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800241c:	4a11      	ldr	r2, [pc, #68]	@ (8002464 <HAL_ADC_Start+0x154>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d105      	bne.n	800242e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_ADC_Start+0x158>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	e00c      	b.n	800245a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e003      	b.n	800245a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40012800 	.word	0x40012800
 8002468:	40012400 	.word	0x40012400

0800246c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Stop+0x1a>
 8002482:	2302      	movs	r3, #2
 8002484:	e01a      	b.n	80024bc <HAL_ADC_Stop+0x50>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fc04 	bl	8002c9c <ADC_ConversionStop_Disable>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024da:	f7ff fe37 	bl	800214c <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	f043 0220 	orr.w	r2, r3, #32
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0d3      	b.n	80026ae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d131      	bne.n	8002578 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d12a      	bne.n	8002578 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002522:	e021      	b.n	8002568 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d01d      	beq.n	8002568 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_ADC_PollForConversion+0x7e>
 8002532:	f7ff fe0b 	bl	800214c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d212      	bcs.n	8002568 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0a2      	b.n	80026ae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0d6      	beq.n	8002524 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002576:	e070      	b.n	800265a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002578:	4b4f      	ldr	r3, [pc, #316]	@ (80026b8 <HAL_ADC_PollForConversion+0x1f4>)
 800257a:	681c      	ldr	r4, [r3, #0]
 800257c:	2002      	movs	r0, #2
 800257e:	f001 fc2d 	bl	8003ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8002582:	4603      	mov	r3, r0
 8002584:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	4b4b      	ldr	r3, [pc, #300]	@ (80026bc <HAL_ADC_PollForConversion+0x1f8>)
 8002590:	400b      	ands	r3, r1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_ADC_PollForConversion+0x104>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68d9      	ldr	r1, [r3, #12]
 800259c:	4b48      	ldr	r3, [pc, #288]	@ (80026c0 <HAL_ADC_PollForConversion+0x1fc>)
 800259e:	400b      	ands	r3, r1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <HAL_ADC_PollForConversion+0x104>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	4b46      	ldr	r3, [pc, #280]	@ (80026c4 <HAL_ADC_PollForConversion+0x200>)
 80025ac:	400b      	ands	r3, r1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x100>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68d9      	ldr	r1, [r3, #12]
 80025b8:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HAL_ADC_PollForConversion+0x204>)
 80025ba:	400b      	ands	r3, r1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x100>
 80025c0:	2314      	movs	r3, #20
 80025c2:	e020      	b.n	8002606 <HAL_ADC_PollForConversion+0x142>
 80025c4:	2329      	movs	r3, #41	@ 0x29
 80025c6:	e01e      	b.n	8002606 <HAL_ADC_PollForConversion+0x142>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6919      	ldr	r1, [r3, #16]
 80025ce:	4b3d      	ldr	r3, [pc, #244]	@ (80026c4 <HAL_ADC_PollForConversion+0x200>)
 80025d0:	400b      	ands	r3, r1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_ADC_PollForConversion+0x120>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68d9      	ldr	r1, [r3, #12]
 80025dc:	4b3a      	ldr	r3, [pc, #232]	@ (80026c8 <HAL_ADC_PollForConversion+0x204>)
 80025de:	400b      	ands	r3, r1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <HAL_ADC_PollForConversion+0x13c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6919      	ldr	r1, [r3, #16]
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <HAL_ADC_PollForConversion+0x208>)
 80025ec:	400b      	ands	r3, r1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <HAL_ADC_PollForConversion+0x140>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68d9      	ldr	r1, [r3, #12]
 80025f8:	4b34      	ldr	r3, [pc, #208]	@ (80026cc <HAL_ADC_PollForConversion+0x208>)
 80025fa:	400b      	ands	r3, r1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_PollForConversion+0x140>
 8002600:	2354      	movs	r3, #84	@ 0x54
 8002602:	e000      	b.n	8002606 <HAL_ADC_PollForConversion+0x142>
 8002604:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800260c:	e021      	b.n	8002652 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d01a      	beq.n	800264c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_ADC_PollForConversion+0x168>
 800261c:	f7ff fd96 	bl	800214c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d20f      	bcs.n	800264c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d90b      	bls.n	800264c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e030      	b.n	80026ae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	429a      	cmp	r2, r3
 8002658:	d8d9      	bhi.n	800260e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f06f 0212 	mvn.w	r2, #18
 8002662:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800267a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800267e:	d115      	bne.n	80026ac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000008 	.word	0x20000008
 80026bc:	24924924 	.word	0x24924924
 80026c0:	00924924 	.word	0x00924924
 80026c4:	12492492 	.word	0x12492492
 80026c8:	00492492 	.word	0x00492492
 80026cc:	00249249 	.word	0x00249249

080026d0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_Start_IT+0x1a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e0a0      	b.n	800282c <HAL_ADC_Start_IT+0x15c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa78 	bl	8002be8 <ADC_Enable>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 808f 	bne.w	8002822 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a45      	ldr	r2, [pc, #276]	@ (8002834 <HAL_ADC_Start_IT+0x164>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d105      	bne.n	800272e <HAL_ADC_Start_IT+0x5e>
 8002722:	4b45      	ldr	r3, [pc, #276]	@ (8002838 <HAL_ADC_Start_IT+0x168>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d115      	bne.n	800275a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002732:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d026      	beq.n	8002796 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002750:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002758:	e01d      	b.n	8002796 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <HAL_ADC_Start_IT+0x168>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_ADC_Start_IT+0xaa>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2f      	ldr	r2, [pc, #188]	@ (8002834 <HAL_ADC_Start_IT+0x164>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10d      	bne.n	8002796 <HAL_ADC_Start_IT+0xc6>
 800277a:	4b2f      	ldr	r3, [pc, #188]	@ (8002838 <HAL_ADC_Start_IT+0x168>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800278e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	f023 0206 	bic.w	r2, r3, #6
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027ae:	e002      	b.n	80027b6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f06f 0202 	mvn.w	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80027e2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80027e6:	d113      	bne.n	8002810 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027ec:	4a11      	ldr	r2, [pc, #68]	@ (8002834 <HAL_ADC_Start_IT+0x164>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d105      	bne.n	80027fe <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_ADC_Start_IT+0x168>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	e00c      	b.n	800282a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e003      	b.n	800282a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40012800 	.word	0x40012800
 8002838:	40012400 	.word	0x40012400

0800283c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d03e      	beq.n	80028f4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d039      	beq.n	80028f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80028a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80028a6:	d11d      	bne.n	80028e4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d119      	bne.n	80028e4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0220 	bic.w	r2, r2, #32
 80028be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f874 	bl	80029d2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f06f 0212 	mvn.w	r2, #18
 80028f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d04d      	beq.n	800299a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d048      	beq.n	800299a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800292a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800292e:	d012      	beq.n	8002956 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800293a:	2b00      	cmp	r3, #0
 800293c:	d125      	bne.n	800298a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002948:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800294c:	d11d      	bne.n	800298a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d119      	bne.n	800298a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002964:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa76 	bl	8002e7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 020c 	mvn.w	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f812 	bl	80029e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0201 	mvn.w	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x20>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0dc      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x1da>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d81c      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b05      	subs	r3, #5
 8002a3a:	221f      	movs	r2, #31
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4019      	ands	r1, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b05      	subs	r3, #5
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a60:	e03c      	b.n	8002adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d81c      	bhi.n	8002aa4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b23      	subs	r3, #35	@ 0x23
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4019      	ands	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b23      	subs	r3, #35	@ 0x23
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aa2:	e01b      	b.n	8002adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b41      	subs	r3, #65	@ 0x41
 8002ab6:	221f      	movs	r2, #31
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4019      	ands	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b41      	subs	r3, #65	@ 0x41
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b09      	cmp	r3, #9
 8002ae2:	d91c      	bls.n	8002b1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	3b1e      	subs	r3, #30
 8002af6:	2207      	movs	r2, #7
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4019      	ands	r1, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6898      	ldr	r0, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b1e      	subs	r3, #30
 8002b10:	fa00 f203 	lsl.w	r2, r0, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	e019      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6919      	ldr	r1, [r3, #16]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	2207      	movs	r2, #7
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	4019      	ands	r1, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6898      	ldr	r0, [r3, #8]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d003      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d132      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1d      	ldr	r2, [pc, #116]	@ (8002bdc <HAL_ADC_ConfigChannel+0x1e4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d125      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d126      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d11a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b92:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a13      	ldr	r2, [pc, #76]	@ (8002be4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	0c9a      	lsrs	r2, r3, #18
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ba8:	e002      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f9      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x1b2>
 8002bb6:	e007      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40012400 	.word	0x40012400
 8002be0:	20000008 	.word	0x20000008
 8002be4:	431bde83 	.word	0x431bde83

08002be8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d040      	beq.n	8002c88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c16:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <ADC_Enable+0xac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <ADC_Enable+0xb0>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	0c9b      	lsrs	r3, r3, #18
 8002c22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c24:	e002      	b.n	8002c2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c32:	f7ff fa8b 	bl	800214c <HAL_GetTick>
 8002c36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c38:	e01f      	b.n	8002c7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c3a:	f7ff fa87 	bl	800214c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d918      	bls.n	8002c7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d011      	beq.n	8002c7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e007      	b.n	8002c8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d1d8      	bne.n	8002c3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000008 	.word	0x20000008
 8002c98:	431bde83 	.word	0x431bde83

08002c9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d12e      	bne.n	8002d14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cc6:	f7ff fa41 	bl	800214c <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ccc:	e01b      	b.n	8002d06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cce:	f7ff fa3d 	bl	800214c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d914      	bls.n	8002d06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10d      	bne.n	8002d06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e007      	b.n	8002d16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d0dc      	beq.n	8002cce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_ADCEx_Calibration_Start+0x1e>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e097      	b.n	8002e6e <HAL_ADCEx_Calibration_Start+0x14e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffa8 	bl	8002c9c <ADC_ConversionStop_Disable>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff49 	bl	8002be8 <ADC_Enable>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8081 	bne.w	8002e64 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d6a:	f023 0302 	bic.w	r3, r3, #2
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d76:	4b40      	ldr	r3, [pc, #256]	@ (8002e78 <HAL_ADCEx_Calibration_Start+0x158>)
 8002d78:	681c      	ldr	r4, [r3, #0]
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f001 f82e 	bl	8003ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8002d80:	4603      	mov	r3, r0
 8002d82:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002d86:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002d88:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002d8a:	e002      	b.n	8002d92 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f9      	bne.n	8002d8c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0208 	orr.w	r2, r2, #8
 8002da6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002da8:	f7ff f9d0 	bl	800214c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dae:	e01b      	b.n	8002de8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002db0:	f7ff f9cc 	bl	800214c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d914      	bls.n	8002de8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	f023 0312 	bic.w	r3, r3, #18
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e042      	b.n	8002e6e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1dc      	bne.n	8002db0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0204 	orr.w	r2, r2, #4
 8002e04:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e06:	f7ff f9a1 	bl	800214c <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e0c:	e01b      	b.n	8002e46 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e0e:	f7ff f99d 	bl	800214c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b0a      	cmp	r3, #10
 8002e1a:	d914      	bls.n	8002e46 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	f023 0312 	bic.w	r3, r3, #18
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e013      	b.n	8002e6e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1dc      	bne.n	8002e0e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	f023 0303 	bic.w	r3, r3, #3
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
	...

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	@ (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4906      	ldr	r1, [pc, #24]	@ (8002f28 <__NVIC_EnableIRQ+0x34>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	@ (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	@ (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	@ 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff4f 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800300c:	f7ff ff64 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 8003010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f7ff ffb2 	bl	8002f80 <NVIC_EncodePriority>
 800301c:	4602      	mov	r2, r0
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff81 	bl	8002f2c <__NVIC_SetPriority>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff57 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e00e      	b.n	800307e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	795b      	ldrb	r3, [r3, #5]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7fe fd8f 	bl	8001b94 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b08b      	sub	sp, #44	@ 0x2c
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	e169      	b.n	8003370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800309c:	2201      	movs	r2, #1
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	f040 8158 	bne.w	800336a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a9a      	ldr	r2, [pc, #616]	@ (8003328 <HAL_GPIO_Init+0x2a0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d05e      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030c4:	4a98      	ldr	r2, [pc, #608]	@ (8003328 <HAL_GPIO_Init+0x2a0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d875      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030ca:	4a98      	ldr	r2, [pc, #608]	@ (800332c <HAL_GPIO_Init+0x2a4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d058      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030d0:	4a96      	ldr	r2, [pc, #600]	@ (800332c <HAL_GPIO_Init+0x2a4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d86f      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030d6:	4a96      	ldr	r2, [pc, #600]	@ (8003330 <HAL_GPIO_Init+0x2a8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d052      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030dc:	4a94      	ldr	r2, [pc, #592]	@ (8003330 <HAL_GPIO_Init+0x2a8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d869      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030e2:	4a94      	ldr	r2, [pc, #592]	@ (8003334 <HAL_GPIO_Init+0x2ac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04c      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030e8:	4a92      	ldr	r2, [pc, #584]	@ (8003334 <HAL_GPIO_Init+0x2ac>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d863      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030ee:	4a92      	ldr	r2, [pc, #584]	@ (8003338 <HAL_GPIO_Init+0x2b0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d046      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030f4:	4a90      	ldr	r2, [pc, #576]	@ (8003338 <HAL_GPIO_Init+0x2b0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d85d      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030fa:	2b12      	cmp	r3, #18
 80030fc:	d82a      	bhi.n	8003154 <HAL_GPIO_Init+0xcc>
 80030fe:	2b12      	cmp	r3, #18
 8003100:	d859      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 8003102:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <HAL_GPIO_Init+0x80>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003183 	.word	0x08003183
 800310c:	0800315d 	.word	0x0800315d
 8003110:	0800316f 	.word	0x0800316f
 8003114:	080031b1 	.word	0x080031b1
 8003118:	080031b7 	.word	0x080031b7
 800311c:	080031b7 	.word	0x080031b7
 8003120:	080031b7 	.word	0x080031b7
 8003124:	080031b7 	.word	0x080031b7
 8003128:	080031b7 	.word	0x080031b7
 800312c:	080031b7 	.word	0x080031b7
 8003130:	080031b7 	.word	0x080031b7
 8003134:	080031b7 	.word	0x080031b7
 8003138:	080031b7 	.word	0x080031b7
 800313c:	080031b7 	.word	0x080031b7
 8003140:	080031b7 	.word	0x080031b7
 8003144:	080031b7 	.word	0x080031b7
 8003148:	080031b7 	.word	0x080031b7
 800314c:	08003165 	.word	0x08003165
 8003150:	08003179 	.word	0x08003179
 8003154:	4a79      	ldr	r2, [pc, #484]	@ (800333c <HAL_GPIO_Init+0x2b4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800315a:	e02c      	b.n	80031b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	623b      	str	r3, [r7, #32]
          break;
 8003162:	e029      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	3304      	adds	r3, #4
 800316a:	623b      	str	r3, [r7, #32]
          break;
 800316c:	e024      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	3308      	adds	r3, #8
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e01f      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	330c      	adds	r3, #12
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e01a      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800318a:	2304      	movs	r3, #4
 800318c:	623b      	str	r3, [r7, #32]
          break;
 800318e:	e013      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003198:	2308      	movs	r3, #8
 800319a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	611a      	str	r2, [r3, #16]
          break;
 80031a2:	e009      	b.n	80031b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031a4:	2308      	movs	r3, #8
 80031a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	615a      	str	r2, [r3, #20]
          break;
 80031ae:	e003      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031b0:	2300      	movs	r3, #0
 80031b2:	623b      	str	r3, [r7, #32]
          break;
 80031b4:	e000      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          break;
 80031b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2bff      	cmp	r3, #255	@ 0xff
 80031bc:	d801      	bhi.n	80031c2 <HAL_GPIO_Init+0x13a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	e001      	b.n	80031c6 <HAL_GPIO_Init+0x13e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2bff      	cmp	r3, #255	@ 0xff
 80031cc:	d802      	bhi.n	80031d4 <HAL_GPIO_Init+0x14c>
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	e002      	b.n	80031da <HAL_GPIO_Init+0x152>
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	3b08      	subs	r3, #8
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	210f      	movs	r1, #15
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	6a39      	ldr	r1, [r7, #32]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	431a      	orrs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80b1 	beq.w	800336a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003208:	4b4d      	ldr	r3, [pc, #308]	@ (8003340 <HAL_GPIO_Init+0x2b8>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a4c      	ldr	r2, [pc, #304]	@ (8003340 <HAL_GPIO_Init+0x2b8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b4a      	ldr	r3, [pc, #296]	@ (8003340 <HAL_GPIO_Init+0x2b8>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003220:	4a48      	ldr	r2, [pc, #288]	@ (8003344 <HAL_GPIO_Init+0x2bc>)
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	3302      	adds	r3, #2
 8003228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a40      	ldr	r2, [pc, #256]	@ (8003348 <HAL_GPIO_Init+0x2c0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d013      	beq.n	8003274 <HAL_GPIO_Init+0x1ec>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3f      	ldr	r2, [pc, #252]	@ (800334c <HAL_GPIO_Init+0x2c4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00d      	beq.n	8003270 <HAL_GPIO_Init+0x1e8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3e      	ldr	r2, [pc, #248]	@ (8003350 <HAL_GPIO_Init+0x2c8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <HAL_GPIO_Init+0x1e4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3d      	ldr	r2, [pc, #244]	@ (8003354 <HAL_GPIO_Init+0x2cc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_GPIO_Init+0x1e0>
 8003264:	2303      	movs	r3, #3
 8003266:	e006      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 8003268:	2304      	movs	r3, #4
 800326a:	e004      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 800326c:	2302      	movs	r3, #2
 800326e:	e002      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_GPIO_Init+0x1ee>
 8003274:	2300      	movs	r3, #0
 8003276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003278:	f002 0203 	and.w	r2, r2, #3
 800327c:	0092      	lsls	r2, r2, #2
 800327e:	4093      	lsls	r3, r2
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003286:	492f      	ldr	r1, [pc, #188]	@ (8003344 <HAL_GPIO_Init+0x2bc>)
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	492c      	ldr	r1, [pc, #176]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	4928      	ldr	r1, [pc, #160]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c8:	4b23      	ldr	r3, [pc, #140]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	4922      	ldr	r1, [pc, #136]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60cb      	str	r3, [r1, #12]
 80032d4:	e006      	b.n	80032e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032d6:	4b20      	ldr	r3, [pc, #128]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	43db      	mvns	r3, r3
 80032de:	491e      	ldr	r1, [pc, #120]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d006      	beq.n	80032fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032f0:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	4918      	ldr	r1, [pc, #96]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032fe:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	43db      	mvns	r3, r3
 8003306:	4914      	ldr	r1, [pc, #80]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 8003308:	4013      	ands	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d021      	beq.n	800335c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003318:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	490e      	ldr	r1, [pc, #56]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
 8003324:	e021      	b.n	800336a <HAL_GPIO_Init+0x2e2>
 8003326:	bf00      	nop
 8003328:	10320000 	.word	0x10320000
 800332c:	10310000 	.word	0x10310000
 8003330:	10220000 	.word	0x10220000
 8003334:	10210000 	.word	0x10210000
 8003338:	10120000 	.word	0x10120000
 800333c:	10110000 	.word	0x10110000
 8003340:	40021000 	.word	0x40021000
 8003344:	40010000 	.word	0x40010000
 8003348:	40010800 	.word	0x40010800
 800334c:	40010c00 	.word	0x40010c00
 8003350:	40011000 	.word	0x40011000
 8003354:	40011400 	.word	0x40011400
 8003358:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800335c:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <HAL_GPIO_Init+0x304>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	43db      	mvns	r3, r3
 8003364:	4909      	ldr	r1, [pc, #36]	@ (800338c <HAL_GPIO_Init+0x304>)
 8003366:	4013      	ands	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	3301      	adds	r3, #1
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	f47f ae8e 	bne.w	800309c <HAL_GPIO_Init+0x14>
  }
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	372c      	adds	r7, #44	@ 0x2c
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40010400 	.word	0x40010400

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d006      	beq.n	80033e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033d6:	4a05      	ldr	r2, [pc, #20]	@ (80033ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe f82c 	bl	800143c <HAL_GPIO_EXTI_Callback>
  }
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e272      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8087 	beq.w	800351e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003410:	4b92      	ldr	r3, [pc, #584]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b04      	cmp	r3, #4
 800341a:	d00c      	beq.n	8003436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800341c:	4b8f      	ldr	r3, [pc, #572]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d112      	bne.n	800344e <HAL_RCC_OscConfig+0x5e>
 8003428:	4b8c      	ldr	r3, [pc, #560]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003434:	d10b      	bne.n	800344e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003436:	4b89      	ldr	r3, [pc, #548]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06c      	beq.n	800351c <HAL_RCC_OscConfig+0x12c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d168      	bne.n	800351c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e24c      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x76>
 8003458:	4b80      	ldr	r3, [pc, #512]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a7f      	ldr	r2, [pc, #508]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800345e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e02e      	b.n	80034c4 <HAL_RCC_OscConfig+0xd4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x98>
 800346e:	4b7b      	ldr	r3, [pc, #492]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7a      	ldr	r2, [pc, #488]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b78      	ldr	r3, [pc, #480]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a77      	ldr	r2, [pc, #476]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e01d      	b.n	80034c4 <HAL_RCC_OscConfig+0xd4>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0xbc>
 8003492:	4b72      	ldr	r3, [pc, #456]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a71      	ldr	r2, [pc, #452]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b6f      	ldr	r3, [pc, #444]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6e      	ldr	r2, [pc, #440]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0xd4>
 80034ac:	4b6b      	ldr	r3, [pc, #428]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6a      	ldr	r2, [pc, #424]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b68      	ldr	r3, [pc, #416]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a67      	ldr	r2, [pc, #412]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fe3e 	bl	800214c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fe3a 	bl	800214c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e200      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b5d      	ldr	r3, [pc, #372]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe4>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fe2a 	bl	800214c <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe fe26 	bl	800214c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	@ 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1ec      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	4b53      	ldr	r3, [pc, #332]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x10c>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d063      	beq.n	80035f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800352a:	4b4c      	ldr	r3, [pc, #304]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003536:	4b49      	ldr	r3, [pc, #292]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b08      	cmp	r3, #8
 8003540:	d11c      	bne.n	800357c <HAL_RCC_OscConfig+0x18c>
 8003542:	4b46      	ldr	r3, [pc, #280]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d116      	bne.n	800357c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	4b43      	ldr	r3, [pc, #268]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_RCC_OscConfig+0x176>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e1c0      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003566:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4939      	ldr	r1, [pc, #228]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	e03a      	b.n	80035f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003584:	4b36      	ldr	r3, [pc, #216]	@ (8003660 <HAL_RCC_OscConfig+0x270>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fe fddf 	bl	800214c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003592:	f7fe fddb 	bl	800214c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e1a1      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	4b2d      	ldr	r3, [pc, #180]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4927      	ldr	r1, [pc, #156]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]
 80035c4:	e015      	b.n	80035f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c6:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <HAL_RCC_OscConfig+0x270>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fdbe 	bl	800214c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d4:	f7fe fdba 	bl	800214c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e180      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d03a      	beq.n	8003674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d019      	beq.n	800363a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003606:	4b17      	ldr	r3, [pc, #92]	@ (8003664 <HAL_RCC_OscConfig+0x274>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360c:	f7fe fd9e 	bl	800214c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003614:	f7fe fd9a 	bl	800214c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e160      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003632:	2001      	movs	r0, #1
 8003634:	f000 fafe 	bl	8003c34 <RCC_Delay>
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_RCC_OscConfig+0x274>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7fe fd84 	bl	800214c <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003646:	e00f      	b.n	8003668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003648:	f7fe fd80 	bl	800214c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d908      	bls.n	8003668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e146      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	42420000 	.word	0x42420000
 8003664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e9      	bne.n	8003648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a6 	beq.w	80037ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b8b      	ldr	r3, [pc, #556]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b88      	ldr	r3, [pc, #544]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4a87      	ldr	r2, [pc, #540]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369c:	61d3      	str	r3, [r2, #28]
 800369e:	4b85      	ldr	r3, [pc, #532]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b82      	ldr	r3, [pc, #520]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d118      	bne.n	80036ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ba:	4b7f      	ldr	r3, [pc, #508]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7e      	ldr	r2, [pc, #504]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fd41 	bl	800214c <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fe fd3d 	bl	800214c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b64      	cmp	r3, #100	@ 0x64
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e103      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	4b75      	ldr	r3, [pc, #468]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x312>
 80036f4:	4b6f      	ldr	r3, [pc, #444]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a6e      	ldr	r2, [pc, #440]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	e02d      	b.n	800375e <HAL_RCC_OscConfig+0x36e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x334>
 800370a:	4b6a      	ldr	r3, [pc, #424]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a69      	ldr	r2, [pc, #420]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6213      	str	r3, [r2, #32]
 8003716:	4b67      	ldr	r3, [pc, #412]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a66      	ldr	r2, [pc, #408]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6213      	str	r3, [r2, #32]
 8003722:	e01c      	b.n	800375e <HAL_RCC_OscConfig+0x36e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x356>
 800372c:	4b61      	ldr	r3, [pc, #388]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4a60      	ldr	r2, [pc, #384]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6213      	str	r3, [r2, #32]
 8003738:	4b5e      	ldr	r3, [pc, #376]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4a5d      	ldr	r2, [pc, #372]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6213      	str	r3, [r2, #32]
 8003744:	e00b      	b.n	800375e <HAL_RCC_OscConfig+0x36e>
 8003746:	4b5b      	ldr	r3, [pc, #364]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	4a5a      	ldr	r2, [pc, #360]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6213      	str	r3, [r2, #32]
 8003752:	4b58      	ldr	r3, [pc, #352]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a57      	ldr	r2, [pc, #348]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe fcf1 	bl	800214c <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe fced 	bl	800214c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0b1      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCC_OscConfig+0x37e>
 8003790:	e014      	b.n	80037bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7fe fcdb 	bl	800214c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe fcd7 	bl	800214c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e09b      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b3c      	ldr	r3, [pc, #240]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4a3b      	ldr	r2, [pc, #236]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8087 	beq.w	80038e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d8:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d061      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d146      	bne.n	800387a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b33      	ldr	r3, [pc, #204]	@ (80038bc <HAL_RCC_OscConfig+0x4cc>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fe fcab 	bl	800214c <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fe fca7 	bl	800214c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e06d      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380c:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003820:	d108      	bne.n	8003834 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003822:	4b24      	ldr	r3, [pc, #144]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4921      	ldr	r1, [pc, #132]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003834:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a19      	ldr	r1, [r3, #32]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	430b      	orrs	r3, r1
 8003846:	491b      	ldr	r1, [pc, #108]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x4cc>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fc7b 	bl	800214c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fc77 	bl	800214c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e03d      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800386c:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x46a>
 8003878:	e035      	b.n	80038e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <HAL_RCC_OscConfig+0x4cc>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fc64 	bl	800214c <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fc60 	bl	800214c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e026      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x498>
 80038a6:	e01e      	b.n	80038e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e019      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
 80038bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_OscConfig+0x500>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0d0      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d910      	bls.n	8003938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b67      	ldr	r3, [pc, #412]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	4965      	ldr	r1, [pc, #404]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b63      	ldr	r3, [pc, #396]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0b8      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003950:	4b59      	ldr	r3, [pc, #356]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a58      	ldr	r2, [pc, #352]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800395a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003968:	4b53      	ldr	r3, [pc, #332]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a52      	ldr	r2, [pc, #328]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	494d      	ldr	r1, [pc, #308]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d040      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d115      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e07f      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b41      	ldr	r3, [pc, #260]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e073      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e06b      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4936      	ldr	r1, [pc, #216]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fe fbb2 	bl	800214c <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fe fbae 	bl	800214c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e053      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d210      	bcs.n	8003a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4922      	ldr	r1, [pc, #136]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e032      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a50:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4916      	ldr	r1, [pc, #88]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	490e      	ldr	r1, [pc, #56]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a82:	f000 f821 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	490a      	ldr	r1, [pc, #40]	@ (8003abc <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	5ccb      	ldrb	r3, [r1, r3]
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8003a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe f97e 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08008108 	.word	0x08008108
 8003ac0:	20000008 	.word	0x20000008
 8003ac4:	2000000c 	.word	0x2000000c

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x30>
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x36>
 8003af6:	e027      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003afa:	613b      	str	r3, [r7, #16]
      break;
 8003afc:	e027      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	0c9b      	lsrs	r3, r3, #18
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d010      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b16:	4b11      	ldr	r3, [pc, #68]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	0c5b      	lsrs	r3, r3, #17
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	4a11      	ldr	r2, [pc, #68]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a0d      	ldr	r2, [pc, #52]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b2a:	fb03 f202 	mul.w	r2, r3, r2
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e004      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	613b      	str	r3, [r7, #16]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b4a:	613b      	str	r3, [r7, #16]
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	693b      	ldr	r3, [r7, #16]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	007a1200 	.word	0x007a1200
 8003b64:	08008120 	.word	0x08008120
 8003b68:	08008130 	.word	0x08008130
 8003b6c:	003d0900 	.word	0x003d0900

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b02      	ldr	r3, [pc, #8]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff2 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08008118 	.word	0x08008118

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb0:	f7ff ffde 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0adb      	lsrs	r3, r3, #11
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	08008118 	.word	0x08008118

08003bd4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	220f      	movs	r2, #15
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be4:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c08:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_GetClockConfig+0x5c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40022000 	.word	0x40022000

08003c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <RCC_Delay+0x34>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <RCC_Delay+0x38>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a5b      	lsrs	r3, r3, #9
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c50:	bf00      	nop
  }
  while (Delay --);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	60fa      	str	r2, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <RCC_Delay+0x1c>
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	20000008 	.word	0x20000008
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d07d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c90:	4b4f      	ldr	r3, [pc, #316]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
 8003ca8:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b46      	ldr	r3, [pc, #280]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d118      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc4:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a42      	ldr	r2, [pc, #264]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fa3c 	bl	800214c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fe fa38 	bl	800214c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	@ 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e06d      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf6:	4b36      	ldr	r3, [pc, #216]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02e      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d027      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d14:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d2a:	4a29      	ldr	r2, [pc, #164]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fa07 	bl	800214c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fe fa03 	bl	800214c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e036      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ee      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d64:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4917      	ldr	r1, [pc, #92]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a13      	ldr	r2, [pc, #76]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d94:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	490b      	ldr	r1, [pc, #44]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4904      	ldr	r1, [pc, #16]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42420440 	.word	0x42420440

08003ddc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	f200 808a 	bhi.w	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d045      	beq.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d075      	beq.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e12:	e082      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003e14:	4b46      	ldr	r3, [pc, #280]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e1a:	4b45      	ldr	r3, [pc, #276]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d07b      	beq.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	0c9b      	lsrs	r3, r3, #18
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a41      	ldr	r2, [pc, #260]	@ (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d015      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0c5b      	lsrs	r3, r3, #17
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	4a3b      	ldr	r2, [pc, #236]	@ (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e58:	4a38      	ldr	r2, [pc, #224]	@ (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	e004      	b.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4a34      	ldr	r2, [pc, #208]	@ (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e74:	4b2e      	ldr	r3, [pc, #184]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e80:	d102      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	61bb      	str	r3, [r7, #24]
      break;
 8003e86:	e04a      	b.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	61bb      	str	r3, [r7, #24]
      break;
 8003e96:	e042      	b.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003e98:	4b25      	ldr	r3, [pc, #148]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea8:	d108      	bne.n	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e01f      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec6:	d109      	bne.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ec8:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003ed4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e00f      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ee6:	d11c      	bne.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ef4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003ef8:	61bb      	str	r3, [r7, #24]
      break;
 8003efa:	e012      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003efc:	e011      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003efe:	f7ff fe55 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	0b9b      	lsrs	r3, r3, #14
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	61bb      	str	r3, [r7, #24]
      break;
 8003f18:	e004      	b.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f22:	bf00      	nop
    }
  }
  return (frequency);
 8003f24:	69bb      	ldr	r3, [r7, #24]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08008134 	.word	0x08008134
 8003f38:	08008144 	.word	0x08008144
 8003f3c:	007a1200 	.word	0x007a1200
 8003f40:	003d0900 	.word	0x003d0900
 8003f44:	aaaaaaab 	.word	0xaaaaaaab

08003f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e041      	b.n	8003fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fe2e 	bl	8001bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f000 fd60 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d001      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e03a      	b.n	8004076 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <HAL_TIM_Base_Start_IT+0x98>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x58>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402a:	d009      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x58>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <HAL_TIM_Base_Start_IT+0x9c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x58>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a13      	ldr	r2, [pc, #76]	@ (8004088 <HAL_TIM_Base_Start_IT+0xa0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d111      	bne.n	8004064 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b06      	cmp	r3, #6
 8004050:	d010      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004062:	e007      	b.n	8004074 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800

0800408c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e041      	b.n	8004122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f839 	bl	800412a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f000 fcbe 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <HAL_TIM_PWM_Start+0x24>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e022      	b.n	80041a6 <HAL_TIM_PWM_Start+0x6a>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b04      	cmp	r3, #4
 8004164:	d109      	bne.n	800417a <HAL_TIM_PWM_Start+0x3e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	bf14      	ite	ne
 8004172:	2301      	movne	r3, #1
 8004174:	2300      	moveq	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	e015      	b.n	80041a6 <HAL_TIM_PWM_Start+0x6a>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d109      	bne.n	8004194 <HAL_TIM_PWM_Start+0x58>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e008      	b.n	80041a6 <HAL_TIM_PWM_Start+0x6a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e05e      	b.n	800426c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0x82>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041bc:	e013      	b.n	80041e6 <HAL_TIM_PWM_Start+0xaa>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_PWM_Start+0x92>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041cc:	e00b      	b.n	80041e6 <HAL_TIM_PWM_Start+0xaa>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Start+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041dc:	e003      	b.n	80041e6 <HAL_TIM_PWM_Start+0xaa>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2201      	movs	r2, #1
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 feac 	bl	8004f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004274 <HAL_TIM_PWM_Start+0x138>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d107      	bne.n	800420e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <HAL_TIM_PWM_Start+0x138>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_TIM_PWM_Start+0xfa>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004220:	d009      	beq.n	8004236 <HAL_TIM_PWM_Start+0xfa>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a14      	ldr	r2, [pc, #80]	@ (8004278 <HAL_TIM_PWM_Start+0x13c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_TIM_PWM_Start+0xfa>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a12      	ldr	r2, [pc, #72]	@ (800427c <HAL_TIM_PWM_Start+0x140>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d111      	bne.n	800425a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b06      	cmp	r3, #6
 8004246:	d010      	beq.n	800426a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004258:	e007      	b.n	800426a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800

08004280 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e093      	b.n	80043bc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fd fcc1 	bl	8001c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042c4:	f023 0307 	bic.w	r3, r3, #7
 80042c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f000 fbb9 	bl	8004a4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	4313      	orrs	r3, r2
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004320:	f023 030c 	bic.w	r3, r3, #12
 8004324:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800432c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	4313      	orrs	r3, r2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	011a      	lsls	r2, r3, #4
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	031b      	lsls	r3, r3, #12
 8004350:	4313      	orrs	r3, r2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4313      	orrs	r3, r2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d110      	bne.n	8004416 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d102      	bne.n	8004400 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043fa:	7b7b      	ldrb	r3, [r7, #13]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e069      	b.n	80044d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	e031      	b.n	800447a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d110      	bne.n	800443e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800441c:	7bbb      	ldrb	r3, [r7, #14]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d102      	bne.n	8004428 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004422:	7b3b      	ldrb	r3, [r7, #12]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e055      	b.n	80044d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800443c:	e01d      	b.n	800447a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d108      	bne.n	8004456 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004444:	7bbb      	ldrb	r3, [r7, #14]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800444a:	7b7b      	ldrb	r3, [r7, #13]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d102      	bne.n	8004456 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004450:	7b3b      	ldrb	r3, [r7, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e03e      	b.n	80044d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_TIM_Encoder_Start+0xc4>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b04      	cmp	r3, #4
 8004484:	d008      	beq.n	8004498 <HAL_TIM_Encoder_Start+0xd4>
 8004486:	e00f      	b.n	80044a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fd5b 	bl	8004f4c <TIM_CCxChannelCmd>
      break;
 8004496:	e016      	b.n	80044c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	2104      	movs	r1, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fd53 	bl	8004f4c <TIM_CCxChannelCmd>
      break;
 80044a6:	e00e      	b.n	80044c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fd4b 	bl	8004f4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	2104      	movs	r1, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fd44 	bl	8004f4c <TIM_CCxChannelCmd>
      break;
 80044c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa76 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa69 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa78 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa4c 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa3f 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa4e 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0208 	mvn.w	r2, #8
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2204      	movs	r2, #4
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa22 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa15 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa24 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9f8 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9eb 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f9fa 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0201 	mvn.w	r2, #1
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fd fa0a 	bl	8001a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466e:	2b80      	cmp	r3, #128	@ 0x80
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467c:	2b80      	cmp	r3, #128	@ 0x80
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fce9 	bl	8005062 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a8:	2b40      	cmp	r3, #64	@ 0x40
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9be 	bl	8004a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0220 	mvn.w	r2, #32
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fcb4 	bl	8005050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800470a:	2302      	movs	r3, #2
 800470c:	e0ae      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b0c      	cmp	r3, #12
 800471a:	f200 809f 	bhi.w	800485c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800471e:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004759 	.word	0x08004759
 8004728:	0800485d 	.word	0x0800485d
 800472c:	0800485d 	.word	0x0800485d
 8004730:	0800485d 	.word	0x0800485d
 8004734:	08004799 	.word	0x08004799
 8004738:	0800485d 	.word	0x0800485d
 800473c:	0800485d 	.word	0x0800485d
 8004740:	0800485d 	.word	0x0800485d
 8004744:	080047db 	.word	0x080047db
 8004748:	0800485d 	.word	0x0800485d
 800474c:	0800485d 	.word	0x0800485d
 8004750:	0800485d 	.word	0x0800485d
 8004754:	0800481b 	.word	0x0800481b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f9d6 	bl	8004b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0208 	orr.w	r2, r2, #8
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0204 	bic.w	r2, r2, #4
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	619a      	str	r2, [r3, #24]
      break;
 8004796:	e064      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fa1c 	bl	8004bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6999      	ldr	r1, [r3, #24]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	619a      	str	r2, [r3, #24]
      break;
 80047d8:	e043      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa65 	bl	8004cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0208 	orr.w	r2, r2, #8
 80047f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0204 	bic.w	r2, r2, #4
 8004804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	61da      	str	r2, [r3, #28]
      break;
 8004818:	e023      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 faaf 	bl	8004d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69d9      	ldr	r1, [r3, #28]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	021a      	lsls	r2, r3, #8
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	61da      	str	r2, [r3, #28]
      break;
 800485a:	e002      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
      break;
 8004860:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800486a:	7dfb      	ldrb	r3, [r7, #23]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIM_ConfigClockSource+0x1c>
 800488c:	2302      	movs	r3, #2
 800488e:	e0b4      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x186>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c8:	d03e      	beq.n	8004948 <HAL_TIM_ConfigClockSource+0xd4>
 80048ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ce:	f200 8087 	bhi.w	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d6:	f000 8086 	beq.w	80049e6 <HAL_TIM_ConfigClockSource+0x172>
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048de:	d87f      	bhi.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b70      	cmp	r3, #112	@ 0x70
 80048e2:	d01a      	beq.n	800491a <HAL_TIM_ConfigClockSource+0xa6>
 80048e4:	2b70      	cmp	r3, #112	@ 0x70
 80048e6:	d87b      	bhi.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b60      	cmp	r3, #96	@ 0x60
 80048ea:	d050      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x11a>
 80048ec:	2b60      	cmp	r3, #96	@ 0x60
 80048ee:	d877      	bhi.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b50      	cmp	r3, #80	@ 0x50
 80048f2:	d03c      	beq.n	800496e <HAL_TIM_ConfigClockSource+0xfa>
 80048f4:	2b50      	cmp	r3, #80	@ 0x50
 80048f6:	d873      	bhi.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d058      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x13a>
 80048fc:	2b40      	cmp	r3, #64	@ 0x40
 80048fe:	d86f      	bhi.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b30      	cmp	r3, #48	@ 0x30
 8004902:	d064      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x15a>
 8004904:	2b30      	cmp	r3, #48	@ 0x30
 8004906:	d86b      	bhi.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d060      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	2b20      	cmp	r3, #32
 800490e:	d867      	bhi.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d05c      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	2b10      	cmp	r3, #16
 8004916:	d05a      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x15a>
 8004918:	e062      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800492a:	f000 faf0 	bl	8004f0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800493c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	609a      	str	r2, [r3, #8]
      break;
 8004946:	e04f      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004958:	f000 fad9 	bl	8004f0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800496a:	609a      	str	r2, [r3, #8]
      break;
 800496c:	e03c      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800497a:	461a      	mov	r2, r3
 800497c:	f000 fa50 	bl	8004e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2150      	movs	r1, #80	@ 0x50
 8004986:	4618      	mov	r0, r3
 8004988:	f000 faa7 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 800498c:	e02c      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800499a:	461a      	mov	r2, r3
 800499c:	f000 fa6e 	bl	8004e7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2160      	movs	r1, #96	@ 0x60
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fa97 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 80049ac:	e01c      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ba:	461a      	mov	r2, r3
 80049bc:	f000 fa30 	bl	8004e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2140      	movs	r1, #64	@ 0x40
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fa87 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 80049cc:	e00c      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f000 fa7e 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 80049de:	e003      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      break;
 80049e4:	e000      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
	...

08004a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a29      	ldr	r2, [pc, #164]	@ (8004b04 <TIM_Base_SetConfig+0xb8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00b      	beq.n	8004a7c <TIM_Base_SetConfig+0x30>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6a:	d007      	beq.n	8004a7c <TIM_Base_SetConfig+0x30>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a26      	ldr	r2, [pc, #152]	@ (8004b08 <TIM_Base_SetConfig+0xbc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_Base_SetConfig+0x30>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a25      	ldr	r2, [pc, #148]	@ (8004b0c <TIM_Base_SetConfig+0xc0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d108      	bne.n	8004a8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <TIM_Base_SetConfig+0xb8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9c:	d007      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	@ (8004b08 <TIM_Base_SetConfig+0xbc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <TIM_Base_SetConfig+0xc0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a07      	ldr	r2, [pc, #28]	@ (8004b04 <TIM_Base_SetConfig+0xb8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	615a      	str	r2, [r3, #20]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800

08004b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f023 0201 	bic.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 0302 	bic.w	r3, r3, #2
 8004b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd8 <TIM_OC1_SetConfig+0xc8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d10c      	bne.n	8004b86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0308 	bic.w	r3, r3, #8
 8004b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a13      	ldr	r2, [pc, #76]	@ (8004bd8 <TIM_OC1_SetConfig+0xc8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d111      	bne.n	8004bb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	621a      	str	r2, [r3, #32]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40012c00 	.word	0x40012c00

08004bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f023 0210 	bic.w	r2, r3, #16
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0320 	bic.w	r3, r3, #32
 8004c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <TIM_OC2_SetConfig+0xd0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10d      	bne.n	8004c58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <TIM_OC2_SetConfig+0xd0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d113      	bne.n	8004c88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	40012c00 	.word	0x40012c00

08004cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1d      	ldr	r2, [pc, #116]	@ (8004d80 <TIM_OC3_SetConfig+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10d      	bne.n	8004d2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a14      	ldr	r2, [pc, #80]	@ (8004d80 <TIM_OC3_SetConfig+0xd0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d113      	bne.n	8004d5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40012c00 	.word	0x40012c00

08004d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	031b      	lsls	r3, r3, #12
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0f      	ldr	r2, [pc, #60]	@ (8004e1c <TIM_OC4_SetConfig+0x98>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d109      	bne.n	8004df8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00

08004e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0201 	bic.w	r2, r3, #1
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 030a 	bic.w	r3, r3, #10
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0210 	bic.w	r2, r3, #16
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	031b      	lsls	r3, r3, #12
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr

08004eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f043 0307 	orr.w	r3, r3, #7
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	609a      	str	r2, [r3, #8]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b087      	sub	sp, #28
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	021a      	lsls	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	609a      	str	r2, [r3, #8]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr

08004f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2201      	movs	r2, #1
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	401a      	ands	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1a      	ldr	r2, [r3, #32]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	fa01 f303 	lsl.w	r3, r1, r3
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e046      	b.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff8:	d009      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a10      	ldr	r2, [pc, #64]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10c      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4313      	orrs	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800

08005050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e042      	b.n	800510c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fe38 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	@ 0x24
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f91d 	bl	80052f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	@ 0x28
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b20      	cmp	r3, #32
 8005132:	d16d      	bne.n	8005210 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_UART_Transmit+0x2c>
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e066      	b.n	8005212 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2221      	movs	r2, #33	@ 0x21
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005152:	f7fc fffb 	bl	800214c <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516c:	d108      	bne.n	8005180 <HAL_UART_Transmit+0x6c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e003      	b.n	8005188 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005184:	2300      	movs	r3, #0
 8005186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005188:	e02a      	b.n	80051e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2200      	movs	r2, #0
 8005192:	2180      	movs	r1, #128	@ 0x80
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f840 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e036      	b.n	8005212 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	3302      	adds	r3, #2
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e007      	b.n	80051d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1cf      	bne.n	800518a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2140      	movs	r1, #64	@ 0x40
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f810 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e006      	b.n	8005212 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	e000      	b.n	8005212 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b090      	sub	sp, #64	@ 0x40
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	e050      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d04c      	beq.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0x30>
 800523a:	f7fc ff87 	bl	800214c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005246:	429a      	cmp	r2, r3
 8005248:	d241      	bcs.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800526a:	637a      	str	r2, [r7, #52]	@ 0x34
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	613b      	str	r3, [r7, #16]
   return(result);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800529e:	623a      	str	r2, [r7, #32]
 80052a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	69f9      	ldr	r1, [r7, #28]
 80052a4:	6a3a      	ldr	r2, [r7, #32]
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e00f      	b.n	80052ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	429a      	cmp	r2, r3
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d09f      	beq.n	800522c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3740      	adds	r7, #64	@ 0x40
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005332:	f023 030c 	bic.w	r3, r3, #12
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	430b      	orrs	r3, r1
 800533e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2c      	ldr	r2, [pc, #176]	@ (800540c <UART_SetConfig+0x114>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d103      	bne.n	8005368 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fe fc24 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	e002      	b.n	800536e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005368:	f7fe fc0c 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 800536c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009a      	lsls	r2, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	4a22      	ldr	r2, [pc, #136]	@ (8005410 <UART_SetConfig+0x118>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	0119      	lsls	r1, r3, #4
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009a      	lsls	r2, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <UART_SetConfig+0x118>)
 80053a6:	fba3 0302 	umull	r0, r3, r3, r2
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	2064      	movs	r0, #100	@ 0x64
 80053ae:	fb00 f303 	mul.w	r3, r0, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	3332      	adds	r3, #50	@ 0x32
 80053b8:	4a15      	ldr	r2, [pc, #84]	@ (8005410 <UART_SetConfig+0x118>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053c4:	4419      	add	r1, r3
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009a      	lsls	r2, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <UART_SetConfig+0x118>)
 80053de:	fba3 0302 	umull	r0, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2064      	movs	r0, #100	@ 0x64
 80053e6:	fb00 f303 	mul.w	r3, r0, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	@ 0x32
 80053f0:	4a07      	ldr	r2, [pc, #28]	@ (8005410 <UART_SetConfig+0x118>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f003 020f 	and.w	r2, r3, #15
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	440a      	add	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40013800 	.word	0x40013800
 8005410:	51eb851f 	.word	0x51eb851f

08005414 <__cvt>:
 8005414:	2b00      	cmp	r3, #0
 8005416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541a:	461d      	mov	r5, r3
 800541c:	bfbb      	ittet	lt
 800541e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005422:	461d      	movlt	r5, r3
 8005424:	2300      	movge	r3, #0
 8005426:	232d      	movlt	r3, #45	@ 0x2d
 8005428:	b088      	sub	sp, #32
 800542a:	4614      	mov	r4, r2
 800542c:	bfb8      	it	lt
 800542e:	4614      	movlt	r4, r2
 8005430:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005432:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005434:	7013      	strb	r3, [r2, #0]
 8005436:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005438:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800543c:	f023 0820 	bic.w	r8, r3, #32
 8005440:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005444:	d005      	beq.n	8005452 <__cvt+0x3e>
 8005446:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800544a:	d100      	bne.n	800544e <__cvt+0x3a>
 800544c:	3601      	adds	r6, #1
 800544e:	2302      	movs	r3, #2
 8005450:	e000      	b.n	8005454 <__cvt+0x40>
 8005452:	2303      	movs	r3, #3
 8005454:	aa07      	add	r2, sp, #28
 8005456:	9204      	str	r2, [sp, #16]
 8005458:	aa06      	add	r2, sp, #24
 800545a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800545e:	e9cd 3600 	strd	r3, r6, [sp]
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	f000 fe6f 	bl	8006148 <_dtoa_r>
 800546a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800546e:	4607      	mov	r7, r0
 8005470:	d119      	bne.n	80054a6 <__cvt+0x92>
 8005472:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005474:	07db      	lsls	r3, r3, #31
 8005476:	d50e      	bpl.n	8005496 <__cvt+0x82>
 8005478:	eb00 0906 	add.w	r9, r0, r6
 800547c:	2200      	movs	r2, #0
 800547e:	2300      	movs	r3, #0
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fb fa90 	bl	80009a8 <__aeabi_dcmpeq>
 8005488:	b108      	cbz	r0, 800548e <__cvt+0x7a>
 800548a:	f8cd 901c 	str.w	r9, [sp, #28]
 800548e:	2230      	movs	r2, #48	@ 0x30
 8005490:	9b07      	ldr	r3, [sp, #28]
 8005492:	454b      	cmp	r3, r9
 8005494:	d31e      	bcc.n	80054d4 <__cvt+0xc0>
 8005496:	4638      	mov	r0, r7
 8005498:	9b07      	ldr	r3, [sp, #28]
 800549a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800549c:	1bdb      	subs	r3, r3, r7
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	b008      	add	sp, #32
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054aa:	eb00 0906 	add.w	r9, r0, r6
 80054ae:	d1e5      	bne.n	800547c <__cvt+0x68>
 80054b0:	7803      	ldrb	r3, [r0, #0]
 80054b2:	2b30      	cmp	r3, #48	@ 0x30
 80054b4:	d10a      	bne.n	80054cc <__cvt+0xb8>
 80054b6:	2200      	movs	r2, #0
 80054b8:	2300      	movs	r3, #0
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fb fa73 	bl	80009a8 <__aeabi_dcmpeq>
 80054c2:	b918      	cbnz	r0, 80054cc <__cvt+0xb8>
 80054c4:	f1c6 0601 	rsb	r6, r6, #1
 80054c8:	f8ca 6000 	str.w	r6, [sl]
 80054cc:	f8da 3000 	ldr.w	r3, [sl]
 80054d0:	4499      	add	r9, r3
 80054d2:	e7d3      	b.n	800547c <__cvt+0x68>
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	9107      	str	r1, [sp, #28]
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e7d9      	b.n	8005490 <__cvt+0x7c>

080054dc <__exponent>:
 80054dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054de:	2900      	cmp	r1, #0
 80054e0:	bfb6      	itet	lt
 80054e2:	232d      	movlt	r3, #45	@ 0x2d
 80054e4:	232b      	movge	r3, #43	@ 0x2b
 80054e6:	4249      	neglt	r1, r1
 80054e8:	2909      	cmp	r1, #9
 80054ea:	7002      	strb	r2, [r0, #0]
 80054ec:	7043      	strb	r3, [r0, #1]
 80054ee:	dd29      	ble.n	8005544 <__exponent+0x68>
 80054f0:	f10d 0307 	add.w	r3, sp, #7
 80054f4:	461d      	mov	r5, r3
 80054f6:	270a      	movs	r7, #10
 80054f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80054fc:	461a      	mov	r2, r3
 80054fe:	fb07 1416 	mls	r4, r7, r6, r1
 8005502:	3430      	adds	r4, #48	@ 0x30
 8005504:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005508:	460c      	mov	r4, r1
 800550a:	2c63      	cmp	r4, #99	@ 0x63
 800550c:	4631      	mov	r1, r6
 800550e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005512:	dcf1      	bgt.n	80054f8 <__exponent+0x1c>
 8005514:	3130      	adds	r1, #48	@ 0x30
 8005516:	1e94      	subs	r4, r2, #2
 8005518:	f803 1c01 	strb.w	r1, [r3, #-1]
 800551c:	4623      	mov	r3, r4
 800551e:	1c41      	adds	r1, r0, #1
 8005520:	42ab      	cmp	r3, r5
 8005522:	d30a      	bcc.n	800553a <__exponent+0x5e>
 8005524:	f10d 0309 	add.w	r3, sp, #9
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	42ac      	cmp	r4, r5
 800552c:	bf88      	it	hi
 800552e:	2300      	movhi	r3, #0
 8005530:	3302      	adds	r3, #2
 8005532:	4403      	add	r3, r0
 8005534:	1a18      	subs	r0, r3, r0
 8005536:	b003      	add	sp, #12
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800553a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800553e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005542:	e7ed      	b.n	8005520 <__exponent+0x44>
 8005544:	2330      	movs	r3, #48	@ 0x30
 8005546:	3130      	adds	r1, #48	@ 0x30
 8005548:	7083      	strb	r3, [r0, #2]
 800554a:	70c1      	strb	r1, [r0, #3]
 800554c:	1d03      	adds	r3, r0, #4
 800554e:	e7f1      	b.n	8005534 <__exponent+0x58>

08005550 <_printf_float>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	b091      	sub	sp, #68	@ 0x44
 8005556:	460c      	mov	r4, r1
 8005558:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800555c:	4616      	mov	r6, r2
 800555e:	461f      	mov	r7, r3
 8005560:	4605      	mov	r5, r0
 8005562:	f000 fce1 	bl	8005f28 <_localeconv_r>
 8005566:	6803      	ldr	r3, [r0, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	9308      	str	r3, [sp, #32]
 800556c:	f7fa fdf0 	bl	8000150 <strlen>
 8005570:	2300      	movs	r3, #0
 8005572:	930e      	str	r3, [sp, #56]	@ 0x38
 8005574:	f8d8 3000 	ldr.w	r3, [r8]
 8005578:	9009      	str	r0, [sp, #36]	@ 0x24
 800557a:	3307      	adds	r3, #7
 800557c:	f023 0307 	bic.w	r3, r3, #7
 8005580:	f103 0208 	add.w	r2, r3, #8
 8005584:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005588:	f8d4 b000 	ldr.w	fp, [r4]
 800558c:	f8c8 2000 	str.w	r2, [r8]
 8005590:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005594:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800559a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80055aa:	4b9c      	ldr	r3, [pc, #624]	@ (800581c <_printf_float+0x2cc>)
 80055ac:	f7fb fa2e 	bl	8000a0c <__aeabi_dcmpun>
 80055b0:	bb70      	cbnz	r0, 8005610 <_printf_float+0xc0>
 80055b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	4b98      	ldr	r3, [pc, #608]	@ (800581c <_printf_float+0x2cc>)
 80055bc:	f7fb fa08 	bl	80009d0 <__aeabi_dcmple>
 80055c0:	bb30      	cbnz	r0, 8005610 <_printf_float+0xc0>
 80055c2:	2200      	movs	r2, #0
 80055c4:	2300      	movs	r3, #0
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fb f9f7 	bl	80009bc <__aeabi_dcmplt>
 80055ce:	b110      	cbz	r0, 80055d6 <_printf_float+0x86>
 80055d0:	232d      	movs	r3, #45	@ 0x2d
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	4a92      	ldr	r2, [pc, #584]	@ (8005820 <_printf_float+0x2d0>)
 80055d8:	4b92      	ldr	r3, [pc, #584]	@ (8005824 <_printf_float+0x2d4>)
 80055da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80055de:	bf94      	ite	ls
 80055e0:	4690      	movls	r8, r2
 80055e2:	4698      	movhi	r8, r3
 80055e4:	2303      	movs	r3, #3
 80055e6:	f04f 0900 	mov.w	r9, #0
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	f02b 0304 	bic.w	r3, fp, #4
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	4633      	mov	r3, r6
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	9700      	str	r7, [sp, #0]
 80055fa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80055fc:	f000 f9d4 	bl	80059a8 <_printf_common>
 8005600:	3001      	adds	r0, #1
 8005602:	f040 8090 	bne.w	8005726 <_printf_float+0x1d6>
 8005606:	f04f 30ff 	mov.w	r0, #4294967295
 800560a:	b011      	add	sp, #68	@ 0x44
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	4640      	mov	r0, r8
 8005616:	4649      	mov	r1, r9
 8005618:	f7fb f9f8 	bl	8000a0c <__aeabi_dcmpun>
 800561c:	b148      	cbz	r0, 8005632 <_printf_float+0xe2>
 800561e:	464b      	mov	r3, r9
 8005620:	2b00      	cmp	r3, #0
 8005622:	bfb8      	it	lt
 8005624:	232d      	movlt	r3, #45	@ 0x2d
 8005626:	4a80      	ldr	r2, [pc, #512]	@ (8005828 <_printf_float+0x2d8>)
 8005628:	bfb8      	it	lt
 800562a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800562e:	4b7f      	ldr	r3, [pc, #508]	@ (800582c <_printf_float+0x2dc>)
 8005630:	e7d3      	b.n	80055da <_printf_float+0x8a>
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	d13f      	bne.n	80056bc <_printf_float+0x16c>
 800563c:	2306      	movs	r3, #6
 800563e:	6063      	str	r3, [r4, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	9206      	str	r2, [sp, #24]
 800564a:	aa0e      	add	r2, sp, #56	@ 0x38
 800564c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005650:	aa0d      	add	r2, sp, #52	@ 0x34
 8005652:	9203      	str	r2, [sp, #12]
 8005654:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005658:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	4642      	mov	r2, r8
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4628      	mov	r0, r5
 8005664:	464b      	mov	r3, r9
 8005666:	910a      	str	r1, [sp, #40]	@ 0x28
 8005668:	f7ff fed4 	bl	8005414 <__cvt>
 800566c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800566e:	4680      	mov	r8, r0
 8005670:	2947      	cmp	r1, #71	@ 0x47
 8005672:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005674:	d128      	bne.n	80056c8 <_printf_float+0x178>
 8005676:	1cc8      	adds	r0, r1, #3
 8005678:	db02      	blt.n	8005680 <_printf_float+0x130>
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	4299      	cmp	r1, r3
 800567e:	dd40      	ble.n	8005702 <_printf_float+0x1b2>
 8005680:	f1aa 0a02 	sub.w	sl, sl, #2
 8005684:	fa5f fa8a 	uxtb.w	sl, sl
 8005688:	4652      	mov	r2, sl
 800568a:	3901      	subs	r1, #1
 800568c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005690:	910d      	str	r1, [sp, #52]	@ 0x34
 8005692:	f7ff ff23 	bl	80054dc <__exponent>
 8005696:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005698:	4681      	mov	r9, r0
 800569a:	1813      	adds	r3, r2, r0
 800569c:	2a01      	cmp	r2, #1
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	dc02      	bgt.n	80056a8 <_printf_float+0x158>
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	07d2      	lsls	r2, r2, #31
 80056a6:	d501      	bpl.n	80056ac <_printf_float+0x15c>
 80056a8:	3301      	adds	r3, #1
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d09e      	beq.n	80055f2 <_printf_float+0xa2>
 80056b4:	232d      	movs	r3, #45	@ 0x2d
 80056b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ba:	e79a      	b.n	80055f2 <_printf_float+0xa2>
 80056bc:	2947      	cmp	r1, #71	@ 0x47
 80056be:	d1bf      	bne.n	8005640 <_printf_float+0xf0>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1bd      	bne.n	8005640 <_printf_float+0xf0>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e7ba      	b.n	800563e <_printf_float+0xee>
 80056c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056cc:	d9dc      	bls.n	8005688 <_printf_float+0x138>
 80056ce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80056d2:	d118      	bne.n	8005706 <_printf_float+0x1b6>
 80056d4:	2900      	cmp	r1, #0
 80056d6:	6863      	ldr	r3, [r4, #4]
 80056d8:	dd0b      	ble.n	80056f2 <_printf_float+0x1a2>
 80056da:	6121      	str	r1, [r4, #16]
 80056dc:	b913      	cbnz	r3, 80056e4 <_printf_float+0x194>
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	07d0      	lsls	r0, r2, #31
 80056e2:	d502      	bpl.n	80056ea <_printf_float+0x19a>
 80056e4:	3301      	adds	r3, #1
 80056e6:	440b      	add	r3, r1
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	f04f 0900 	mov.w	r9, #0
 80056ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80056f0:	e7dc      	b.n	80056ac <_printf_float+0x15c>
 80056f2:	b913      	cbnz	r3, 80056fa <_printf_float+0x1aa>
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	07d2      	lsls	r2, r2, #31
 80056f8:	d501      	bpl.n	80056fe <_printf_float+0x1ae>
 80056fa:	3302      	adds	r3, #2
 80056fc:	e7f4      	b.n	80056e8 <_printf_float+0x198>
 80056fe:	2301      	movs	r3, #1
 8005700:	e7f2      	b.n	80056e8 <_printf_float+0x198>
 8005702:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005708:	4299      	cmp	r1, r3
 800570a:	db05      	blt.n	8005718 <_printf_float+0x1c8>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	6121      	str	r1, [r4, #16]
 8005710:	07d8      	lsls	r0, r3, #31
 8005712:	d5ea      	bpl.n	80056ea <_printf_float+0x19a>
 8005714:	1c4b      	adds	r3, r1, #1
 8005716:	e7e7      	b.n	80056e8 <_printf_float+0x198>
 8005718:	2900      	cmp	r1, #0
 800571a:	bfcc      	ite	gt
 800571c:	2201      	movgt	r2, #1
 800571e:	f1c1 0202 	rsble	r2, r1, #2
 8005722:	4413      	add	r3, r2
 8005724:	e7e0      	b.n	80056e8 <_printf_float+0x198>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	055a      	lsls	r2, r3, #21
 800572a:	d407      	bmi.n	800573c <_printf_float+0x1ec>
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	4642      	mov	r2, r8
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	d12b      	bne.n	8005792 <_printf_float+0x242>
 800573a:	e764      	b.n	8005606 <_printf_float+0xb6>
 800573c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005740:	f240 80dc 	bls.w	80058fc <_printf_float+0x3ac>
 8005744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005748:	2200      	movs	r2, #0
 800574a:	2300      	movs	r3, #0
 800574c:	f7fb f92c 	bl	80009a8 <__aeabi_dcmpeq>
 8005750:	2800      	cmp	r0, #0
 8005752:	d033      	beq.n	80057bc <_printf_float+0x26c>
 8005754:	2301      	movs	r3, #1
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	4a35      	ldr	r2, [pc, #212]	@ (8005830 <_printf_float+0x2e0>)
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	f43f af51 	beq.w	8005606 <_printf_float+0xb6>
 8005764:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005768:	4543      	cmp	r3, r8
 800576a:	db02      	blt.n	8005772 <_printf_float+0x222>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	07d8      	lsls	r0, r3, #31
 8005770:	d50f      	bpl.n	8005792 <_printf_float+0x242>
 8005772:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	f43f af42 	beq.w	8005606 <_printf_float+0xb6>
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	f108 38ff 	add.w	r8, r8, #4294967295
 800578a:	f104 0a1a 	add.w	sl, r4, #26
 800578e:	45c8      	cmp	r8, r9
 8005790:	dc09      	bgt.n	80057a6 <_printf_float+0x256>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	079b      	lsls	r3, r3, #30
 8005796:	f100 8102 	bmi.w	800599e <_printf_float+0x44e>
 800579a:	68e0      	ldr	r0, [r4, #12]
 800579c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800579e:	4298      	cmp	r0, r3
 80057a0:	bfb8      	it	lt
 80057a2:	4618      	movlt	r0, r3
 80057a4:	e731      	b.n	800560a <_printf_float+0xba>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f af28 	beq.w	8005606 <_printf_float+0xb6>
 80057b6:	f109 0901 	add.w	r9, r9, #1
 80057ba:	e7e8      	b.n	800578e <_printf_float+0x23e>
 80057bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dc38      	bgt.n	8005834 <_printf_float+0x2e4>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <_printf_float+0x2e0>)
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	f43f af1a 	beq.w	8005606 <_printf_float+0xb6>
 80057d2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80057d6:	ea59 0303 	orrs.w	r3, r9, r3
 80057da:	d102      	bne.n	80057e2 <_printf_float+0x292>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07d9      	lsls	r1, r3, #31
 80057e0:	d5d7      	bpl.n	8005792 <_printf_float+0x242>
 80057e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f af0a 	beq.w	8005606 <_printf_float+0xb6>
 80057f2:	f04f 0a00 	mov.w	sl, #0
 80057f6:	f104 0b1a 	add.w	fp, r4, #26
 80057fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057fc:	425b      	negs	r3, r3
 80057fe:	4553      	cmp	r3, sl
 8005800:	dc01      	bgt.n	8005806 <_printf_float+0x2b6>
 8005802:	464b      	mov	r3, r9
 8005804:	e793      	b.n	800572e <_printf_float+0x1de>
 8005806:	2301      	movs	r3, #1
 8005808:	465a      	mov	r2, fp
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f aef8 	beq.w	8005606 <_printf_float+0xb6>
 8005816:	f10a 0a01 	add.w	sl, sl, #1
 800581a:	e7ee      	b.n	80057fa <_printf_float+0x2aa>
 800581c:	7fefffff 	.word	0x7fefffff
 8005820:	08008146 	.word	0x08008146
 8005824:	0800814a 	.word	0x0800814a
 8005828:	0800814e 	.word	0x0800814e
 800582c:	08008152 	.word	0x08008152
 8005830:	08008156 	.word	0x08008156
 8005834:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005836:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800583a:	4553      	cmp	r3, sl
 800583c:	bfa8      	it	ge
 800583e:	4653      	movge	r3, sl
 8005840:	2b00      	cmp	r3, #0
 8005842:	4699      	mov	r9, r3
 8005844:	dc36      	bgt.n	80058b4 <_printf_float+0x364>
 8005846:	f04f 0b00 	mov.w	fp, #0
 800584a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800584e:	f104 021a 	add.w	r2, r4, #26
 8005852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005854:	930a      	str	r3, [sp, #40]	@ 0x28
 8005856:	eba3 0309 	sub.w	r3, r3, r9
 800585a:	455b      	cmp	r3, fp
 800585c:	dc31      	bgt.n	80058c2 <_printf_float+0x372>
 800585e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005860:	459a      	cmp	sl, r3
 8005862:	dc3a      	bgt.n	80058da <_printf_float+0x38a>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07da      	lsls	r2, r3, #31
 8005868:	d437      	bmi.n	80058da <_printf_float+0x38a>
 800586a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800586c:	ebaa 0903 	sub.w	r9, sl, r3
 8005870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005872:	ebaa 0303 	sub.w	r3, sl, r3
 8005876:	4599      	cmp	r9, r3
 8005878:	bfa8      	it	ge
 800587a:	4699      	movge	r9, r3
 800587c:	f1b9 0f00 	cmp.w	r9, #0
 8005880:	dc33      	bgt.n	80058ea <_printf_float+0x39a>
 8005882:	f04f 0800 	mov.w	r8, #0
 8005886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800588a:	f104 0b1a 	add.w	fp, r4, #26
 800588e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005890:	ebaa 0303 	sub.w	r3, sl, r3
 8005894:	eba3 0309 	sub.w	r3, r3, r9
 8005898:	4543      	cmp	r3, r8
 800589a:	f77f af7a 	ble.w	8005792 <_printf_float+0x242>
 800589e:	2301      	movs	r3, #1
 80058a0:	465a      	mov	r2, fp
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	f43f aeac 	beq.w	8005606 <_printf_float+0xb6>
 80058ae:	f108 0801 	add.w	r8, r8, #1
 80058b2:	e7ec      	b.n	800588e <_printf_float+0x33e>
 80058b4:	4642      	mov	r2, r8
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	d1c2      	bne.n	8005846 <_printf_float+0x2f6>
 80058c0:	e6a1      	b.n	8005606 <_printf_float+0xb6>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae9a 	beq.w	8005606 <_printf_float+0xb6>
 80058d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058d4:	f10b 0b01 	add.w	fp, fp, #1
 80058d8:	e7bb      	b.n	8005852 <_printf_float+0x302>
 80058da:	4631      	mov	r1, r6
 80058dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	d1c0      	bne.n	800586a <_printf_float+0x31a>
 80058e8:	e68d      	b.n	8005606 <_printf_float+0xb6>
 80058ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058ec:	464b      	mov	r3, r9
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	4442      	add	r2, r8
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	d1c3      	bne.n	8005882 <_printf_float+0x332>
 80058fa:	e684      	b.n	8005606 <_printf_float+0xb6>
 80058fc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005900:	f1ba 0f01 	cmp.w	sl, #1
 8005904:	dc01      	bgt.n	800590a <_printf_float+0x3ba>
 8005906:	07db      	lsls	r3, r3, #31
 8005908:	d536      	bpl.n	8005978 <_printf_float+0x428>
 800590a:	2301      	movs	r3, #1
 800590c:	4642      	mov	r2, r8
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	f43f ae76 	beq.w	8005606 <_printf_float+0xb6>
 800591a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f ae6e 	beq.w	8005606 <_printf_float+0xb6>
 800592a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800592e:	2200      	movs	r2, #0
 8005930:	2300      	movs	r3, #0
 8005932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005936:	f7fb f837 	bl	80009a8 <__aeabi_dcmpeq>
 800593a:	b9c0      	cbnz	r0, 800596e <_printf_float+0x41e>
 800593c:	4653      	mov	r3, sl
 800593e:	f108 0201 	add.w	r2, r8, #1
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	d10c      	bne.n	8005966 <_printf_float+0x416>
 800594c:	e65b      	b.n	8005606 <_printf_float+0xb6>
 800594e:	2301      	movs	r3, #1
 8005950:	465a      	mov	r2, fp
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	f43f ae54 	beq.w	8005606 <_printf_float+0xb6>
 800595e:	f108 0801 	add.w	r8, r8, #1
 8005962:	45d0      	cmp	r8, sl
 8005964:	dbf3      	blt.n	800594e <_printf_float+0x3fe>
 8005966:	464b      	mov	r3, r9
 8005968:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800596c:	e6e0      	b.n	8005730 <_printf_float+0x1e0>
 800596e:	f04f 0800 	mov.w	r8, #0
 8005972:	f104 0b1a 	add.w	fp, r4, #26
 8005976:	e7f4      	b.n	8005962 <_printf_float+0x412>
 8005978:	2301      	movs	r3, #1
 800597a:	4642      	mov	r2, r8
 800597c:	e7e1      	b.n	8005942 <_printf_float+0x3f2>
 800597e:	2301      	movs	r3, #1
 8005980:	464a      	mov	r2, r9
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f ae3c 	beq.w	8005606 <_printf_float+0xb6>
 800598e:	f108 0801 	add.w	r8, r8, #1
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005996:	1a5b      	subs	r3, r3, r1
 8005998:	4543      	cmp	r3, r8
 800599a:	dcf0      	bgt.n	800597e <_printf_float+0x42e>
 800599c:	e6fd      	b.n	800579a <_printf_float+0x24a>
 800599e:	f04f 0800 	mov.w	r8, #0
 80059a2:	f104 0919 	add.w	r9, r4, #25
 80059a6:	e7f4      	b.n	8005992 <_printf_float+0x442>

080059a8 <_printf_common>:
 80059a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ac:	4616      	mov	r6, r2
 80059ae:	4698      	mov	r8, r3
 80059b0:	688a      	ldr	r2, [r1, #8]
 80059b2:	690b      	ldr	r3, [r1, #16]
 80059b4:	4607      	mov	r7, r0
 80059b6:	4293      	cmp	r3, r2
 80059b8:	bfb8      	it	lt
 80059ba:	4613      	movlt	r3, r2
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059c2:	460c      	mov	r4, r1
 80059c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059c8:	b10a      	cbz	r2, 80059ce <_printf_common+0x26>
 80059ca:	3301      	adds	r3, #1
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	0699      	lsls	r1, r3, #26
 80059d2:	bf42      	ittt	mi
 80059d4:	6833      	ldrmi	r3, [r6, #0]
 80059d6:	3302      	addmi	r3, #2
 80059d8:	6033      	strmi	r3, [r6, #0]
 80059da:	6825      	ldr	r5, [r4, #0]
 80059dc:	f015 0506 	ands.w	r5, r5, #6
 80059e0:	d106      	bne.n	80059f0 <_printf_common+0x48>
 80059e2:	f104 0a19 	add.w	sl, r4, #25
 80059e6:	68e3      	ldr	r3, [r4, #12]
 80059e8:	6832      	ldr	r2, [r6, #0]
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	42ab      	cmp	r3, r5
 80059ee:	dc2b      	bgt.n	8005a48 <_printf_common+0xa0>
 80059f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	3b00      	subs	r3, #0
 80059f8:	bf18      	it	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	0692      	lsls	r2, r2, #26
 80059fe:	d430      	bmi.n	8005a62 <_printf_common+0xba>
 8005a00:	4641      	mov	r1, r8
 8005a02:	4638      	mov	r0, r7
 8005a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a08:	47c8      	blx	r9
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d023      	beq.n	8005a56 <_printf_common+0xae>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6922      	ldr	r2, [r4, #16]
 8005a12:	f003 0306 	and.w	r3, r3, #6
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	bf14      	ite	ne
 8005a1a:	2500      	movne	r5, #0
 8005a1c:	6833      	ldreq	r3, [r6, #0]
 8005a1e:	f04f 0600 	mov.w	r6, #0
 8005a22:	bf08      	it	eq
 8005a24:	68e5      	ldreq	r5, [r4, #12]
 8005a26:	f104 041a 	add.w	r4, r4, #26
 8005a2a:	bf08      	it	eq
 8005a2c:	1aed      	subeq	r5, r5, r3
 8005a2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a32:	bf08      	it	eq
 8005a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	bfc4      	itt	gt
 8005a3c:	1a9b      	subgt	r3, r3, r2
 8005a3e:	18ed      	addgt	r5, r5, r3
 8005a40:	42b5      	cmp	r5, r6
 8005a42:	d11a      	bne.n	8005a7a <_printf_common+0xd2>
 8005a44:	2000      	movs	r0, #0
 8005a46:	e008      	b.n	8005a5a <_printf_common+0xb2>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c8      	blx	r9
 8005a52:	3001      	adds	r0, #1
 8005a54:	d103      	bne.n	8005a5e <_printf_common+0xb6>
 8005a56:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5e:	3501      	adds	r5, #1
 8005a60:	e7c1      	b.n	80059e6 <_printf_common+0x3e>
 8005a62:	2030      	movs	r0, #48	@ 0x30
 8005a64:	18e1      	adds	r1, r4, r3
 8005a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a70:	4422      	add	r2, r4
 8005a72:	3302      	adds	r3, #2
 8005a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a78:	e7c2      	b.n	8005a00 <_printf_common+0x58>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4641      	mov	r1, r8
 8005a80:	4638      	mov	r0, r7
 8005a82:	47c8      	blx	r9
 8005a84:	3001      	adds	r0, #1
 8005a86:	d0e6      	beq.n	8005a56 <_printf_common+0xae>
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7d9      	b.n	8005a40 <_printf_common+0x98>

08005a8c <_printf_i>:
 8005a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	7e0f      	ldrb	r7, [r1, #24]
 8005a92:	4691      	mov	r9, r2
 8005a94:	2f78      	cmp	r7, #120	@ 0x78
 8005a96:	4680      	mov	r8, r0
 8005a98:	460c      	mov	r4, r1
 8005a9a:	469a      	mov	sl, r3
 8005a9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aa2:	d807      	bhi.n	8005ab4 <_printf_i+0x28>
 8005aa4:	2f62      	cmp	r7, #98	@ 0x62
 8005aa6:	d80a      	bhi.n	8005abe <_printf_i+0x32>
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f000 80d3 	beq.w	8005c54 <_printf_i+0x1c8>
 8005aae:	2f58      	cmp	r7, #88	@ 0x58
 8005ab0:	f000 80ba 	beq.w	8005c28 <_printf_i+0x19c>
 8005ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005abc:	e03a      	b.n	8005b34 <_printf_i+0xa8>
 8005abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ac2:	2b15      	cmp	r3, #21
 8005ac4:	d8f6      	bhi.n	8005ab4 <_printf_i+0x28>
 8005ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8005acc <_printf_i+0x40>)
 8005ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b39 	.word	0x08005b39
 8005ad4:	08005ab5 	.word	0x08005ab5
 8005ad8:	08005ab5 	.word	0x08005ab5
 8005adc:	08005ab5 	.word	0x08005ab5
 8005ae0:	08005ab5 	.word	0x08005ab5
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005ab5 	.word	0x08005ab5
 8005aec:	08005ab5 	.word	0x08005ab5
 8005af0:	08005ab5 	.word	0x08005ab5
 8005af4:	08005ab5 	.word	0x08005ab5
 8005af8:	08005c3b 	.word	0x08005c3b
 8005afc:	08005b63 	.word	0x08005b63
 8005b00:	08005bf5 	.word	0x08005bf5
 8005b04:	08005ab5 	.word	0x08005ab5
 8005b08:	08005ab5 	.word	0x08005ab5
 8005b0c:	08005c5d 	.word	0x08005c5d
 8005b10:	08005ab5 	.word	0x08005ab5
 8005b14:	08005b63 	.word	0x08005b63
 8005b18:	08005ab5 	.word	0x08005ab5
 8005b1c:	08005ab5 	.word	0x08005ab5
 8005b20:	08005bfd 	.word	0x08005bfd
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6032      	str	r2, [r6, #0]
 8005b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b34:	2301      	movs	r3, #1
 8005b36:	e09e      	b.n	8005c76 <_printf_i+0x1ea>
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1d19      	adds	r1, r3, #4
 8005b3e:	6031      	str	r1, [r6, #0]
 8005b40:	0606      	lsls	r6, r0, #24
 8005b42:	d501      	bpl.n	8005b48 <_printf_i+0xbc>
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	e003      	b.n	8005b50 <_printf_i+0xc4>
 8005b48:	0645      	lsls	r5, r0, #25
 8005b4a:	d5fb      	bpl.n	8005b44 <_printf_i+0xb8>
 8005b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	da03      	bge.n	8005b5c <_printf_i+0xd0>
 8005b54:	232d      	movs	r3, #45	@ 0x2d
 8005b56:	426d      	negs	r5, r5
 8005b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b5c:	230a      	movs	r3, #10
 8005b5e:	4859      	ldr	r0, [pc, #356]	@ (8005cc4 <_printf_i+0x238>)
 8005b60:	e011      	b.n	8005b86 <_printf_i+0xfa>
 8005b62:	6821      	ldr	r1, [r4, #0]
 8005b64:	6833      	ldr	r3, [r6, #0]
 8005b66:	0608      	lsls	r0, r1, #24
 8005b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b6c:	d402      	bmi.n	8005b74 <_printf_i+0xe8>
 8005b6e:	0649      	lsls	r1, r1, #25
 8005b70:	bf48      	it	mi
 8005b72:	b2ad      	uxthmi	r5, r5
 8005b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	bf14      	ite	ne
 8005b7a:	230a      	movne	r3, #10
 8005b7c:	2308      	moveq	r3, #8
 8005b7e:	4851      	ldr	r0, [pc, #324]	@ (8005cc4 <_printf_i+0x238>)
 8005b80:	2100      	movs	r1, #0
 8005b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b86:	6866      	ldr	r6, [r4, #4]
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	bfa8      	it	ge
 8005b8c:	6821      	ldrge	r1, [r4, #0]
 8005b8e:	60a6      	str	r6, [r4, #8]
 8005b90:	bfa4      	itt	ge
 8005b92:	f021 0104 	bicge.w	r1, r1, #4
 8005b96:	6021      	strge	r1, [r4, #0]
 8005b98:	b90d      	cbnz	r5, 8005b9e <_printf_i+0x112>
 8005b9a:	2e00      	cmp	r6, #0
 8005b9c:	d04b      	beq.n	8005c36 <_printf_i+0x1aa>
 8005b9e:	4616      	mov	r6, r2
 8005ba0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba4:	fb03 5711 	mls	r7, r3, r1, r5
 8005ba8:	5dc7      	ldrb	r7, [r0, r7]
 8005baa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bae:	462f      	mov	r7, r5
 8005bb0:	42bb      	cmp	r3, r7
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	d9f4      	bls.n	8005ba0 <_printf_i+0x114>
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d10b      	bne.n	8005bd2 <_printf_i+0x146>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	07df      	lsls	r7, r3, #31
 8005bbe:	d508      	bpl.n	8005bd2 <_printf_i+0x146>
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	6861      	ldr	r1, [r4, #4]
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	bfde      	ittt	le
 8005bc8:	2330      	movle	r3, #48	@ 0x30
 8005bca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd2:	1b92      	subs	r2, r2, r6
 8005bd4:	6122      	str	r2, [r4, #16]
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f8cd a000 	str.w	sl, [sp]
 8005be0:	aa03      	add	r2, sp, #12
 8005be2:	f7ff fee1 	bl	80059a8 <_printf_common>
 8005be6:	3001      	adds	r0, #1
 8005be8:	d14a      	bne.n	8005c80 <_printf_i+0x1f4>
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	b004      	add	sp, #16
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	f043 0320 	orr.w	r3, r3, #32
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	2778      	movs	r7, #120	@ 0x78
 8005bfe:	4832      	ldr	r0, [pc, #200]	@ (8005cc8 <_printf_i+0x23c>)
 8005c00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	6831      	ldr	r1, [r6, #0]
 8005c08:	061f      	lsls	r7, r3, #24
 8005c0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c0e:	d402      	bmi.n	8005c16 <_printf_i+0x18a>
 8005c10:	065f      	lsls	r7, r3, #25
 8005c12:	bf48      	it	mi
 8005c14:	b2ad      	uxthmi	r5, r5
 8005c16:	6031      	str	r1, [r6, #0]
 8005c18:	07d9      	lsls	r1, r3, #31
 8005c1a:	bf44      	itt	mi
 8005c1c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c20:	6023      	strmi	r3, [r4, #0]
 8005c22:	b11d      	cbz	r5, 8005c2c <_printf_i+0x1a0>
 8005c24:	2310      	movs	r3, #16
 8005c26:	e7ab      	b.n	8005b80 <_printf_i+0xf4>
 8005c28:	4826      	ldr	r0, [pc, #152]	@ (8005cc4 <_printf_i+0x238>)
 8005c2a:	e7e9      	b.n	8005c00 <_printf_i+0x174>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	f023 0320 	bic.w	r3, r3, #32
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	e7f6      	b.n	8005c24 <_printf_i+0x198>
 8005c36:	4616      	mov	r6, r2
 8005c38:	e7bd      	b.n	8005bb6 <_printf_i+0x12a>
 8005c3a:	6833      	ldr	r3, [r6, #0]
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	1d18      	adds	r0, r3, #4
 8005c40:	6961      	ldr	r1, [r4, #20]
 8005c42:	6030      	str	r0, [r6, #0]
 8005c44:	062e      	lsls	r6, r5, #24
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	d501      	bpl.n	8005c4e <_printf_i+0x1c2>
 8005c4a:	6019      	str	r1, [r3, #0]
 8005c4c:	e002      	b.n	8005c54 <_printf_i+0x1c8>
 8005c4e:	0668      	lsls	r0, r5, #25
 8005c50:	d5fb      	bpl.n	8005c4a <_printf_i+0x1be>
 8005c52:	8019      	strh	r1, [r3, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	4616      	mov	r6, r2
 8005c58:	6123      	str	r3, [r4, #16]
 8005c5a:	e7bc      	b.n	8005bd6 <_printf_i+0x14a>
 8005c5c:	6833      	ldr	r3, [r6, #0]
 8005c5e:	2100      	movs	r1, #0
 8005c60:	1d1a      	adds	r2, r3, #4
 8005c62:	6032      	str	r2, [r6, #0]
 8005c64:	681e      	ldr	r6, [r3, #0]
 8005c66:	6862      	ldr	r2, [r4, #4]
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 f9d4 	bl	8006016 <memchr>
 8005c6e:	b108      	cbz	r0, 8005c74 <_printf_i+0x1e8>
 8005c70:	1b80      	subs	r0, r0, r6
 8005c72:	6060      	str	r0, [r4, #4]
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	6123      	str	r3, [r4, #16]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c7e:	e7aa      	b.n	8005bd6 <_printf_i+0x14a>
 8005c80:	4632      	mov	r2, r6
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	47d0      	blx	sl
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d0ad      	beq.n	8005bea <_printf_i+0x15e>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	079b      	lsls	r3, r3, #30
 8005c92:	d413      	bmi.n	8005cbc <_printf_i+0x230>
 8005c94:	68e0      	ldr	r0, [r4, #12]
 8005c96:	9b03      	ldr	r3, [sp, #12]
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	bfb8      	it	lt
 8005c9c:	4618      	movlt	r0, r3
 8005c9e:	e7a6      	b.n	8005bee <_printf_i+0x162>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	47d0      	blx	sl
 8005caa:	3001      	adds	r0, #1
 8005cac:	d09d      	beq.n	8005bea <_printf_i+0x15e>
 8005cae:	3501      	adds	r5, #1
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	9903      	ldr	r1, [sp, #12]
 8005cb4:	1a5b      	subs	r3, r3, r1
 8005cb6:	42ab      	cmp	r3, r5
 8005cb8:	dcf2      	bgt.n	8005ca0 <_printf_i+0x214>
 8005cba:	e7eb      	b.n	8005c94 <_printf_i+0x208>
 8005cbc:	2500      	movs	r5, #0
 8005cbe:	f104 0619 	add.w	r6, r4, #25
 8005cc2:	e7f5      	b.n	8005cb0 <_printf_i+0x224>
 8005cc4:	08008158 	.word	0x08008158
 8005cc8:	08008169 	.word	0x08008169

08005ccc <std>:
 8005ccc:	2300      	movs	r3, #0
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cda:	6083      	str	r3, [r0, #8]
 8005cdc:	8181      	strh	r1, [r0, #12]
 8005cde:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ce0:	81c2      	strh	r2, [r0, #14]
 8005ce2:	6183      	str	r3, [r0, #24]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	305c      	adds	r0, #92	@ 0x5c
 8005cea:	f000 f914 	bl	8005f16 <memset>
 8005cee:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <std+0x58>)
 8005cf0:	6224      	str	r4, [r4, #32]
 8005cf2:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <std+0x5c>)
 8005cf6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <std+0x60>)
 8005cfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d30 <std+0x64>)
 8005cfe:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d00:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <std+0x68>)
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d006      	beq.n	8005d14 <std+0x48>
 8005d06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d0a:	4294      	cmp	r4, r2
 8005d0c:	d002      	beq.n	8005d14 <std+0x48>
 8005d0e:	33d0      	adds	r3, #208	@ 0xd0
 8005d10:	429c      	cmp	r4, r3
 8005d12:	d105      	bne.n	8005d20 <std+0x54>
 8005d14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d1c:	f000 b978 	b.w	8006010 <__retarget_lock_init_recursive>
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	bf00      	nop
 8005d24:	08005e91 	.word	0x08005e91
 8005d28:	08005eb3 	.word	0x08005eb3
 8005d2c:	08005eeb 	.word	0x08005eeb
 8005d30:	08005f0f 	.word	0x08005f0f
 8005d34:	20000404 	.word	0x20000404

08005d38 <stdio_exit_handler>:
 8005d38:	4a02      	ldr	r2, [pc, #8]	@ (8005d44 <stdio_exit_handler+0xc>)
 8005d3a:	4903      	ldr	r1, [pc, #12]	@ (8005d48 <stdio_exit_handler+0x10>)
 8005d3c:	4803      	ldr	r0, [pc, #12]	@ (8005d4c <stdio_exit_handler+0x14>)
 8005d3e:	f000 b869 	b.w	8005e14 <_fwalk_sglue>
 8005d42:	bf00      	nop
 8005d44:	20000014 	.word	0x20000014
 8005d48:	08007985 	.word	0x08007985
 8005d4c:	20000024 	.word	0x20000024

08005d50 <cleanup_stdio>:
 8005d50:	6841      	ldr	r1, [r0, #4]
 8005d52:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <cleanup_stdio+0x34>)
 8005d54:	b510      	push	{r4, lr}
 8005d56:	4299      	cmp	r1, r3
 8005d58:	4604      	mov	r4, r0
 8005d5a:	d001      	beq.n	8005d60 <cleanup_stdio+0x10>
 8005d5c:	f001 fe12 	bl	8007984 <_fflush_r>
 8005d60:	68a1      	ldr	r1, [r4, #8]
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <cleanup_stdio+0x38>)
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d002      	beq.n	8005d6e <cleanup_stdio+0x1e>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f001 fe0b 	bl	8007984 <_fflush_r>
 8005d6e:	68e1      	ldr	r1, [r4, #12]
 8005d70:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <cleanup_stdio+0x3c>)
 8005d72:	4299      	cmp	r1, r3
 8005d74:	d004      	beq.n	8005d80 <cleanup_stdio+0x30>
 8005d76:	4620      	mov	r0, r4
 8005d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d7c:	f001 be02 	b.w	8007984 <_fflush_r>
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	bf00      	nop
 8005d84:	20000404 	.word	0x20000404
 8005d88:	2000046c 	.word	0x2000046c
 8005d8c:	200004d4 	.word	0x200004d4

08005d90 <global_stdio_init.part.0>:
 8005d90:	b510      	push	{r4, lr}
 8005d92:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <global_stdio_init.part.0+0x30>)
 8005d94:	4c0b      	ldr	r4, [pc, #44]	@ (8005dc4 <global_stdio_init.part.0+0x34>)
 8005d96:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc8 <global_stdio_init.part.0+0x38>)
 8005d98:	4620      	mov	r0, r4
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f7ff ff94 	bl	8005ccc <std>
 8005da4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005da8:	2201      	movs	r2, #1
 8005daa:	2109      	movs	r1, #9
 8005dac:	f7ff ff8e 	bl	8005ccc <std>
 8005db0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005db4:	2202      	movs	r2, #2
 8005db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dba:	2112      	movs	r1, #18
 8005dbc:	f7ff bf86 	b.w	8005ccc <std>
 8005dc0:	2000053c 	.word	0x2000053c
 8005dc4:	20000404 	.word	0x20000404
 8005dc8:	08005d39 	.word	0x08005d39

08005dcc <__sfp_lock_acquire>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	@ (8005dd4 <__sfp_lock_acquire+0x8>)
 8005dce:	f000 b920 	b.w	8006012 <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000545 	.word	0x20000545

08005dd8 <__sfp_lock_release>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__sfp_lock_release+0x8>)
 8005dda:	f000 b91b 	b.w	8006014 <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000545 	.word	0x20000545

08005de4 <__sinit>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4604      	mov	r4, r0
 8005de8:	f7ff fff0 	bl	8005dcc <__sfp_lock_acquire>
 8005dec:	6a23      	ldr	r3, [r4, #32]
 8005dee:	b11b      	cbz	r3, 8005df8 <__sinit+0x14>
 8005df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df4:	f7ff bff0 	b.w	8005dd8 <__sfp_lock_release>
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <__sinit+0x28>)
 8005dfa:	6223      	str	r3, [r4, #32]
 8005dfc:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <__sinit+0x2c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f5      	bne.n	8005df0 <__sinit+0xc>
 8005e04:	f7ff ffc4 	bl	8005d90 <global_stdio_init.part.0>
 8005e08:	e7f2      	b.n	8005df0 <__sinit+0xc>
 8005e0a:	bf00      	nop
 8005e0c:	08005d51 	.word	0x08005d51
 8005e10:	2000053c 	.word	0x2000053c

08005e14 <_fwalk_sglue>:
 8005e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	4607      	mov	r7, r0
 8005e1a:	4688      	mov	r8, r1
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	2600      	movs	r6, #0
 8005e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e24:	f1b9 0901 	subs.w	r9, r9, #1
 8005e28:	d505      	bpl.n	8005e36 <_fwalk_sglue+0x22>
 8005e2a:	6824      	ldr	r4, [r4, #0]
 8005e2c:	2c00      	cmp	r4, #0
 8005e2e:	d1f7      	bne.n	8005e20 <_fwalk_sglue+0xc>
 8005e30:	4630      	mov	r0, r6
 8005e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e36:	89ab      	ldrh	r3, [r5, #12]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d907      	bls.n	8005e4c <_fwalk_sglue+0x38>
 8005e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e40:	3301      	adds	r3, #1
 8005e42:	d003      	beq.n	8005e4c <_fwalk_sglue+0x38>
 8005e44:	4629      	mov	r1, r5
 8005e46:	4638      	mov	r0, r7
 8005e48:	47c0      	blx	r8
 8005e4a:	4306      	orrs	r6, r0
 8005e4c:	3568      	adds	r5, #104	@ 0x68
 8005e4e:	e7e9      	b.n	8005e24 <_fwalk_sglue+0x10>

08005e50 <siprintf>:
 8005e50:	b40e      	push	{r1, r2, r3}
 8005e52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e56:	b500      	push	{lr}
 8005e58:	b09c      	sub	sp, #112	@ 0x70
 8005e5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e5c:	9002      	str	r0, [sp, #8]
 8005e5e:	9006      	str	r0, [sp, #24]
 8005e60:	9107      	str	r1, [sp, #28]
 8005e62:	9104      	str	r1, [sp, #16]
 8005e64:	4808      	ldr	r0, [pc, #32]	@ (8005e88 <siprintf+0x38>)
 8005e66:	4909      	ldr	r1, [pc, #36]	@ (8005e8c <siprintf+0x3c>)
 8005e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6c:	9105      	str	r1, [sp, #20]
 8005e6e:	6800      	ldr	r0, [r0, #0]
 8005e70:	a902      	add	r1, sp, #8
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	f001 fc0a 	bl	800768c <_svfiprintf_r>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	9b02      	ldr	r3, [sp, #8]
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	b01c      	add	sp, #112	@ 0x70
 8005e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e84:	b003      	add	sp, #12
 8005e86:	4770      	bx	lr
 8005e88:	20000020 	.word	0x20000020
 8005e8c:	ffff0208 	.word	0xffff0208

08005e90 <__sread>:
 8005e90:	b510      	push	{r4, lr}
 8005e92:	460c      	mov	r4, r1
 8005e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e98:	f000 f86c 	bl	8005f74 <_read_r>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	bfab      	itete	ge
 8005ea0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ea4:	181b      	addge	r3, r3, r0
 8005ea6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eaa:	bfac      	ite	ge
 8005eac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eae:	81a3      	strhlt	r3, [r4, #12]
 8005eb0:	bd10      	pop	{r4, pc}

08005eb2 <__swrite>:
 8005eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	898b      	ldrh	r3, [r1, #12]
 8005eba:	4605      	mov	r5, r0
 8005ebc:	05db      	lsls	r3, r3, #23
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	4616      	mov	r6, r2
 8005ec2:	d505      	bpl.n	8005ed0 <__swrite+0x1e>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ecc:	f000 f840 	bl	8005f50 <_lseek_r>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	4632      	mov	r2, r6
 8005ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	4628      	mov	r0, r5
 8005edc:	463b      	mov	r3, r7
 8005ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	f000 b857 	b.w	8005f98 <_write_r>

08005eea <__sseek>:
 8005eea:	b510      	push	{r4, lr}
 8005eec:	460c      	mov	r4, r1
 8005eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef2:	f000 f82d 	bl	8005f50 <_lseek_r>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	bf15      	itete	ne
 8005efc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005efe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f06:	81a3      	strheq	r3, [r4, #12]
 8005f08:	bf18      	it	ne
 8005f0a:	81a3      	strhne	r3, [r4, #12]
 8005f0c:	bd10      	pop	{r4, pc}

08005f0e <__sclose>:
 8005f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f12:	f000 b80d 	b.w	8005f30 <_close_r>

08005f16 <memset>:
 8005f16:	4603      	mov	r3, r0
 8005f18:	4402      	add	r2, r0
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d100      	bne.n	8005f20 <memset+0xa>
 8005f1e:	4770      	bx	lr
 8005f20:	f803 1b01 	strb.w	r1, [r3], #1
 8005f24:	e7f9      	b.n	8005f1a <memset+0x4>
	...

08005f28 <_localeconv_r>:
 8005f28:	4800      	ldr	r0, [pc, #0]	@ (8005f2c <_localeconv_r+0x4>)
 8005f2a:	4770      	bx	lr
 8005f2c:	20000160 	.word	0x20000160

08005f30 <_close_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	2300      	movs	r3, #0
 8005f34:	4d05      	ldr	r5, [pc, #20]	@ (8005f4c <_close_r+0x1c>)
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fc f84b 	bl	8001fd6 <_close>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_close_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_close_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	20000540 	.word	0x20000540

08005f50 <_lseek_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4d05      	ldr	r5, [pc, #20]	@ (8005f70 <_lseek_r+0x20>)
 8005f5c:	602a      	str	r2, [r5, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fc f85d 	bl	800201e <_lseek>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_lseek_r+0x1e>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_lseek_r+0x1e>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	20000540 	.word	0x20000540

08005f74 <_read_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4604      	mov	r4, r0
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	4d05      	ldr	r5, [pc, #20]	@ (8005f94 <_read_r+0x20>)
 8005f80:	602a      	str	r2, [r5, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f7fb ffee 	bl	8001f64 <_read>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_read_r+0x1e>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_read_r+0x1e>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	20000540 	.word	0x20000540

08005f98 <_write_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4d05      	ldr	r5, [pc, #20]	@ (8005fb8 <_write_r+0x20>)
 8005fa4:	602a      	str	r2, [r5, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f7fb fff9 	bl	8001f9e <_write>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_write_r+0x1e>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_write_r+0x1e>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	20000540 	.word	0x20000540

08005fbc <__errno>:
 8005fbc:	4b01      	ldr	r3, [pc, #4]	@ (8005fc4 <__errno+0x8>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000020 	.word	0x20000020

08005fc8 <__libc_init_array>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	2600      	movs	r6, #0
 8005fcc:	4d0c      	ldr	r5, [pc, #48]	@ (8006000 <__libc_init_array+0x38>)
 8005fce:	4c0d      	ldr	r4, [pc, #52]	@ (8006004 <__libc_init_array+0x3c>)
 8005fd0:	1b64      	subs	r4, r4, r5
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	42a6      	cmp	r6, r4
 8005fd6:	d109      	bne.n	8005fec <__libc_init_array+0x24>
 8005fd8:	f002 f870 	bl	80080bc <_init>
 8005fdc:	2600      	movs	r6, #0
 8005fde:	4d0a      	ldr	r5, [pc, #40]	@ (8006008 <__libc_init_array+0x40>)
 8005fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800600c <__libc_init_array+0x44>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	42a6      	cmp	r6, r4
 8005fe8:	d105      	bne.n	8005ff6 <__libc_init_array+0x2e>
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff0:	4798      	blx	r3
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7ee      	b.n	8005fd4 <__libc_init_array+0xc>
 8005ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffa:	4798      	blx	r3
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	e7f2      	b.n	8005fe6 <__libc_init_array+0x1e>
 8006000:	080084c0 	.word	0x080084c0
 8006004:	080084c0 	.word	0x080084c0
 8006008:	080084c0 	.word	0x080084c0
 800600c:	080084c4 	.word	0x080084c4

08006010 <__retarget_lock_init_recursive>:
 8006010:	4770      	bx	lr

08006012 <__retarget_lock_acquire_recursive>:
 8006012:	4770      	bx	lr

08006014 <__retarget_lock_release_recursive>:
 8006014:	4770      	bx	lr

08006016 <memchr>:
 8006016:	4603      	mov	r3, r0
 8006018:	b510      	push	{r4, lr}
 800601a:	b2c9      	uxtb	r1, r1
 800601c:	4402      	add	r2, r0
 800601e:	4293      	cmp	r3, r2
 8006020:	4618      	mov	r0, r3
 8006022:	d101      	bne.n	8006028 <memchr+0x12>
 8006024:	2000      	movs	r0, #0
 8006026:	e003      	b.n	8006030 <memchr+0x1a>
 8006028:	7804      	ldrb	r4, [r0, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	428c      	cmp	r4, r1
 800602e:	d1f6      	bne.n	800601e <memchr+0x8>
 8006030:	bd10      	pop	{r4, pc}

08006032 <quorem>:
 8006032:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006036:	6903      	ldr	r3, [r0, #16]
 8006038:	690c      	ldr	r4, [r1, #16]
 800603a:	4607      	mov	r7, r0
 800603c:	42a3      	cmp	r3, r4
 800603e:	db7e      	blt.n	800613e <quorem+0x10c>
 8006040:	3c01      	subs	r4, #1
 8006042:	00a3      	lsls	r3, r4, #2
 8006044:	f100 0514 	add.w	r5, r0, #20
 8006048:	f101 0814 	add.w	r8, r1, #20
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800605c:	3301      	adds	r3, #1
 800605e:	429a      	cmp	r2, r3
 8006060:	fbb2 f6f3 	udiv	r6, r2, r3
 8006064:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006068:	d32e      	bcc.n	80060c8 <quorem+0x96>
 800606a:	f04f 0a00 	mov.w	sl, #0
 800606e:	46c4      	mov	ip, r8
 8006070:	46ae      	mov	lr, r5
 8006072:	46d3      	mov	fp, sl
 8006074:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006078:	b298      	uxth	r0, r3
 800607a:	fb06 a000 	mla	r0, r6, r0, sl
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	0c02      	lsrs	r2, r0, #16
 8006082:	fb06 2303 	mla	r3, r6, r3, r2
 8006086:	f8de 2000 	ldr.w	r2, [lr]
 800608a:	b280      	uxth	r0, r0
 800608c:	b292      	uxth	r2, r2
 800608e:	1a12      	subs	r2, r2, r0
 8006090:	445a      	add	r2, fp
 8006092:	f8de 0000 	ldr.w	r0, [lr]
 8006096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800609a:	b29b      	uxth	r3, r3
 800609c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060a4:	b292      	uxth	r2, r2
 80060a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060aa:	45e1      	cmp	r9, ip
 80060ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060b0:	f84e 2b04 	str.w	r2, [lr], #4
 80060b4:	d2de      	bcs.n	8006074 <quorem+0x42>
 80060b6:	9b00      	ldr	r3, [sp, #0]
 80060b8:	58eb      	ldr	r3, [r5, r3]
 80060ba:	b92b      	cbnz	r3, 80060c8 <quorem+0x96>
 80060bc:	9b01      	ldr	r3, [sp, #4]
 80060be:	3b04      	subs	r3, #4
 80060c0:	429d      	cmp	r5, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	d32f      	bcc.n	8006126 <quorem+0xf4>
 80060c6:	613c      	str	r4, [r7, #16]
 80060c8:	4638      	mov	r0, r7
 80060ca:	f001 f97b 	bl	80073c4 <__mcmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	db25      	blt.n	800611e <quorem+0xec>
 80060d2:	4629      	mov	r1, r5
 80060d4:	2000      	movs	r0, #0
 80060d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80060da:	f8d1 c000 	ldr.w	ip, [r1]
 80060de:	fa1f fe82 	uxth.w	lr, r2
 80060e2:	fa1f f38c 	uxth.w	r3, ip
 80060e6:	eba3 030e 	sub.w	r3, r3, lr
 80060ea:	4403      	add	r3, r0
 80060ec:	0c12      	lsrs	r2, r2, #16
 80060ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060fc:	45c1      	cmp	r9, r8
 80060fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006102:	f841 3b04 	str.w	r3, [r1], #4
 8006106:	d2e6      	bcs.n	80060d6 <quorem+0xa4>
 8006108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800610c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006110:	b922      	cbnz	r2, 800611c <quorem+0xea>
 8006112:	3b04      	subs	r3, #4
 8006114:	429d      	cmp	r5, r3
 8006116:	461a      	mov	r2, r3
 8006118:	d30b      	bcc.n	8006132 <quorem+0x100>
 800611a:	613c      	str	r4, [r7, #16]
 800611c:	3601      	adds	r6, #1
 800611e:	4630      	mov	r0, r6
 8006120:	b003      	add	sp, #12
 8006122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	3b04      	subs	r3, #4
 800612a:	2a00      	cmp	r2, #0
 800612c:	d1cb      	bne.n	80060c6 <quorem+0x94>
 800612e:	3c01      	subs	r4, #1
 8006130:	e7c6      	b.n	80060c0 <quorem+0x8e>
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	3b04      	subs	r3, #4
 8006136:	2a00      	cmp	r2, #0
 8006138:	d1ef      	bne.n	800611a <quorem+0xe8>
 800613a:	3c01      	subs	r4, #1
 800613c:	e7ea      	b.n	8006114 <quorem+0xe2>
 800613e:	2000      	movs	r0, #0
 8006140:	e7ee      	b.n	8006120 <quorem+0xee>
 8006142:	0000      	movs	r0, r0
 8006144:	0000      	movs	r0, r0
	...

08006148 <_dtoa_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	4614      	mov	r4, r2
 800614e:	461d      	mov	r5, r3
 8006150:	69c7      	ldr	r7, [r0, #28]
 8006152:	b097      	sub	sp, #92	@ 0x5c
 8006154:	4683      	mov	fp, r0
 8006156:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800615a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800615c:	b97f      	cbnz	r7, 800617e <_dtoa_r+0x36>
 800615e:	2010      	movs	r0, #16
 8006160:	f000 fe02 	bl	8006d68 <malloc>
 8006164:	4602      	mov	r2, r0
 8006166:	f8cb 001c 	str.w	r0, [fp, #28]
 800616a:	b920      	cbnz	r0, 8006176 <_dtoa_r+0x2e>
 800616c:	21ef      	movs	r1, #239	@ 0xef
 800616e:	4ba8      	ldr	r3, [pc, #672]	@ (8006410 <_dtoa_r+0x2c8>)
 8006170:	48a8      	ldr	r0, [pc, #672]	@ (8006414 <_dtoa_r+0x2cc>)
 8006172:	f001 fc67 	bl	8007a44 <__assert_func>
 8006176:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800617a:	6007      	str	r7, [r0, #0]
 800617c:	60c7      	str	r7, [r0, #12]
 800617e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	b159      	cbz	r1, 800619e <_dtoa_r+0x56>
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	2301      	movs	r3, #1
 800618a:	4093      	lsls	r3, r2
 800618c:	604a      	str	r2, [r1, #4]
 800618e:	608b      	str	r3, [r1, #8]
 8006190:	4658      	mov	r0, fp
 8006192:	f000 fedf 	bl	8006f54 <_Bfree>
 8006196:	2200      	movs	r2, #0
 8006198:	f8db 301c 	ldr.w	r3, [fp, #28]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	1e2b      	subs	r3, r5, #0
 80061a0:	bfaf      	iteee	ge
 80061a2:	2300      	movge	r3, #0
 80061a4:	2201      	movlt	r2, #1
 80061a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061aa:	9303      	strlt	r3, [sp, #12]
 80061ac:	bfa8      	it	ge
 80061ae:	6033      	strge	r3, [r6, #0]
 80061b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061b4:	4b98      	ldr	r3, [pc, #608]	@ (8006418 <_dtoa_r+0x2d0>)
 80061b6:	bfb8      	it	lt
 80061b8:	6032      	strlt	r2, [r6, #0]
 80061ba:	ea33 0308 	bics.w	r3, r3, r8
 80061be:	d112      	bne.n	80061e6 <_dtoa_r+0x9e>
 80061c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061cc:	4323      	orrs	r3, r4
 80061ce:	f000 8550 	beq.w	8006c72 <_dtoa_r+0xb2a>
 80061d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061d4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800641c <_dtoa_r+0x2d4>
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8552 	beq.w	8006c82 <_dtoa_r+0xb3a>
 80061de:	f10a 0303 	add.w	r3, sl, #3
 80061e2:	f000 bd4c 	b.w	8006c7e <_dtoa_r+0xb36>
 80061e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061f2:	2200      	movs	r2, #0
 80061f4:	2300      	movs	r3, #0
 80061f6:	f7fa fbd7 	bl	80009a8 <__aeabi_dcmpeq>
 80061fa:	4607      	mov	r7, r0
 80061fc:	b158      	cbz	r0, 8006216 <_dtoa_r+0xce>
 80061fe:	2301      	movs	r3, #1
 8006200:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006206:	b113      	cbz	r3, 800620e <_dtoa_r+0xc6>
 8006208:	4b85      	ldr	r3, [pc, #532]	@ (8006420 <_dtoa_r+0x2d8>)
 800620a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006424 <_dtoa_r+0x2dc>
 8006212:	f000 bd36 	b.w	8006c82 <_dtoa_r+0xb3a>
 8006216:	ab14      	add	r3, sp, #80	@ 0x50
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	ab15      	add	r3, sp, #84	@ 0x54
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	4658      	mov	r0, fp
 8006220:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006224:	f001 f97e 	bl	8007524 <__d2b>
 8006228:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800622c:	4681      	mov	r9, r0
 800622e:	2e00      	cmp	r6, #0
 8006230:	d077      	beq.n	8006322 <_dtoa_r+0x1da>
 8006232:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006238:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800623c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006240:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006244:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006248:	9712      	str	r7, [sp, #72]	@ 0x48
 800624a:	4619      	mov	r1, r3
 800624c:	2200      	movs	r2, #0
 800624e:	4b76      	ldr	r3, [pc, #472]	@ (8006428 <_dtoa_r+0x2e0>)
 8006250:	f7f9 ff8a 	bl	8000168 <__aeabi_dsub>
 8006254:	a368      	add	r3, pc, #416	@ (adr r3, 80063f8 <_dtoa_r+0x2b0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa f93d 	bl	80004d8 <__aeabi_dmul>
 800625e:	a368      	add	r3, pc, #416	@ (adr r3, 8006400 <_dtoa_r+0x2b8>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f7f9 ff82 	bl	800016c <__adddf3>
 8006268:	4604      	mov	r4, r0
 800626a:	4630      	mov	r0, r6
 800626c:	460d      	mov	r5, r1
 800626e:	f7fa f8c9 	bl	8000404 <__aeabi_i2d>
 8006272:	a365      	add	r3, pc, #404	@ (adr r3, 8006408 <_dtoa_r+0x2c0>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fa f92e 	bl	80004d8 <__aeabi_dmul>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7f9 ff72 	bl	800016c <__adddf3>
 8006288:	4604      	mov	r4, r0
 800628a:	460d      	mov	r5, r1
 800628c:	f7fa fbd4 	bl	8000a38 <__aeabi_d2iz>
 8006290:	2200      	movs	r2, #0
 8006292:	4607      	mov	r7, r0
 8006294:	2300      	movs	r3, #0
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	f7fa fb8f 	bl	80009bc <__aeabi_dcmplt>
 800629e:	b140      	cbz	r0, 80062b2 <_dtoa_r+0x16a>
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7fa f8af 	bl	8000404 <__aeabi_i2d>
 80062a6:	4622      	mov	r2, r4
 80062a8:	462b      	mov	r3, r5
 80062aa:	f7fa fb7d 	bl	80009a8 <__aeabi_dcmpeq>
 80062ae:	b900      	cbnz	r0, 80062b2 <_dtoa_r+0x16a>
 80062b0:	3f01      	subs	r7, #1
 80062b2:	2f16      	cmp	r7, #22
 80062b4:	d853      	bhi.n	800635e <_dtoa_r+0x216>
 80062b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062ba:	4b5c      	ldr	r3, [pc, #368]	@ (800642c <_dtoa_r+0x2e4>)
 80062bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f7fa fb7a 	bl	80009bc <__aeabi_dcmplt>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d04a      	beq.n	8006362 <_dtoa_r+0x21a>
 80062cc:	2300      	movs	r3, #0
 80062ce:	3f01      	subs	r7, #1
 80062d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062d4:	1b9b      	subs	r3, r3, r6
 80062d6:	1e5a      	subs	r2, r3, #1
 80062d8:	bf46      	itte	mi
 80062da:	f1c3 0801 	rsbmi	r8, r3, #1
 80062de:	2300      	movmi	r3, #0
 80062e0:	f04f 0800 	movpl.w	r8, #0
 80062e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e6:	bf48      	it	mi
 80062e8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80062ea:	2f00      	cmp	r7, #0
 80062ec:	db3b      	blt.n	8006366 <_dtoa_r+0x21e>
 80062ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062f0:	970e      	str	r7, [sp, #56]	@ 0x38
 80062f2:	443b      	add	r3, r7
 80062f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062f6:	2300      	movs	r3, #0
 80062f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d866      	bhi.n	80063ce <_dtoa_r+0x286>
 8006300:	2b05      	cmp	r3, #5
 8006302:	bfc4      	itt	gt
 8006304:	3b04      	subgt	r3, #4
 8006306:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006308:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800630a:	bfc8      	it	gt
 800630c:	2400      	movgt	r4, #0
 800630e:	f1a3 0302 	sub.w	r3, r3, #2
 8006312:	bfd8      	it	le
 8006314:	2401      	movle	r4, #1
 8006316:	2b03      	cmp	r3, #3
 8006318:	d864      	bhi.n	80063e4 <_dtoa_r+0x29c>
 800631a:	e8df f003 	tbb	[pc, r3]
 800631e:	382b      	.short	0x382b
 8006320:	5636      	.short	0x5636
 8006322:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006326:	441e      	add	r6, r3
 8006328:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800632c:	2b20      	cmp	r3, #32
 800632e:	bfc1      	itttt	gt
 8006330:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006334:	fa08 f803 	lslgt.w	r8, r8, r3
 8006338:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800633c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006340:	bfd6      	itet	le
 8006342:	f1c3 0320 	rsble	r3, r3, #32
 8006346:	ea48 0003 	orrgt.w	r0, r8, r3
 800634a:	fa04 f003 	lslle.w	r0, r4, r3
 800634e:	f7fa f849 	bl	80003e4 <__aeabi_ui2d>
 8006352:	2201      	movs	r2, #1
 8006354:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006358:	3e01      	subs	r6, #1
 800635a:	9212      	str	r2, [sp, #72]	@ 0x48
 800635c:	e775      	b.n	800624a <_dtoa_r+0x102>
 800635e:	2301      	movs	r3, #1
 8006360:	e7b6      	b.n	80062d0 <_dtoa_r+0x188>
 8006362:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006364:	e7b5      	b.n	80062d2 <_dtoa_r+0x18a>
 8006366:	427b      	negs	r3, r7
 8006368:	930a      	str	r3, [sp, #40]	@ 0x28
 800636a:	2300      	movs	r3, #0
 800636c:	eba8 0807 	sub.w	r8, r8, r7
 8006370:	930e      	str	r3, [sp, #56]	@ 0x38
 8006372:	e7c2      	b.n	80062fa <_dtoa_r+0x1b2>
 8006374:	2300      	movs	r3, #0
 8006376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006378:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800637a:	2b00      	cmp	r3, #0
 800637c:	dc35      	bgt.n	80063ea <_dtoa_r+0x2a2>
 800637e:	2301      	movs	r3, #1
 8006380:	461a      	mov	r2, r3
 8006382:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006386:	9221      	str	r2, [sp, #132]	@ 0x84
 8006388:	e00b      	b.n	80063a2 <_dtoa_r+0x25a>
 800638a:	2301      	movs	r3, #1
 800638c:	e7f3      	b.n	8006376 <_dtoa_r+0x22e>
 800638e:	2300      	movs	r3, #0
 8006390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006392:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	9308      	str	r3, [sp, #32]
 8006398:	3301      	adds	r3, #1
 800639a:	2b01      	cmp	r3, #1
 800639c:	9307      	str	r3, [sp, #28]
 800639e:	bfb8      	it	lt
 80063a0:	2301      	movlt	r3, #1
 80063a2:	2100      	movs	r1, #0
 80063a4:	2204      	movs	r2, #4
 80063a6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80063aa:	f102 0514 	add.w	r5, r2, #20
 80063ae:	429d      	cmp	r5, r3
 80063b0:	d91f      	bls.n	80063f2 <_dtoa_r+0x2aa>
 80063b2:	6041      	str	r1, [r0, #4]
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 fd8d 	bl	8006ed4 <_Balloc>
 80063ba:	4682      	mov	sl, r0
 80063bc:	2800      	cmp	r0, #0
 80063be:	d139      	bne.n	8006434 <_dtoa_r+0x2ec>
 80063c0:	4602      	mov	r2, r0
 80063c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80063c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006430 <_dtoa_r+0x2e8>)
 80063c8:	e6d2      	b.n	8006170 <_dtoa_r+0x28>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e7e0      	b.n	8006390 <_dtoa_r+0x248>
 80063ce:	2401      	movs	r4, #1
 80063d0:	2300      	movs	r3, #0
 80063d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80063d6:	f04f 33ff 	mov.w	r3, #4294967295
 80063da:	2200      	movs	r2, #0
 80063dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063e0:	2312      	movs	r3, #18
 80063e2:	e7d0      	b.n	8006386 <_dtoa_r+0x23e>
 80063e4:	2301      	movs	r3, #1
 80063e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063e8:	e7f5      	b.n	80063d6 <_dtoa_r+0x28e>
 80063ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063f0:	e7d7      	b.n	80063a2 <_dtoa_r+0x25a>
 80063f2:	3101      	adds	r1, #1
 80063f4:	0052      	lsls	r2, r2, #1
 80063f6:	e7d8      	b.n	80063aa <_dtoa_r+0x262>
 80063f8:	636f4361 	.word	0x636f4361
 80063fc:	3fd287a7 	.word	0x3fd287a7
 8006400:	8b60c8b3 	.word	0x8b60c8b3
 8006404:	3fc68a28 	.word	0x3fc68a28
 8006408:	509f79fb 	.word	0x509f79fb
 800640c:	3fd34413 	.word	0x3fd34413
 8006410:	08008187 	.word	0x08008187
 8006414:	0800819e 	.word	0x0800819e
 8006418:	7ff00000 	.word	0x7ff00000
 800641c:	08008183 	.word	0x08008183
 8006420:	08008157 	.word	0x08008157
 8006424:	08008156 	.word	0x08008156
 8006428:	3ff80000 	.word	0x3ff80000
 800642c:	08008298 	.word	0x08008298
 8006430:	080081f6 	.word	0x080081f6
 8006434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006438:	6018      	str	r0, [r3, #0]
 800643a:	9b07      	ldr	r3, [sp, #28]
 800643c:	2b0e      	cmp	r3, #14
 800643e:	f200 80a4 	bhi.w	800658a <_dtoa_r+0x442>
 8006442:	2c00      	cmp	r4, #0
 8006444:	f000 80a1 	beq.w	800658a <_dtoa_r+0x442>
 8006448:	2f00      	cmp	r7, #0
 800644a:	dd33      	ble.n	80064b4 <_dtoa_r+0x36c>
 800644c:	4b86      	ldr	r3, [pc, #536]	@ (8006668 <_dtoa_r+0x520>)
 800644e:	f007 020f 	and.w	r2, r7, #15
 8006452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006456:	05f8      	lsls	r0, r7, #23
 8006458:	e9d3 3400 	ldrd	r3, r4, [r3]
 800645c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006460:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006464:	d516      	bpl.n	8006494 <_dtoa_r+0x34c>
 8006466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800646a:	4b80      	ldr	r3, [pc, #512]	@ (800666c <_dtoa_r+0x524>)
 800646c:	2603      	movs	r6, #3
 800646e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006472:	f7fa f95b 	bl	800072c <__aeabi_ddiv>
 8006476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800647a:	f004 040f 	and.w	r4, r4, #15
 800647e:	4d7b      	ldr	r5, [pc, #492]	@ (800666c <_dtoa_r+0x524>)
 8006480:	b954      	cbnz	r4, 8006498 <_dtoa_r+0x350>
 8006482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648a:	f7fa f94f 	bl	800072c <__aeabi_ddiv>
 800648e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006492:	e028      	b.n	80064e6 <_dtoa_r+0x39e>
 8006494:	2602      	movs	r6, #2
 8006496:	e7f2      	b.n	800647e <_dtoa_r+0x336>
 8006498:	07e1      	lsls	r1, r4, #31
 800649a:	d508      	bpl.n	80064ae <_dtoa_r+0x366>
 800649c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064a4:	f7fa f818 	bl	80004d8 <__aeabi_dmul>
 80064a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064ac:	3601      	adds	r6, #1
 80064ae:	1064      	asrs	r4, r4, #1
 80064b0:	3508      	adds	r5, #8
 80064b2:	e7e5      	b.n	8006480 <_dtoa_r+0x338>
 80064b4:	f000 80d2 	beq.w	800665c <_dtoa_r+0x514>
 80064b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064bc:	427c      	negs	r4, r7
 80064be:	4b6a      	ldr	r3, [pc, #424]	@ (8006668 <_dtoa_r+0x520>)
 80064c0:	f004 020f 	and.w	r2, r4, #15
 80064c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f7fa f804 	bl	80004d8 <__aeabi_dmul>
 80064d0:	2602      	movs	r6, #2
 80064d2:	2300      	movs	r3, #0
 80064d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d8:	4d64      	ldr	r5, [pc, #400]	@ (800666c <_dtoa_r+0x524>)
 80064da:	1124      	asrs	r4, r4, #4
 80064dc:	2c00      	cmp	r4, #0
 80064de:	f040 80b2 	bne.w	8006646 <_dtoa_r+0x4fe>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1d3      	bne.n	800648e <_dtoa_r+0x346>
 80064e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80b7 	beq.w	8006660 <_dtoa_r+0x518>
 80064f2:	2200      	movs	r2, #0
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	4b5d      	ldr	r3, [pc, #372]	@ (8006670 <_dtoa_r+0x528>)
 80064fa:	f7fa fa5f 	bl	80009bc <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f000 80ae 	beq.w	8006660 <_dtoa_r+0x518>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80aa 	beq.w	8006660 <_dtoa_r+0x518>
 800650c:	9b08      	ldr	r3, [sp, #32]
 800650e:	2b00      	cmp	r3, #0
 8006510:	dd37      	ble.n	8006582 <_dtoa_r+0x43a>
 8006512:	1e7b      	subs	r3, r7, #1
 8006514:	4620      	mov	r0, r4
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	2200      	movs	r2, #0
 800651a:	4629      	mov	r1, r5
 800651c:	4b55      	ldr	r3, [pc, #340]	@ (8006674 <_dtoa_r+0x52c>)
 800651e:	f7f9 ffdb 	bl	80004d8 <__aeabi_dmul>
 8006522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006526:	9c08      	ldr	r4, [sp, #32]
 8006528:	3601      	adds	r6, #1
 800652a:	4630      	mov	r0, r6
 800652c:	f7f9 ff6a 	bl	8000404 <__aeabi_i2d>
 8006530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006534:	f7f9 ffd0 	bl	80004d8 <__aeabi_dmul>
 8006538:	2200      	movs	r2, #0
 800653a:	4b4f      	ldr	r3, [pc, #316]	@ (8006678 <_dtoa_r+0x530>)
 800653c:	f7f9 fe16 	bl	800016c <__adddf3>
 8006540:	4605      	mov	r5, r0
 8006542:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006546:	2c00      	cmp	r4, #0
 8006548:	f040 809a 	bne.w	8006680 <_dtoa_r+0x538>
 800654c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	4b4a      	ldr	r3, [pc, #296]	@ (800667c <_dtoa_r+0x534>)
 8006554:	f7f9 fe08 	bl	8000168 <__aeabi_dsub>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006560:	462a      	mov	r2, r5
 8006562:	4633      	mov	r3, r6
 8006564:	f7fa fa48 	bl	80009f8 <__aeabi_dcmpgt>
 8006568:	2800      	cmp	r0, #0
 800656a:	f040 828e 	bne.w	8006a8a <_dtoa_r+0x942>
 800656e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006572:	462a      	mov	r2, r5
 8006574:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006578:	f7fa fa20 	bl	80009bc <__aeabi_dcmplt>
 800657c:	2800      	cmp	r0, #0
 800657e:	f040 8127 	bne.w	80067d0 <_dtoa_r+0x688>
 8006582:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800658a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800658c:	2b00      	cmp	r3, #0
 800658e:	f2c0 8163 	blt.w	8006858 <_dtoa_r+0x710>
 8006592:	2f0e      	cmp	r7, #14
 8006594:	f300 8160 	bgt.w	8006858 <_dtoa_r+0x710>
 8006598:	4b33      	ldr	r3, [pc, #204]	@ (8006668 <_dtoa_r+0x520>)
 800659a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800659e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da03      	bge.n	80065b4 <_dtoa_r+0x46c>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f340 8100 	ble.w	80067b4 <_dtoa_r+0x66c>
 80065b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065b8:	4656      	mov	r6, sl
 80065ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065be:	4620      	mov	r0, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7fa f8b3 	bl	800072c <__aeabi_ddiv>
 80065c6:	f7fa fa37 	bl	8000a38 <__aeabi_d2iz>
 80065ca:	4680      	mov	r8, r0
 80065cc:	f7f9 ff1a 	bl	8000404 <__aeabi_i2d>
 80065d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065d4:	f7f9 ff80 	bl	80004d8 <__aeabi_dmul>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7f9 fdc2 	bl	8000168 <__aeabi_dsub>
 80065e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065e8:	9d07      	ldr	r5, [sp, #28]
 80065ea:	f806 4b01 	strb.w	r4, [r6], #1
 80065ee:	eba6 040a 	sub.w	r4, r6, sl
 80065f2:	42a5      	cmp	r5, r4
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	f040 8116 	bne.w	8006828 <_dtoa_r+0x6e0>
 80065fc:	f7f9 fdb6 	bl	800016c <__adddf3>
 8006600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006604:	4604      	mov	r4, r0
 8006606:	460d      	mov	r5, r1
 8006608:	f7fa f9f6 	bl	80009f8 <__aeabi_dcmpgt>
 800660c:	2800      	cmp	r0, #0
 800660e:	f040 80f8 	bne.w	8006802 <_dtoa_r+0x6ba>
 8006612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	f7fa f9c5 	bl	80009a8 <__aeabi_dcmpeq>
 800661e:	b118      	cbz	r0, 8006628 <_dtoa_r+0x4e0>
 8006620:	f018 0f01 	tst.w	r8, #1
 8006624:	f040 80ed 	bne.w	8006802 <_dtoa_r+0x6ba>
 8006628:	4649      	mov	r1, r9
 800662a:	4658      	mov	r0, fp
 800662c:	f000 fc92 	bl	8006f54 <_Bfree>
 8006630:	2300      	movs	r3, #0
 8006632:	7033      	strb	r3, [r6, #0]
 8006634:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006636:	3701      	adds	r7, #1
 8006638:	601f      	str	r7, [r3, #0]
 800663a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8320 	beq.w	8006c82 <_dtoa_r+0xb3a>
 8006642:	601e      	str	r6, [r3, #0]
 8006644:	e31d      	b.n	8006c82 <_dtoa_r+0xb3a>
 8006646:	07e2      	lsls	r2, r4, #31
 8006648:	d505      	bpl.n	8006656 <_dtoa_r+0x50e>
 800664a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800664e:	f7f9 ff43 	bl	80004d8 <__aeabi_dmul>
 8006652:	2301      	movs	r3, #1
 8006654:	3601      	adds	r6, #1
 8006656:	1064      	asrs	r4, r4, #1
 8006658:	3508      	adds	r5, #8
 800665a:	e73f      	b.n	80064dc <_dtoa_r+0x394>
 800665c:	2602      	movs	r6, #2
 800665e:	e742      	b.n	80064e6 <_dtoa_r+0x39e>
 8006660:	9c07      	ldr	r4, [sp, #28]
 8006662:	9704      	str	r7, [sp, #16]
 8006664:	e761      	b.n	800652a <_dtoa_r+0x3e2>
 8006666:	bf00      	nop
 8006668:	08008298 	.word	0x08008298
 800666c:	08008270 	.word	0x08008270
 8006670:	3ff00000 	.word	0x3ff00000
 8006674:	40240000 	.word	0x40240000
 8006678:	401c0000 	.word	0x401c0000
 800667c:	40140000 	.word	0x40140000
 8006680:	4b70      	ldr	r3, [pc, #448]	@ (8006844 <_dtoa_r+0x6fc>)
 8006682:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006684:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006688:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800668c:	4454      	add	r4, sl
 800668e:	2900      	cmp	r1, #0
 8006690:	d045      	beq.n	800671e <_dtoa_r+0x5d6>
 8006692:	2000      	movs	r0, #0
 8006694:	496c      	ldr	r1, [pc, #432]	@ (8006848 <_dtoa_r+0x700>)
 8006696:	f7fa f849 	bl	800072c <__aeabi_ddiv>
 800669a:	4633      	mov	r3, r6
 800669c:	462a      	mov	r2, r5
 800669e:	f7f9 fd63 	bl	8000168 <__aeabi_dsub>
 80066a2:	4656      	mov	r6, sl
 80066a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ac:	f7fa f9c4 	bl	8000a38 <__aeabi_d2iz>
 80066b0:	4605      	mov	r5, r0
 80066b2:	f7f9 fea7 	bl	8000404 <__aeabi_i2d>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066be:	f7f9 fd53 	bl	8000168 <__aeabi_dsub>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	3530      	adds	r5, #48	@ 0x30
 80066c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066d0:	f806 5b01 	strb.w	r5, [r6], #1
 80066d4:	f7fa f972 	bl	80009bc <__aeabi_dcmplt>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d163      	bne.n	80067a4 <_dtoa_r+0x65c>
 80066dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066e0:	2000      	movs	r0, #0
 80066e2:	495a      	ldr	r1, [pc, #360]	@ (800684c <_dtoa_r+0x704>)
 80066e4:	f7f9 fd40 	bl	8000168 <__aeabi_dsub>
 80066e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066ec:	f7fa f966 	bl	80009bc <__aeabi_dcmplt>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f040 8087 	bne.w	8006804 <_dtoa_r+0x6bc>
 80066f6:	42a6      	cmp	r6, r4
 80066f8:	f43f af43 	beq.w	8006582 <_dtoa_r+0x43a>
 80066fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006700:	2200      	movs	r2, #0
 8006702:	4b53      	ldr	r3, [pc, #332]	@ (8006850 <_dtoa_r+0x708>)
 8006704:	f7f9 fee8 	bl	80004d8 <__aeabi_dmul>
 8006708:	2200      	movs	r2, #0
 800670a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800670e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006712:	4b4f      	ldr	r3, [pc, #316]	@ (8006850 <_dtoa_r+0x708>)
 8006714:	f7f9 fee0 	bl	80004d8 <__aeabi_dmul>
 8006718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800671c:	e7c4      	b.n	80066a8 <_dtoa_r+0x560>
 800671e:	4631      	mov	r1, r6
 8006720:	4628      	mov	r0, r5
 8006722:	f7f9 fed9 	bl	80004d8 <__aeabi_dmul>
 8006726:	4656      	mov	r6, sl
 8006728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800672c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800672e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006732:	f7fa f981 	bl	8000a38 <__aeabi_d2iz>
 8006736:	4605      	mov	r5, r0
 8006738:	f7f9 fe64 	bl	8000404 <__aeabi_i2d>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006744:	f7f9 fd10 	bl	8000168 <__aeabi_dsub>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	3530      	adds	r5, #48	@ 0x30
 800674e:	f806 5b01 	strb.w	r5, [r6], #1
 8006752:	42a6      	cmp	r6, r4
 8006754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	d124      	bne.n	80067a8 <_dtoa_r+0x660>
 800675e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006762:	4b39      	ldr	r3, [pc, #228]	@ (8006848 <_dtoa_r+0x700>)
 8006764:	f7f9 fd02 	bl	800016c <__adddf3>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006770:	f7fa f942 	bl	80009f8 <__aeabi_dcmpgt>
 8006774:	2800      	cmp	r0, #0
 8006776:	d145      	bne.n	8006804 <_dtoa_r+0x6bc>
 8006778:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800677c:	2000      	movs	r0, #0
 800677e:	4932      	ldr	r1, [pc, #200]	@ (8006848 <_dtoa_r+0x700>)
 8006780:	f7f9 fcf2 	bl	8000168 <__aeabi_dsub>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800678c:	f7fa f916 	bl	80009bc <__aeabi_dcmplt>
 8006790:	2800      	cmp	r0, #0
 8006792:	f43f aef6 	beq.w	8006582 <_dtoa_r+0x43a>
 8006796:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006798:	1e73      	subs	r3, r6, #1
 800679a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800679c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067a0:	2b30      	cmp	r3, #48	@ 0x30
 80067a2:	d0f8      	beq.n	8006796 <_dtoa_r+0x64e>
 80067a4:	9f04      	ldr	r7, [sp, #16]
 80067a6:	e73f      	b.n	8006628 <_dtoa_r+0x4e0>
 80067a8:	4b29      	ldr	r3, [pc, #164]	@ (8006850 <_dtoa_r+0x708>)
 80067aa:	f7f9 fe95 	bl	80004d8 <__aeabi_dmul>
 80067ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b2:	e7bc      	b.n	800672e <_dtoa_r+0x5e6>
 80067b4:	d10c      	bne.n	80067d0 <_dtoa_r+0x688>
 80067b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ba:	2200      	movs	r2, #0
 80067bc:	4b25      	ldr	r3, [pc, #148]	@ (8006854 <_dtoa_r+0x70c>)
 80067be:	f7f9 fe8b 	bl	80004d8 <__aeabi_dmul>
 80067c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067c6:	f7fa f90d 	bl	80009e4 <__aeabi_dcmpge>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f000 815b 	beq.w	8006a86 <_dtoa_r+0x93e>
 80067d0:	2400      	movs	r4, #0
 80067d2:	4625      	mov	r5, r4
 80067d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067d6:	4656      	mov	r6, sl
 80067d8:	43db      	mvns	r3, r3
 80067da:	9304      	str	r3, [sp, #16]
 80067dc:	2700      	movs	r7, #0
 80067de:	4621      	mov	r1, r4
 80067e0:	4658      	mov	r0, fp
 80067e2:	f000 fbb7 	bl	8006f54 <_Bfree>
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	d0dc      	beq.n	80067a4 <_dtoa_r+0x65c>
 80067ea:	b12f      	cbz	r7, 80067f8 <_dtoa_r+0x6b0>
 80067ec:	42af      	cmp	r7, r5
 80067ee:	d003      	beq.n	80067f8 <_dtoa_r+0x6b0>
 80067f0:	4639      	mov	r1, r7
 80067f2:	4658      	mov	r0, fp
 80067f4:	f000 fbae 	bl	8006f54 <_Bfree>
 80067f8:	4629      	mov	r1, r5
 80067fa:	4658      	mov	r0, fp
 80067fc:	f000 fbaa 	bl	8006f54 <_Bfree>
 8006800:	e7d0      	b.n	80067a4 <_dtoa_r+0x65c>
 8006802:	9704      	str	r7, [sp, #16]
 8006804:	4633      	mov	r3, r6
 8006806:	461e      	mov	r6, r3
 8006808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800680c:	2a39      	cmp	r2, #57	@ 0x39
 800680e:	d107      	bne.n	8006820 <_dtoa_r+0x6d8>
 8006810:	459a      	cmp	sl, r3
 8006812:	d1f8      	bne.n	8006806 <_dtoa_r+0x6be>
 8006814:	9a04      	ldr	r2, [sp, #16]
 8006816:	3201      	adds	r2, #1
 8006818:	9204      	str	r2, [sp, #16]
 800681a:	2230      	movs	r2, #48	@ 0x30
 800681c:	f88a 2000 	strb.w	r2, [sl]
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	3201      	adds	r2, #1
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	e7bd      	b.n	80067a4 <_dtoa_r+0x65c>
 8006828:	2200      	movs	r2, #0
 800682a:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <_dtoa_r+0x708>)
 800682c:	f7f9 fe54 	bl	80004d8 <__aeabi_dmul>
 8006830:	2200      	movs	r2, #0
 8006832:	2300      	movs	r3, #0
 8006834:	4604      	mov	r4, r0
 8006836:	460d      	mov	r5, r1
 8006838:	f7fa f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800683c:	2800      	cmp	r0, #0
 800683e:	f43f aebc 	beq.w	80065ba <_dtoa_r+0x472>
 8006842:	e6f1      	b.n	8006628 <_dtoa_r+0x4e0>
 8006844:	08008298 	.word	0x08008298
 8006848:	3fe00000 	.word	0x3fe00000
 800684c:	3ff00000 	.word	0x3ff00000
 8006850:	40240000 	.word	0x40240000
 8006854:	40140000 	.word	0x40140000
 8006858:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800685a:	2a00      	cmp	r2, #0
 800685c:	f000 80db 	beq.w	8006a16 <_dtoa_r+0x8ce>
 8006860:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006862:	2a01      	cmp	r2, #1
 8006864:	f300 80bf 	bgt.w	80069e6 <_dtoa_r+0x89e>
 8006868:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800686a:	2a00      	cmp	r2, #0
 800686c:	f000 80b7 	beq.w	80069de <_dtoa_r+0x896>
 8006870:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006874:	4646      	mov	r6, r8
 8006876:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800687a:	2101      	movs	r1, #1
 800687c:	441a      	add	r2, r3
 800687e:	4658      	mov	r0, fp
 8006880:	4498      	add	r8, r3
 8006882:	9209      	str	r2, [sp, #36]	@ 0x24
 8006884:	f000 fc1a 	bl	80070bc <__i2b>
 8006888:	4605      	mov	r5, r0
 800688a:	b15e      	cbz	r6, 80068a4 <_dtoa_r+0x75c>
 800688c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	dd08      	ble.n	80068a4 <_dtoa_r+0x75c>
 8006892:	42b3      	cmp	r3, r6
 8006894:	bfa8      	it	ge
 8006896:	4633      	movge	r3, r6
 8006898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800689a:	eba8 0803 	sub.w	r8, r8, r3
 800689e:	1af6      	subs	r6, r6, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068a6:	b1f3      	cbz	r3, 80068e6 <_dtoa_r+0x79e>
 80068a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80b7 	beq.w	8006a1e <_dtoa_r+0x8d6>
 80068b0:	b18c      	cbz	r4, 80068d6 <_dtoa_r+0x78e>
 80068b2:	4629      	mov	r1, r5
 80068b4:	4622      	mov	r2, r4
 80068b6:	4658      	mov	r0, fp
 80068b8:	f000 fcbe 	bl	8007238 <__pow5mult>
 80068bc:	464a      	mov	r2, r9
 80068be:	4601      	mov	r1, r0
 80068c0:	4605      	mov	r5, r0
 80068c2:	4658      	mov	r0, fp
 80068c4:	f000 fc10 	bl	80070e8 <__multiply>
 80068c8:	4649      	mov	r1, r9
 80068ca:	9004      	str	r0, [sp, #16]
 80068cc:	4658      	mov	r0, fp
 80068ce:	f000 fb41 	bl	8006f54 <_Bfree>
 80068d2:	9b04      	ldr	r3, [sp, #16]
 80068d4:	4699      	mov	r9, r3
 80068d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068d8:	1b1a      	subs	r2, r3, r4
 80068da:	d004      	beq.n	80068e6 <_dtoa_r+0x79e>
 80068dc:	4649      	mov	r1, r9
 80068de:	4658      	mov	r0, fp
 80068e0:	f000 fcaa 	bl	8007238 <__pow5mult>
 80068e4:	4681      	mov	r9, r0
 80068e6:	2101      	movs	r1, #1
 80068e8:	4658      	mov	r0, fp
 80068ea:	f000 fbe7 	bl	80070bc <__i2b>
 80068ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068f0:	4604      	mov	r4, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 81c9 	beq.w	8006c8a <_dtoa_r+0xb42>
 80068f8:	461a      	mov	r2, r3
 80068fa:	4601      	mov	r1, r0
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fc9b 	bl	8007238 <__pow5mult>
 8006902:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006904:	4604      	mov	r4, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	f300 808f 	bgt.w	8006a2a <_dtoa_r+0x8e2>
 800690c:	9b02      	ldr	r3, [sp, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 8087 	bne.w	8006a22 <_dtoa_r+0x8da>
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 8083 	bne.w	8006a26 <_dtoa_r+0x8de>
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006926:	0d1b      	lsrs	r3, r3, #20
 8006928:	051b      	lsls	r3, r3, #20
 800692a:	b12b      	cbz	r3, 8006938 <_dtoa_r+0x7f0>
 800692c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800692e:	f108 0801 	add.w	r8, r8, #1
 8006932:	3301      	adds	r3, #1
 8006934:	9309      	str	r3, [sp, #36]	@ 0x24
 8006936:	2301      	movs	r3, #1
 8006938:	930a      	str	r3, [sp, #40]	@ 0x28
 800693a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 81aa 	beq.w	8006c96 <_dtoa_r+0xb4e>
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006948:	6918      	ldr	r0, [r3, #16]
 800694a:	f000 fb6b 	bl	8007024 <__hi0bits>
 800694e:	f1c0 0020 	rsb	r0, r0, #32
 8006952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006954:	4418      	add	r0, r3
 8006956:	f010 001f 	ands.w	r0, r0, #31
 800695a:	d071      	beq.n	8006a40 <_dtoa_r+0x8f8>
 800695c:	f1c0 0320 	rsb	r3, r0, #32
 8006960:	2b04      	cmp	r3, #4
 8006962:	dd65      	ble.n	8006a30 <_dtoa_r+0x8e8>
 8006964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006966:	f1c0 001c 	rsb	r0, r0, #28
 800696a:	4403      	add	r3, r0
 800696c:	4480      	add	r8, r0
 800696e:	4406      	add	r6, r0
 8006970:	9309      	str	r3, [sp, #36]	@ 0x24
 8006972:	f1b8 0f00 	cmp.w	r8, #0
 8006976:	dd05      	ble.n	8006984 <_dtoa_r+0x83c>
 8006978:	4649      	mov	r1, r9
 800697a:	4642      	mov	r2, r8
 800697c:	4658      	mov	r0, fp
 800697e:	f000 fcb5 	bl	80072ec <__lshift>
 8006982:	4681      	mov	r9, r0
 8006984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	dd05      	ble.n	8006996 <_dtoa_r+0x84e>
 800698a:	4621      	mov	r1, r4
 800698c:	461a      	mov	r2, r3
 800698e:	4658      	mov	r0, fp
 8006990:	f000 fcac 	bl	80072ec <__lshift>
 8006994:	4604      	mov	r4, r0
 8006996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d053      	beq.n	8006a44 <_dtoa_r+0x8fc>
 800699c:	4621      	mov	r1, r4
 800699e:	4648      	mov	r0, r9
 80069a0:	f000 fd10 	bl	80073c4 <__mcmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	da4d      	bge.n	8006a44 <_dtoa_r+0x8fc>
 80069a8:	1e7b      	subs	r3, r7, #1
 80069aa:	4649      	mov	r1, r9
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	220a      	movs	r2, #10
 80069b0:	2300      	movs	r3, #0
 80069b2:	4658      	mov	r0, fp
 80069b4:	f000 faf0 	bl	8006f98 <__multadd>
 80069b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069ba:	4681      	mov	r9, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 816c 	beq.w	8006c9a <_dtoa_r+0xb52>
 80069c2:	2300      	movs	r3, #0
 80069c4:	4629      	mov	r1, r5
 80069c6:	220a      	movs	r2, #10
 80069c8:	4658      	mov	r0, fp
 80069ca:	f000 fae5 	bl	8006f98 <__multadd>
 80069ce:	9b08      	ldr	r3, [sp, #32]
 80069d0:	4605      	mov	r5, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dc61      	bgt.n	8006a9a <_dtoa_r+0x952>
 80069d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069d8:	2b02      	cmp	r3, #2
 80069da:	dc3b      	bgt.n	8006a54 <_dtoa_r+0x90c>
 80069dc:	e05d      	b.n	8006a9a <_dtoa_r+0x952>
 80069de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069e4:	e746      	b.n	8006874 <_dtoa_r+0x72c>
 80069e6:	9b07      	ldr	r3, [sp, #28]
 80069e8:	1e5c      	subs	r4, r3, #1
 80069ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ec:	42a3      	cmp	r3, r4
 80069ee:	bfbf      	itttt	lt
 80069f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80069f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80069f4:	1ae3      	sublt	r3, r4, r3
 80069f6:	18d2      	addlt	r2, r2, r3
 80069f8:	bfa8      	it	ge
 80069fa:	1b1c      	subge	r4, r3, r4
 80069fc:	9b07      	ldr	r3, [sp, #28]
 80069fe:	bfbe      	ittt	lt
 8006a00:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a02:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a04:	2400      	movlt	r4, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfb5      	itete	lt
 8006a0a:	eba8 0603 	sublt.w	r6, r8, r3
 8006a0e:	4646      	movge	r6, r8
 8006a10:	2300      	movlt	r3, #0
 8006a12:	9b07      	ldrge	r3, [sp, #28]
 8006a14:	e730      	b.n	8006878 <_dtoa_r+0x730>
 8006a16:	4646      	mov	r6, r8
 8006a18:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a1a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a1c:	e735      	b.n	800688a <_dtoa_r+0x742>
 8006a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a20:	e75c      	b.n	80068dc <_dtoa_r+0x794>
 8006a22:	2300      	movs	r3, #0
 8006a24:	e788      	b.n	8006938 <_dtoa_r+0x7f0>
 8006a26:	9b02      	ldr	r3, [sp, #8]
 8006a28:	e786      	b.n	8006938 <_dtoa_r+0x7f0>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a2e:	e788      	b.n	8006942 <_dtoa_r+0x7fa>
 8006a30:	d09f      	beq.n	8006972 <_dtoa_r+0x82a>
 8006a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a34:	331c      	adds	r3, #28
 8006a36:	441a      	add	r2, r3
 8006a38:	4498      	add	r8, r3
 8006a3a:	441e      	add	r6, r3
 8006a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a3e:	e798      	b.n	8006972 <_dtoa_r+0x82a>
 8006a40:	4603      	mov	r3, r0
 8006a42:	e7f6      	b.n	8006a32 <_dtoa_r+0x8ea>
 8006a44:	9b07      	ldr	r3, [sp, #28]
 8006a46:	9704      	str	r7, [sp, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc20      	bgt.n	8006a8e <_dtoa_r+0x946>
 8006a4c:	9308      	str	r3, [sp, #32]
 8006a4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	dd1e      	ble.n	8006a92 <_dtoa_r+0x94a>
 8006a54:	9b08      	ldr	r3, [sp, #32]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f47f aebc 	bne.w	80067d4 <_dtoa_r+0x68c>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	2205      	movs	r2, #5
 8006a60:	4658      	mov	r0, fp
 8006a62:	f000 fa99 	bl	8006f98 <__multadd>
 8006a66:	4601      	mov	r1, r0
 8006a68:	4604      	mov	r4, r0
 8006a6a:	4648      	mov	r0, r9
 8006a6c:	f000 fcaa 	bl	80073c4 <__mcmp>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f77f aeaf 	ble.w	80067d4 <_dtoa_r+0x68c>
 8006a76:	2331      	movs	r3, #49	@ 0x31
 8006a78:	4656      	mov	r6, sl
 8006a7a:	f806 3b01 	strb.w	r3, [r6], #1
 8006a7e:	9b04      	ldr	r3, [sp, #16]
 8006a80:	3301      	adds	r3, #1
 8006a82:	9304      	str	r3, [sp, #16]
 8006a84:	e6aa      	b.n	80067dc <_dtoa_r+0x694>
 8006a86:	9c07      	ldr	r4, [sp, #28]
 8006a88:	9704      	str	r7, [sp, #16]
 8006a8a:	4625      	mov	r5, r4
 8006a8c:	e7f3      	b.n	8006a76 <_dtoa_r+0x92e>
 8006a8e:	9b07      	ldr	r3, [sp, #28]
 8006a90:	9308      	str	r3, [sp, #32]
 8006a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8104 	beq.w	8006ca2 <_dtoa_r+0xb5a>
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	dd05      	ble.n	8006aaa <_dtoa_r+0x962>
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	4658      	mov	r0, fp
 8006aa4:	f000 fc22 	bl	80072ec <__lshift>
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d05a      	beq.n	8006b66 <_dtoa_r+0xa1e>
 8006ab0:	4658      	mov	r0, fp
 8006ab2:	6869      	ldr	r1, [r5, #4]
 8006ab4:	f000 fa0e 	bl	8006ed4 <_Balloc>
 8006ab8:	4606      	mov	r6, r0
 8006aba:	b928      	cbnz	r0, 8006ac8 <_dtoa_r+0x980>
 8006abc:	4602      	mov	r2, r0
 8006abe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ac2:	4b83      	ldr	r3, [pc, #524]	@ (8006cd0 <_dtoa_r+0xb88>)
 8006ac4:	f7ff bb54 	b.w	8006170 <_dtoa_r+0x28>
 8006ac8:	692a      	ldr	r2, [r5, #16]
 8006aca:	f105 010c 	add.w	r1, r5, #12
 8006ace:	3202      	adds	r2, #2
 8006ad0:	0092      	lsls	r2, r2, #2
 8006ad2:	300c      	adds	r0, #12
 8006ad4:	f000 ffa8 	bl	8007a28 <memcpy>
 8006ad8:	2201      	movs	r2, #1
 8006ada:	4631      	mov	r1, r6
 8006adc:	4658      	mov	r0, fp
 8006ade:	f000 fc05 	bl	80072ec <__lshift>
 8006ae2:	462f      	mov	r7, r5
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	f10a 0301 	add.w	r3, sl, #1
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	9b08      	ldr	r3, [sp, #32]
 8006aee:	4453      	add	r3, sl
 8006af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006af2:	9b02      	ldr	r3, [sp, #8]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006afa:	9b07      	ldr	r3, [sp, #28]
 8006afc:	4621      	mov	r1, r4
 8006afe:	3b01      	subs	r3, #1
 8006b00:	4648      	mov	r0, r9
 8006b02:	9302      	str	r3, [sp, #8]
 8006b04:	f7ff fa95 	bl	8006032 <quorem>
 8006b08:	4639      	mov	r1, r7
 8006b0a:	9008      	str	r0, [sp, #32]
 8006b0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b10:	4648      	mov	r0, r9
 8006b12:	f000 fc57 	bl	80073c4 <__mcmp>
 8006b16:	462a      	mov	r2, r5
 8006b18:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4658      	mov	r0, fp
 8006b1e:	f000 fc6d 	bl	80073fc <__mdiff>
 8006b22:	68c2      	ldr	r2, [r0, #12]
 8006b24:	4606      	mov	r6, r0
 8006b26:	bb02      	cbnz	r2, 8006b6a <_dtoa_r+0xa22>
 8006b28:	4601      	mov	r1, r0
 8006b2a:	4648      	mov	r0, r9
 8006b2c:	f000 fc4a 	bl	80073c4 <__mcmp>
 8006b30:	4602      	mov	r2, r0
 8006b32:	4631      	mov	r1, r6
 8006b34:	4658      	mov	r0, fp
 8006b36:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b38:	f000 fa0c 	bl	8006f54 <_Bfree>
 8006b3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b40:	9e07      	ldr	r6, [sp, #28]
 8006b42:	ea43 0102 	orr.w	r1, r3, r2
 8006b46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b48:	4319      	orrs	r1, r3
 8006b4a:	d110      	bne.n	8006b6e <_dtoa_r+0xa26>
 8006b4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b50:	d029      	beq.n	8006ba6 <_dtoa_r+0xa5e>
 8006b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd02      	ble.n	8006b5e <_dtoa_r+0xa16>
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b5e:	9b02      	ldr	r3, [sp, #8]
 8006b60:	f883 8000 	strb.w	r8, [r3]
 8006b64:	e63b      	b.n	80067de <_dtoa_r+0x696>
 8006b66:	4628      	mov	r0, r5
 8006b68:	e7bb      	b.n	8006ae2 <_dtoa_r+0x99a>
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	e7e1      	b.n	8006b32 <_dtoa_r+0x9ea>
 8006b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db04      	blt.n	8006b7e <_dtoa_r+0xa36>
 8006b74:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006b76:	430b      	orrs	r3, r1
 8006b78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	d120      	bne.n	8006bc0 <_dtoa_r+0xa78>
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	dded      	ble.n	8006b5e <_dtoa_r+0xa16>
 8006b82:	4649      	mov	r1, r9
 8006b84:	2201      	movs	r2, #1
 8006b86:	4658      	mov	r0, fp
 8006b88:	f000 fbb0 	bl	80072ec <__lshift>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4681      	mov	r9, r0
 8006b90:	f000 fc18 	bl	80073c4 <__mcmp>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	dc03      	bgt.n	8006ba0 <_dtoa_r+0xa58>
 8006b98:	d1e1      	bne.n	8006b5e <_dtoa_r+0xa16>
 8006b9a:	f018 0f01 	tst.w	r8, #1
 8006b9e:	d0de      	beq.n	8006b5e <_dtoa_r+0xa16>
 8006ba0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ba4:	d1d8      	bne.n	8006b58 <_dtoa_r+0xa10>
 8006ba6:	2339      	movs	r3, #57	@ 0x39
 8006ba8:	9a02      	ldr	r2, [sp, #8]
 8006baa:	7013      	strb	r3, [r2, #0]
 8006bac:	4633      	mov	r3, r6
 8006bae:	461e      	mov	r6, r3
 8006bb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	2a39      	cmp	r2, #57	@ 0x39
 8006bb8:	d052      	beq.n	8006c60 <_dtoa_r+0xb18>
 8006bba:	3201      	adds	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e60e      	b.n	80067de <_dtoa_r+0x696>
 8006bc0:	2a00      	cmp	r2, #0
 8006bc2:	dd07      	ble.n	8006bd4 <_dtoa_r+0xa8c>
 8006bc4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bc8:	d0ed      	beq.n	8006ba6 <_dtoa_r+0xa5e>
 8006bca:	9a02      	ldr	r2, [sp, #8]
 8006bcc:	f108 0301 	add.w	r3, r8, #1
 8006bd0:	7013      	strb	r3, [r2, #0]
 8006bd2:	e604      	b.n	80067de <_dtoa_r+0x696>
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	9a07      	ldr	r2, [sp, #28]
 8006bd8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d028      	beq.n	8006c34 <_dtoa_r+0xaec>
 8006be2:	4649      	mov	r1, r9
 8006be4:	2300      	movs	r3, #0
 8006be6:	220a      	movs	r2, #10
 8006be8:	4658      	mov	r0, fp
 8006bea:	f000 f9d5 	bl	8006f98 <__multadd>
 8006bee:	42af      	cmp	r7, r5
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	f04f 020a 	mov.w	r2, #10
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	4658      	mov	r0, fp
 8006bfe:	d107      	bne.n	8006c10 <_dtoa_r+0xac8>
 8006c00:	f000 f9ca 	bl	8006f98 <__multadd>
 8006c04:	4607      	mov	r7, r0
 8006c06:	4605      	mov	r5, r0
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	9307      	str	r3, [sp, #28]
 8006c0e:	e774      	b.n	8006afa <_dtoa_r+0x9b2>
 8006c10:	f000 f9c2 	bl	8006f98 <__multadd>
 8006c14:	4629      	mov	r1, r5
 8006c16:	4607      	mov	r7, r0
 8006c18:	2300      	movs	r3, #0
 8006c1a:	220a      	movs	r2, #10
 8006c1c:	4658      	mov	r0, fp
 8006c1e:	f000 f9bb 	bl	8006f98 <__multadd>
 8006c22:	4605      	mov	r5, r0
 8006c24:	e7f0      	b.n	8006c08 <_dtoa_r+0xac0>
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	2700      	movs	r7, #0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfcc      	ite	gt
 8006c2e:	461e      	movgt	r6, r3
 8006c30:	2601      	movle	r6, #1
 8006c32:	4456      	add	r6, sl
 8006c34:	4649      	mov	r1, r9
 8006c36:	2201      	movs	r2, #1
 8006c38:	4658      	mov	r0, fp
 8006c3a:	f000 fb57 	bl	80072ec <__lshift>
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4681      	mov	r9, r0
 8006c42:	f000 fbbf 	bl	80073c4 <__mcmp>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	dcb0      	bgt.n	8006bac <_dtoa_r+0xa64>
 8006c4a:	d102      	bne.n	8006c52 <_dtoa_r+0xb0a>
 8006c4c:	f018 0f01 	tst.w	r8, #1
 8006c50:	d1ac      	bne.n	8006bac <_dtoa_r+0xa64>
 8006c52:	4633      	mov	r3, r6
 8006c54:	461e      	mov	r6, r3
 8006c56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5a:	2a30      	cmp	r2, #48	@ 0x30
 8006c5c:	d0fa      	beq.n	8006c54 <_dtoa_r+0xb0c>
 8006c5e:	e5be      	b.n	80067de <_dtoa_r+0x696>
 8006c60:	459a      	cmp	sl, r3
 8006c62:	d1a4      	bne.n	8006bae <_dtoa_r+0xa66>
 8006c64:	9b04      	ldr	r3, [sp, #16]
 8006c66:	3301      	adds	r3, #1
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	2331      	movs	r3, #49	@ 0x31
 8006c6c:	f88a 3000 	strb.w	r3, [sl]
 8006c70:	e5b5      	b.n	80067de <_dtoa_r+0x696>
 8006c72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c74:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006cd4 <_dtoa_r+0xb8c>
 8006c78:	b11b      	cbz	r3, 8006c82 <_dtoa_r+0xb3a>
 8006c7a:	f10a 0308 	add.w	r3, sl, #8
 8006c7e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	4650      	mov	r0, sl
 8006c84:	b017      	add	sp, #92	@ 0x5c
 8006c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	f77f ae3d 	ble.w	800690c <_dtoa_r+0x7c4>
 8006c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c94:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c96:	2001      	movs	r0, #1
 8006c98:	e65b      	b.n	8006952 <_dtoa_r+0x80a>
 8006c9a:	9b08      	ldr	r3, [sp, #32]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f77f aed6 	ble.w	8006a4e <_dtoa_r+0x906>
 8006ca2:	4656      	mov	r6, sl
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	f7ff f9c3 	bl	8006032 <quorem>
 8006cac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006cb0:	9b08      	ldr	r3, [sp, #32]
 8006cb2:	f806 8b01 	strb.w	r8, [r6], #1
 8006cb6:	eba6 020a 	sub.w	r2, r6, sl
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	ddb3      	ble.n	8006c26 <_dtoa_r+0xade>
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	220a      	movs	r2, #10
 8006cc4:	4658      	mov	r0, fp
 8006cc6:	f000 f967 	bl	8006f98 <__multadd>
 8006cca:	4681      	mov	r9, r0
 8006ccc:	e7ea      	b.n	8006ca4 <_dtoa_r+0xb5c>
 8006cce:	bf00      	nop
 8006cd0:	080081f6 	.word	0x080081f6
 8006cd4:	0800817a 	.word	0x0800817a

08006cd8 <_free_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4605      	mov	r5, r0
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d040      	beq.n	8006d62 <_free_r+0x8a>
 8006ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce4:	1f0c      	subs	r4, r1, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bfb8      	it	lt
 8006cea:	18e4      	addlt	r4, r4, r3
 8006cec:	f000 f8e6 	bl	8006ebc <__malloc_lock>
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <_free_r+0x8c>)
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	b933      	cbnz	r3, 8006d04 <_free_r+0x2c>
 8006cf6:	6063      	str	r3, [r4, #4]
 8006cf8:	6014      	str	r4, [r2, #0]
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d00:	f000 b8e2 	b.w	8006ec8 <__malloc_unlock>
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	d908      	bls.n	8006d1a <_free_r+0x42>
 8006d08:	6820      	ldr	r0, [r4, #0]
 8006d0a:	1821      	adds	r1, r4, r0
 8006d0c:	428b      	cmp	r3, r1
 8006d0e:	bf01      	itttt	eq
 8006d10:	6819      	ldreq	r1, [r3, #0]
 8006d12:	685b      	ldreq	r3, [r3, #4]
 8006d14:	1809      	addeq	r1, r1, r0
 8006d16:	6021      	streq	r1, [r4, #0]
 8006d18:	e7ed      	b.n	8006cf6 <_free_r+0x1e>
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	b10b      	cbz	r3, 8006d24 <_free_r+0x4c>
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d9fa      	bls.n	8006d1a <_free_r+0x42>
 8006d24:	6811      	ldr	r1, [r2, #0]
 8006d26:	1850      	adds	r0, r2, r1
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d10b      	bne.n	8006d44 <_free_r+0x6c>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	4401      	add	r1, r0
 8006d30:	1850      	adds	r0, r2, r1
 8006d32:	4283      	cmp	r3, r0
 8006d34:	6011      	str	r1, [r2, #0]
 8006d36:	d1e0      	bne.n	8006cfa <_free_r+0x22>
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4408      	add	r0, r1
 8006d3e:	6010      	str	r0, [r2, #0]
 8006d40:	6053      	str	r3, [r2, #4]
 8006d42:	e7da      	b.n	8006cfa <_free_r+0x22>
 8006d44:	d902      	bls.n	8006d4c <_free_r+0x74>
 8006d46:	230c      	movs	r3, #12
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	e7d6      	b.n	8006cfa <_free_r+0x22>
 8006d4c:	6820      	ldr	r0, [r4, #0]
 8006d4e:	1821      	adds	r1, r4, r0
 8006d50:	428b      	cmp	r3, r1
 8006d52:	bf01      	itttt	eq
 8006d54:	6819      	ldreq	r1, [r3, #0]
 8006d56:	685b      	ldreq	r3, [r3, #4]
 8006d58:	1809      	addeq	r1, r1, r0
 8006d5a:	6021      	streq	r1, [r4, #0]
 8006d5c:	6063      	str	r3, [r4, #4]
 8006d5e:	6054      	str	r4, [r2, #4]
 8006d60:	e7cb      	b.n	8006cfa <_free_r+0x22>
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	2000054c 	.word	0x2000054c

08006d68 <malloc>:
 8006d68:	4b02      	ldr	r3, [pc, #8]	@ (8006d74 <malloc+0xc>)
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	f000 b825 	b.w	8006dbc <_malloc_r>
 8006d72:	bf00      	nop
 8006d74:	20000020 	.word	0x20000020

08006d78 <sbrk_aligned>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4e0f      	ldr	r6, [pc, #60]	@ (8006db8 <sbrk_aligned+0x40>)
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	6831      	ldr	r1, [r6, #0]
 8006d80:	4605      	mov	r5, r0
 8006d82:	b911      	cbnz	r1, 8006d8a <sbrk_aligned+0x12>
 8006d84:	f000 fe40 	bl	8007a08 <_sbrk_r>
 8006d88:	6030      	str	r0, [r6, #0]
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 fe3b 	bl	8007a08 <_sbrk_r>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d103      	bne.n	8006d9e <sbrk_aligned+0x26>
 8006d96:	f04f 34ff 	mov.w	r4, #4294967295
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	bd70      	pop	{r4, r5, r6, pc}
 8006d9e:	1cc4      	adds	r4, r0, #3
 8006da0:	f024 0403 	bic.w	r4, r4, #3
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d0f8      	beq.n	8006d9a <sbrk_aligned+0x22>
 8006da8:	1a21      	subs	r1, r4, r0
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 fe2c 	bl	8007a08 <_sbrk_r>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d1f2      	bne.n	8006d9a <sbrk_aligned+0x22>
 8006db4:	e7ef      	b.n	8006d96 <sbrk_aligned+0x1e>
 8006db6:	bf00      	nop
 8006db8:	20000548 	.word	0x20000548

08006dbc <_malloc_r>:
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	1ccd      	adds	r5, r1, #3
 8006dc2:	f025 0503 	bic.w	r5, r5, #3
 8006dc6:	3508      	adds	r5, #8
 8006dc8:	2d0c      	cmp	r5, #12
 8006dca:	bf38      	it	cc
 8006dcc:	250c      	movcc	r5, #12
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	db01      	blt.n	8006dd8 <_malloc_r+0x1c>
 8006dd4:	42a9      	cmp	r1, r5
 8006dd6:	d904      	bls.n	8006de2 <_malloc_r+0x26>
 8006dd8:	230c      	movs	r3, #12
 8006dda:	6033      	str	r3, [r6, #0]
 8006ddc:	2000      	movs	r0, #0
 8006dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006eb8 <_malloc_r+0xfc>
 8006de6:	f000 f869 	bl	8006ebc <__malloc_lock>
 8006dea:	f8d8 3000 	ldr.w	r3, [r8]
 8006dee:	461c      	mov	r4, r3
 8006df0:	bb44      	cbnz	r4, 8006e44 <_malloc_r+0x88>
 8006df2:	4629      	mov	r1, r5
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff ffbf 	bl	8006d78 <sbrk_aligned>
 8006dfa:	1c43      	adds	r3, r0, #1
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	d158      	bne.n	8006eb2 <_malloc_r+0xf6>
 8006e00:	f8d8 4000 	ldr.w	r4, [r8]
 8006e04:	4627      	mov	r7, r4
 8006e06:	2f00      	cmp	r7, #0
 8006e08:	d143      	bne.n	8006e92 <_malloc_r+0xd6>
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	d04b      	beq.n	8006ea6 <_malloc_r+0xea>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	4639      	mov	r1, r7
 8006e12:	4630      	mov	r0, r6
 8006e14:	eb04 0903 	add.w	r9, r4, r3
 8006e18:	f000 fdf6 	bl	8007a08 <_sbrk_r>
 8006e1c:	4581      	cmp	r9, r0
 8006e1e:	d142      	bne.n	8006ea6 <_malloc_r+0xea>
 8006e20:	6821      	ldr	r1, [r4, #0]
 8006e22:	4630      	mov	r0, r6
 8006e24:	1a6d      	subs	r5, r5, r1
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7ff ffa6 	bl	8006d78 <sbrk_aligned>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d03a      	beq.n	8006ea6 <_malloc_r+0xea>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	442b      	add	r3, r5
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	f8d8 3000 	ldr.w	r3, [r8]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	bb62      	cbnz	r2, 8006e98 <_malloc_r+0xdc>
 8006e3e:	f8c8 7000 	str.w	r7, [r8]
 8006e42:	e00f      	b.n	8006e64 <_malloc_r+0xa8>
 8006e44:	6822      	ldr	r2, [r4, #0]
 8006e46:	1b52      	subs	r2, r2, r5
 8006e48:	d420      	bmi.n	8006e8c <_malloc_r+0xd0>
 8006e4a:	2a0b      	cmp	r2, #11
 8006e4c:	d917      	bls.n	8006e7e <_malloc_r+0xc2>
 8006e4e:	1961      	adds	r1, r4, r5
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	6025      	str	r5, [r4, #0]
 8006e54:	bf18      	it	ne
 8006e56:	6059      	strne	r1, [r3, #4]
 8006e58:	6863      	ldr	r3, [r4, #4]
 8006e5a:	bf08      	it	eq
 8006e5c:	f8c8 1000 	streq.w	r1, [r8]
 8006e60:	5162      	str	r2, [r4, r5]
 8006e62:	604b      	str	r3, [r1, #4]
 8006e64:	4630      	mov	r0, r6
 8006e66:	f000 f82f 	bl	8006ec8 <__malloc_unlock>
 8006e6a:	f104 000b 	add.w	r0, r4, #11
 8006e6e:	1d23      	adds	r3, r4, #4
 8006e70:	f020 0007 	bic.w	r0, r0, #7
 8006e74:	1ac2      	subs	r2, r0, r3
 8006e76:	bf1c      	itt	ne
 8006e78:	1a1b      	subne	r3, r3, r0
 8006e7a:	50a3      	strne	r3, [r4, r2]
 8006e7c:	e7af      	b.n	8006dde <_malloc_r+0x22>
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	bf0c      	ite	eq
 8006e84:	f8c8 2000 	streq.w	r2, [r8]
 8006e88:	605a      	strne	r2, [r3, #4]
 8006e8a:	e7eb      	b.n	8006e64 <_malloc_r+0xa8>
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	6864      	ldr	r4, [r4, #4]
 8006e90:	e7ae      	b.n	8006df0 <_malloc_r+0x34>
 8006e92:	463c      	mov	r4, r7
 8006e94:	687f      	ldr	r7, [r7, #4]
 8006e96:	e7b6      	b.n	8006e06 <_malloc_r+0x4a>
 8006e98:	461a      	mov	r2, r3
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d1fb      	bne.n	8006e98 <_malloc_r+0xdc>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6053      	str	r3, [r2, #4]
 8006ea4:	e7de      	b.n	8006e64 <_malloc_r+0xa8>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	6033      	str	r3, [r6, #0]
 8006eac:	f000 f80c 	bl	8006ec8 <__malloc_unlock>
 8006eb0:	e794      	b.n	8006ddc <_malloc_r+0x20>
 8006eb2:	6005      	str	r5, [r0, #0]
 8006eb4:	e7d6      	b.n	8006e64 <_malloc_r+0xa8>
 8006eb6:	bf00      	nop
 8006eb8:	2000054c 	.word	0x2000054c

08006ebc <__malloc_lock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	@ (8006ec4 <__malloc_lock+0x8>)
 8006ebe:	f7ff b8a8 	b.w	8006012 <__retarget_lock_acquire_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	20000544 	.word	0x20000544

08006ec8 <__malloc_unlock>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	@ (8006ed0 <__malloc_unlock+0x8>)
 8006eca:	f7ff b8a3 	b.w	8006014 <__retarget_lock_release_recursive>
 8006ece:	bf00      	nop
 8006ed0:	20000544 	.word	0x20000544

08006ed4 <_Balloc>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	69c6      	ldr	r6, [r0, #28]
 8006ed8:	4604      	mov	r4, r0
 8006eda:	460d      	mov	r5, r1
 8006edc:	b976      	cbnz	r6, 8006efc <_Balloc+0x28>
 8006ede:	2010      	movs	r0, #16
 8006ee0:	f7ff ff42 	bl	8006d68 <malloc>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	61e0      	str	r0, [r4, #28]
 8006ee8:	b920      	cbnz	r0, 8006ef4 <_Balloc+0x20>
 8006eea:	216b      	movs	r1, #107	@ 0x6b
 8006eec:	4b17      	ldr	r3, [pc, #92]	@ (8006f4c <_Balloc+0x78>)
 8006eee:	4818      	ldr	r0, [pc, #96]	@ (8006f50 <_Balloc+0x7c>)
 8006ef0:	f000 fda8 	bl	8007a44 <__assert_func>
 8006ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ef8:	6006      	str	r6, [r0, #0]
 8006efa:	60c6      	str	r6, [r0, #12]
 8006efc:	69e6      	ldr	r6, [r4, #28]
 8006efe:	68f3      	ldr	r3, [r6, #12]
 8006f00:	b183      	cbz	r3, 8006f24 <_Balloc+0x50>
 8006f02:	69e3      	ldr	r3, [r4, #28]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f0a:	b9b8      	cbnz	r0, 8006f3c <_Balloc+0x68>
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f12:	1d72      	adds	r2, r6, #5
 8006f14:	4620      	mov	r0, r4
 8006f16:	0092      	lsls	r2, r2, #2
 8006f18:	f000 fdb2 	bl	8007a80 <_calloc_r>
 8006f1c:	b160      	cbz	r0, 8006f38 <_Balloc+0x64>
 8006f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f22:	e00e      	b.n	8006f42 <_Balloc+0x6e>
 8006f24:	2221      	movs	r2, #33	@ 0x21
 8006f26:	2104      	movs	r1, #4
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fda9 	bl	8007a80 <_calloc_r>
 8006f2e:	69e3      	ldr	r3, [r4, #28]
 8006f30:	60f0      	str	r0, [r6, #12]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e4      	bne.n	8006f02 <_Balloc+0x2e>
 8006f38:	2000      	movs	r0, #0
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	6802      	ldr	r2, [r0, #0]
 8006f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f42:	2300      	movs	r3, #0
 8006f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f48:	e7f7      	b.n	8006f3a <_Balloc+0x66>
 8006f4a:	bf00      	nop
 8006f4c:	08008187 	.word	0x08008187
 8006f50:	08008207 	.word	0x08008207

08006f54 <_Bfree>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	69c6      	ldr	r6, [r0, #28]
 8006f58:	4605      	mov	r5, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	b976      	cbnz	r6, 8006f7c <_Bfree+0x28>
 8006f5e:	2010      	movs	r0, #16
 8006f60:	f7ff ff02 	bl	8006d68 <malloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	61e8      	str	r0, [r5, #28]
 8006f68:	b920      	cbnz	r0, 8006f74 <_Bfree+0x20>
 8006f6a:	218f      	movs	r1, #143	@ 0x8f
 8006f6c:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <_Bfree+0x3c>)
 8006f6e:	4809      	ldr	r0, [pc, #36]	@ (8006f94 <_Bfree+0x40>)
 8006f70:	f000 fd68 	bl	8007a44 <__assert_func>
 8006f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f78:	6006      	str	r6, [r0, #0]
 8006f7a:	60c6      	str	r6, [r0, #12]
 8006f7c:	b13c      	cbz	r4, 8006f8e <_Bfree+0x3a>
 8006f7e:	69eb      	ldr	r3, [r5, #28]
 8006f80:	6862      	ldr	r2, [r4, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f88:	6021      	str	r1, [r4, #0]
 8006f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	08008187 	.word	0x08008187
 8006f94:	08008207 	.word	0x08008207

08006f98 <__multadd>:
 8006f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	461e      	mov	r6, r3
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	690d      	ldr	r5, [r1, #16]
 8006fa6:	f101 0c14 	add.w	ip, r1, #20
 8006faa:	f8dc 3000 	ldr.w	r3, [ip]
 8006fae:	3001      	adds	r0, #1
 8006fb0:	b299      	uxth	r1, r3
 8006fb2:	fb02 6101 	mla	r1, r2, r1, r6
 8006fb6:	0c1e      	lsrs	r6, r3, #16
 8006fb8:	0c0b      	lsrs	r3, r1, #16
 8006fba:	fb02 3306 	mla	r3, r2, r6, r3
 8006fbe:	b289      	uxth	r1, r1
 8006fc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fc4:	4285      	cmp	r5, r0
 8006fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fca:	f84c 1b04 	str.w	r1, [ip], #4
 8006fce:	dcec      	bgt.n	8006faa <__multadd+0x12>
 8006fd0:	b30e      	cbz	r6, 8007016 <__multadd+0x7e>
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	dc19      	bgt.n	800700c <__multadd+0x74>
 8006fd8:	6861      	ldr	r1, [r4, #4]
 8006fda:	4638      	mov	r0, r7
 8006fdc:	3101      	adds	r1, #1
 8006fde:	f7ff ff79 	bl	8006ed4 <_Balloc>
 8006fe2:	4680      	mov	r8, r0
 8006fe4:	b928      	cbnz	r0, 8006ff2 <__multadd+0x5a>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	21ba      	movs	r1, #186	@ 0xba
 8006fea:	4b0c      	ldr	r3, [pc, #48]	@ (800701c <__multadd+0x84>)
 8006fec:	480c      	ldr	r0, [pc, #48]	@ (8007020 <__multadd+0x88>)
 8006fee:	f000 fd29 	bl	8007a44 <__assert_func>
 8006ff2:	6922      	ldr	r2, [r4, #16]
 8006ff4:	f104 010c 	add.w	r1, r4, #12
 8006ff8:	3202      	adds	r2, #2
 8006ffa:	0092      	lsls	r2, r2, #2
 8006ffc:	300c      	adds	r0, #12
 8006ffe:	f000 fd13 	bl	8007a28 <memcpy>
 8007002:	4621      	mov	r1, r4
 8007004:	4638      	mov	r0, r7
 8007006:	f7ff ffa5 	bl	8006f54 <_Bfree>
 800700a:	4644      	mov	r4, r8
 800700c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007010:	3501      	adds	r5, #1
 8007012:	615e      	str	r6, [r3, #20]
 8007014:	6125      	str	r5, [r4, #16]
 8007016:	4620      	mov	r0, r4
 8007018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701c:	080081f6 	.word	0x080081f6
 8007020:	08008207 	.word	0x08008207

08007024 <__hi0bits>:
 8007024:	4603      	mov	r3, r0
 8007026:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800702a:	bf3a      	itte	cc
 800702c:	0403      	lslcc	r3, r0, #16
 800702e:	2010      	movcc	r0, #16
 8007030:	2000      	movcs	r0, #0
 8007032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007036:	bf3c      	itt	cc
 8007038:	021b      	lslcc	r3, r3, #8
 800703a:	3008      	addcc	r0, #8
 800703c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007040:	bf3c      	itt	cc
 8007042:	011b      	lslcc	r3, r3, #4
 8007044:	3004      	addcc	r0, #4
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704a:	bf3c      	itt	cc
 800704c:	009b      	lslcc	r3, r3, #2
 800704e:	3002      	addcc	r0, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	db05      	blt.n	8007060 <__hi0bits+0x3c>
 8007054:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007058:	f100 0001 	add.w	r0, r0, #1
 800705c:	bf08      	it	eq
 800705e:	2020      	moveq	r0, #32
 8007060:	4770      	bx	lr

08007062 <__lo0bits>:
 8007062:	6803      	ldr	r3, [r0, #0]
 8007064:	4602      	mov	r2, r0
 8007066:	f013 0007 	ands.w	r0, r3, #7
 800706a:	d00b      	beq.n	8007084 <__lo0bits+0x22>
 800706c:	07d9      	lsls	r1, r3, #31
 800706e:	d421      	bmi.n	80070b4 <__lo0bits+0x52>
 8007070:	0798      	lsls	r0, r3, #30
 8007072:	bf49      	itett	mi
 8007074:	085b      	lsrmi	r3, r3, #1
 8007076:	089b      	lsrpl	r3, r3, #2
 8007078:	2001      	movmi	r0, #1
 800707a:	6013      	strmi	r3, [r2, #0]
 800707c:	bf5c      	itt	pl
 800707e:	2002      	movpl	r0, #2
 8007080:	6013      	strpl	r3, [r2, #0]
 8007082:	4770      	bx	lr
 8007084:	b299      	uxth	r1, r3
 8007086:	b909      	cbnz	r1, 800708c <__lo0bits+0x2a>
 8007088:	2010      	movs	r0, #16
 800708a:	0c1b      	lsrs	r3, r3, #16
 800708c:	b2d9      	uxtb	r1, r3
 800708e:	b909      	cbnz	r1, 8007094 <__lo0bits+0x32>
 8007090:	3008      	adds	r0, #8
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	0719      	lsls	r1, r3, #28
 8007096:	bf04      	itt	eq
 8007098:	091b      	lsreq	r3, r3, #4
 800709a:	3004      	addeq	r0, #4
 800709c:	0799      	lsls	r1, r3, #30
 800709e:	bf04      	itt	eq
 80070a0:	089b      	lsreq	r3, r3, #2
 80070a2:	3002      	addeq	r0, #2
 80070a4:	07d9      	lsls	r1, r3, #31
 80070a6:	d403      	bmi.n	80070b0 <__lo0bits+0x4e>
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	f100 0001 	add.w	r0, r0, #1
 80070ae:	d003      	beq.n	80070b8 <__lo0bits+0x56>
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	4770      	bx	lr
 80070b4:	2000      	movs	r0, #0
 80070b6:	4770      	bx	lr
 80070b8:	2020      	movs	r0, #32
 80070ba:	4770      	bx	lr

080070bc <__i2b>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	460c      	mov	r4, r1
 80070c0:	2101      	movs	r1, #1
 80070c2:	f7ff ff07 	bl	8006ed4 <_Balloc>
 80070c6:	4602      	mov	r2, r0
 80070c8:	b928      	cbnz	r0, 80070d6 <__i2b+0x1a>
 80070ca:	f240 1145 	movw	r1, #325	@ 0x145
 80070ce:	4b04      	ldr	r3, [pc, #16]	@ (80070e0 <__i2b+0x24>)
 80070d0:	4804      	ldr	r0, [pc, #16]	@ (80070e4 <__i2b+0x28>)
 80070d2:	f000 fcb7 	bl	8007a44 <__assert_func>
 80070d6:	2301      	movs	r3, #1
 80070d8:	6144      	str	r4, [r0, #20]
 80070da:	6103      	str	r3, [r0, #16]
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	bf00      	nop
 80070e0:	080081f6 	.word	0x080081f6
 80070e4:	08008207 	.word	0x08008207

080070e8 <__multiply>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	4614      	mov	r4, r2
 80070ee:	690a      	ldr	r2, [r1, #16]
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	460f      	mov	r7, r1
 80070f4:	429a      	cmp	r2, r3
 80070f6:	bfa2      	ittt	ge
 80070f8:	4623      	movge	r3, r4
 80070fa:	460c      	movge	r4, r1
 80070fc:	461f      	movge	r7, r3
 80070fe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007102:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	6861      	ldr	r1, [r4, #4]
 800710a:	eb0a 0609 	add.w	r6, sl, r9
 800710e:	42b3      	cmp	r3, r6
 8007110:	b085      	sub	sp, #20
 8007112:	bfb8      	it	lt
 8007114:	3101      	addlt	r1, #1
 8007116:	f7ff fedd 	bl	8006ed4 <_Balloc>
 800711a:	b930      	cbnz	r0, 800712a <__multiply+0x42>
 800711c:	4602      	mov	r2, r0
 800711e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007122:	4b43      	ldr	r3, [pc, #268]	@ (8007230 <__multiply+0x148>)
 8007124:	4843      	ldr	r0, [pc, #268]	@ (8007234 <__multiply+0x14c>)
 8007126:	f000 fc8d 	bl	8007a44 <__assert_func>
 800712a:	f100 0514 	add.w	r5, r0, #20
 800712e:	462b      	mov	r3, r5
 8007130:	2200      	movs	r2, #0
 8007132:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007136:	4543      	cmp	r3, r8
 8007138:	d321      	bcc.n	800717e <__multiply+0x96>
 800713a:	f107 0114 	add.w	r1, r7, #20
 800713e:	f104 0214 	add.w	r2, r4, #20
 8007142:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007146:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	1b13      	subs	r3, r2, r4
 800714e:	3b15      	subs	r3, #21
 8007150:	f023 0303 	bic.w	r3, r3, #3
 8007154:	3304      	adds	r3, #4
 8007156:	f104 0715 	add.w	r7, r4, #21
 800715a:	42ba      	cmp	r2, r7
 800715c:	bf38      	it	cc
 800715e:	2304      	movcc	r3, #4
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	428b      	cmp	r3, r1
 8007168:	d80c      	bhi.n	8007184 <__multiply+0x9c>
 800716a:	2e00      	cmp	r6, #0
 800716c:	dd03      	ble.n	8007176 <__multiply+0x8e>
 800716e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007172:	2b00      	cmp	r3, #0
 8007174:	d05a      	beq.n	800722c <__multiply+0x144>
 8007176:	6106      	str	r6, [r0, #16]
 8007178:	b005      	add	sp, #20
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	f843 2b04 	str.w	r2, [r3], #4
 8007182:	e7d8      	b.n	8007136 <__multiply+0x4e>
 8007184:	f8b1 a000 	ldrh.w	sl, [r1]
 8007188:	f1ba 0f00 	cmp.w	sl, #0
 800718c:	d023      	beq.n	80071d6 <__multiply+0xee>
 800718e:	46a9      	mov	r9, r5
 8007190:	f04f 0c00 	mov.w	ip, #0
 8007194:	f104 0e14 	add.w	lr, r4, #20
 8007198:	f85e 7b04 	ldr.w	r7, [lr], #4
 800719c:	f8d9 3000 	ldr.w	r3, [r9]
 80071a0:	fa1f fb87 	uxth.w	fp, r7
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80071aa:	4463      	add	r3, ip
 80071ac:	f8d9 c000 	ldr.w	ip, [r9]
 80071b0:	0c3f      	lsrs	r7, r7, #16
 80071b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071b6:	fb0a c707 	mla	r7, sl, r7, ip
 80071ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071c4:	4572      	cmp	r2, lr
 80071c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80071ca:	f849 3b04 	str.w	r3, [r9], #4
 80071ce:	d8e3      	bhi.n	8007198 <__multiply+0xb0>
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	f845 c003 	str.w	ip, [r5, r3]
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	3104      	adds	r1, #4
 80071da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071de:	f1b9 0f00 	cmp.w	r9, #0
 80071e2:	d021      	beq.n	8007228 <__multiply+0x140>
 80071e4:	46ae      	mov	lr, r5
 80071e6:	f04f 0a00 	mov.w	sl, #0
 80071ea:	682b      	ldr	r3, [r5, #0]
 80071ec:	f104 0c14 	add.w	ip, r4, #20
 80071f0:	f8bc b000 	ldrh.w	fp, [ip]
 80071f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	fb09 770b 	mla	r7, r9, fp, r7
 80071fe:	4457      	add	r7, sl
 8007200:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007204:	f84e 3b04 	str.w	r3, [lr], #4
 8007208:	f85c 3b04 	ldr.w	r3, [ip], #4
 800720c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007210:	f8be 3000 	ldrh.w	r3, [lr]
 8007214:	4562      	cmp	r2, ip
 8007216:	fb09 330a 	mla	r3, r9, sl, r3
 800721a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800721e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007222:	d8e5      	bhi.n	80071f0 <__multiply+0x108>
 8007224:	9f01      	ldr	r7, [sp, #4]
 8007226:	51eb      	str	r3, [r5, r7]
 8007228:	3504      	adds	r5, #4
 800722a:	e79a      	b.n	8007162 <__multiply+0x7a>
 800722c:	3e01      	subs	r6, #1
 800722e:	e79c      	b.n	800716a <__multiply+0x82>
 8007230:	080081f6 	.word	0x080081f6
 8007234:	08008207 	.word	0x08008207

08007238 <__pow5mult>:
 8007238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800723c:	4615      	mov	r5, r2
 800723e:	f012 0203 	ands.w	r2, r2, #3
 8007242:	4607      	mov	r7, r0
 8007244:	460e      	mov	r6, r1
 8007246:	d007      	beq.n	8007258 <__pow5mult+0x20>
 8007248:	4c25      	ldr	r4, [pc, #148]	@ (80072e0 <__pow5mult+0xa8>)
 800724a:	3a01      	subs	r2, #1
 800724c:	2300      	movs	r3, #0
 800724e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007252:	f7ff fea1 	bl	8006f98 <__multadd>
 8007256:	4606      	mov	r6, r0
 8007258:	10ad      	asrs	r5, r5, #2
 800725a:	d03d      	beq.n	80072d8 <__pow5mult+0xa0>
 800725c:	69fc      	ldr	r4, [r7, #28]
 800725e:	b97c      	cbnz	r4, 8007280 <__pow5mult+0x48>
 8007260:	2010      	movs	r0, #16
 8007262:	f7ff fd81 	bl	8006d68 <malloc>
 8007266:	4602      	mov	r2, r0
 8007268:	61f8      	str	r0, [r7, #28]
 800726a:	b928      	cbnz	r0, 8007278 <__pow5mult+0x40>
 800726c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007270:	4b1c      	ldr	r3, [pc, #112]	@ (80072e4 <__pow5mult+0xac>)
 8007272:	481d      	ldr	r0, [pc, #116]	@ (80072e8 <__pow5mult+0xb0>)
 8007274:	f000 fbe6 	bl	8007a44 <__assert_func>
 8007278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800727c:	6004      	str	r4, [r0, #0]
 800727e:	60c4      	str	r4, [r0, #12]
 8007280:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007288:	b94c      	cbnz	r4, 800729e <__pow5mult+0x66>
 800728a:	f240 2171 	movw	r1, #625	@ 0x271
 800728e:	4638      	mov	r0, r7
 8007290:	f7ff ff14 	bl	80070bc <__i2b>
 8007294:	2300      	movs	r3, #0
 8007296:	4604      	mov	r4, r0
 8007298:	f8c8 0008 	str.w	r0, [r8, #8]
 800729c:	6003      	str	r3, [r0, #0]
 800729e:	f04f 0900 	mov.w	r9, #0
 80072a2:	07eb      	lsls	r3, r5, #31
 80072a4:	d50a      	bpl.n	80072bc <__pow5mult+0x84>
 80072a6:	4631      	mov	r1, r6
 80072a8:	4622      	mov	r2, r4
 80072aa:	4638      	mov	r0, r7
 80072ac:	f7ff ff1c 	bl	80070e8 <__multiply>
 80072b0:	4680      	mov	r8, r0
 80072b2:	4631      	mov	r1, r6
 80072b4:	4638      	mov	r0, r7
 80072b6:	f7ff fe4d 	bl	8006f54 <_Bfree>
 80072ba:	4646      	mov	r6, r8
 80072bc:	106d      	asrs	r5, r5, #1
 80072be:	d00b      	beq.n	80072d8 <__pow5mult+0xa0>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	b938      	cbnz	r0, 80072d4 <__pow5mult+0x9c>
 80072c4:	4622      	mov	r2, r4
 80072c6:	4621      	mov	r1, r4
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ff0d 	bl	80070e8 <__multiply>
 80072ce:	6020      	str	r0, [r4, #0]
 80072d0:	f8c0 9000 	str.w	r9, [r0]
 80072d4:	4604      	mov	r4, r0
 80072d6:	e7e4      	b.n	80072a2 <__pow5mult+0x6a>
 80072d8:	4630      	mov	r0, r6
 80072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072de:	bf00      	nop
 80072e0:	08008260 	.word	0x08008260
 80072e4:	08008187 	.word	0x08008187
 80072e8:	08008207 	.word	0x08008207

080072ec <__lshift>:
 80072ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f0:	460c      	mov	r4, r1
 80072f2:	4607      	mov	r7, r0
 80072f4:	4691      	mov	r9, r2
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	6849      	ldr	r1, [r1, #4]
 80072fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007304:	f108 0601 	add.w	r6, r8, #1
 8007308:	42b3      	cmp	r3, r6
 800730a:	db0b      	blt.n	8007324 <__lshift+0x38>
 800730c:	4638      	mov	r0, r7
 800730e:	f7ff fde1 	bl	8006ed4 <_Balloc>
 8007312:	4605      	mov	r5, r0
 8007314:	b948      	cbnz	r0, 800732a <__lshift+0x3e>
 8007316:	4602      	mov	r2, r0
 8007318:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800731c:	4b27      	ldr	r3, [pc, #156]	@ (80073bc <__lshift+0xd0>)
 800731e:	4828      	ldr	r0, [pc, #160]	@ (80073c0 <__lshift+0xd4>)
 8007320:	f000 fb90 	bl	8007a44 <__assert_func>
 8007324:	3101      	adds	r1, #1
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	e7ee      	b.n	8007308 <__lshift+0x1c>
 800732a:	2300      	movs	r3, #0
 800732c:	f100 0114 	add.w	r1, r0, #20
 8007330:	f100 0210 	add.w	r2, r0, #16
 8007334:	4618      	mov	r0, r3
 8007336:	4553      	cmp	r3, sl
 8007338:	db33      	blt.n	80073a2 <__lshift+0xb6>
 800733a:	6920      	ldr	r0, [r4, #16]
 800733c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007340:	f104 0314 	add.w	r3, r4, #20
 8007344:	f019 091f 	ands.w	r9, r9, #31
 8007348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800734c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007350:	d02b      	beq.n	80073aa <__lshift+0xbe>
 8007352:	468a      	mov	sl, r1
 8007354:	2200      	movs	r2, #0
 8007356:	f1c9 0e20 	rsb	lr, r9, #32
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	fa00 f009 	lsl.w	r0, r0, r9
 8007360:	4310      	orrs	r0, r2
 8007362:	f84a 0b04 	str.w	r0, [sl], #4
 8007366:	f853 2b04 	ldr.w	r2, [r3], #4
 800736a:	459c      	cmp	ip, r3
 800736c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007370:	d8f3      	bhi.n	800735a <__lshift+0x6e>
 8007372:	ebac 0304 	sub.w	r3, ip, r4
 8007376:	3b15      	subs	r3, #21
 8007378:	f023 0303 	bic.w	r3, r3, #3
 800737c:	3304      	adds	r3, #4
 800737e:	f104 0015 	add.w	r0, r4, #21
 8007382:	4584      	cmp	ip, r0
 8007384:	bf38      	it	cc
 8007386:	2304      	movcc	r3, #4
 8007388:	50ca      	str	r2, [r1, r3]
 800738a:	b10a      	cbz	r2, 8007390 <__lshift+0xa4>
 800738c:	f108 0602 	add.w	r6, r8, #2
 8007390:	3e01      	subs	r6, #1
 8007392:	4638      	mov	r0, r7
 8007394:	4621      	mov	r1, r4
 8007396:	612e      	str	r6, [r5, #16]
 8007398:	f7ff fddc 	bl	8006f54 <_Bfree>
 800739c:	4628      	mov	r0, r5
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80073a6:	3301      	adds	r3, #1
 80073a8:	e7c5      	b.n	8007336 <__lshift+0x4a>
 80073aa:	3904      	subs	r1, #4
 80073ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b0:	459c      	cmp	ip, r3
 80073b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80073b6:	d8f9      	bhi.n	80073ac <__lshift+0xc0>
 80073b8:	e7ea      	b.n	8007390 <__lshift+0xa4>
 80073ba:	bf00      	nop
 80073bc:	080081f6 	.word	0x080081f6
 80073c0:	08008207 	.word	0x08008207

080073c4 <__mcmp>:
 80073c4:	4603      	mov	r3, r0
 80073c6:	690a      	ldr	r2, [r1, #16]
 80073c8:	6900      	ldr	r0, [r0, #16]
 80073ca:	b530      	push	{r4, r5, lr}
 80073cc:	1a80      	subs	r0, r0, r2
 80073ce:	d10e      	bne.n	80073ee <__mcmp+0x2a>
 80073d0:	3314      	adds	r3, #20
 80073d2:	3114      	adds	r1, #20
 80073d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073e4:	4295      	cmp	r5, r2
 80073e6:	d003      	beq.n	80073f0 <__mcmp+0x2c>
 80073e8:	d205      	bcs.n	80073f6 <__mcmp+0x32>
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	bd30      	pop	{r4, r5, pc}
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d3f3      	bcc.n	80073dc <__mcmp+0x18>
 80073f4:	e7fb      	b.n	80073ee <__mcmp+0x2a>
 80073f6:	2001      	movs	r0, #1
 80073f8:	e7f9      	b.n	80073ee <__mcmp+0x2a>
	...

080073fc <__mdiff>:
 80073fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	4689      	mov	r9, r1
 8007402:	4606      	mov	r6, r0
 8007404:	4611      	mov	r1, r2
 8007406:	4648      	mov	r0, r9
 8007408:	4614      	mov	r4, r2
 800740a:	f7ff ffdb 	bl	80073c4 <__mcmp>
 800740e:	1e05      	subs	r5, r0, #0
 8007410:	d112      	bne.n	8007438 <__mdiff+0x3c>
 8007412:	4629      	mov	r1, r5
 8007414:	4630      	mov	r0, r6
 8007416:	f7ff fd5d 	bl	8006ed4 <_Balloc>
 800741a:	4602      	mov	r2, r0
 800741c:	b928      	cbnz	r0, 800742a <__mdiff+0x2e>
 800741e:	f240 2137 	movw	r1, #567	@ 0x237
 8007422:	4b3e      	ldr	r3, [pc, #248]	@ (800751c <__mdiff+0x120>)
 8007424:	483e      	ldr	r0, [pc, #248]	@ (8007520 <__mdiff+0x124>)
 8007426:	f000 fb0d 	bl	8007a44 <__assert_func>
 800742a:	2301      	movs	r3, #1
 800742c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007430:	4610      	mov	r0, r2
 8007432:	b003      	add	sp, #12
 8007434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007438:	bfbc      	itt	lt
 800743a:	464b      	movlt	r3, r9
 800743c:	46a1      	movlt	r9, r4
 800743e:	4630      	mov	r0, r6
 8007440:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007444:	bfba      	itte	lt
 8007446:	461c      	movlt	r4, r3
 8007448:	2501      	movlt	r5, #1
 800744a:	2500      	movge	r5, #0
 800744c:	f7ff fd42 	bl	8006ed4 <_Balloc>
 8007450:	4602      	mov	r2, r0
 8007452:	b918      	cbnz	r0, 800745c <__mdiff+0x60>
 8007454:	f240 2145 	movw	r1, #581	@ 0x245
 8007458:	4b30      	ldr	r3, [pc, #192]	@ (800751c <__mdiff+0x120>)
 800745a:	e7e3      	b.n	8007424 <__mdiff+0x28>
 800745c:	f100 0b14 	add.w	fp, r0, #20
 8007460:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007464:	f109 0310 	add.w	r3, r9, #16
 8007468:	60c5      	str	r5, [r0, #12]
 800746a:	f04f 0c00 	mov.w	ip, #0
 800746e:	f109 0514 	add.w	r5, r9, #20
 8007472:	46d9      	mov	r9, fp
 8007474:	6926      	ldr	r6, [r4, #16]
 8007476:	f104 0e14 	add.w	lr, r4, #20
 800747a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800747e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	9b01      	ldr	r3, [sp, #4]
 8007486:	f85e 0b04 	ldr.w	r0, [lr], #4
 800748a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800748e:	b281      	uxth	r1, r0
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	fa1f f38a 	uxth.w	r3, sl
 8007496:	1a5b      	subs	r3, r3, r1
 8007498:	0c00      	lsrs	r0, r0, #16
 800749a:	4463      	add	r3, ip
 800749c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074a0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074aa:	4576      	cmp	r6, lr
 80074ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074b0:	f849 3b04 	str.w	r3, [r9], #4
 80074b4:	d8e6      	bhi.n	8007484 <__mdiff+0x88>
 80074b6:	1b33      	subs	r3, r6, r4
 80074b8:	3b15      	subs	r3, #21
 80074ba:	f023 0303 	bic.w	r3, r3, #3
 80074be:	3415      	adds	r4, #21
 80074c0:	3304      	adds	r3, #4
 80074c2:	42a6      	cmp	r6, r4
 80074c4:	bf38      	it	cc
 80074c6:	2304      	movcc	r3, #4
 80074c8:	441d      	add	r5, r3
 80074ca:	445b      	add	r3, fp
 80074cc:	461e      	mov	r6, r3
 80074ce:	462c      	mov	r4, r5
 80074d0:	4544      	cmp	r4, r8
 80074d2:	d30e      	bcc.n	80074f2 <__mdiff+0xf6>
 80074d4:	f108 0103 	add.w	r1, r8, #3
 80074d8:	1b49      	subs	r1, r1, r5
 80074da:	f021 0103 	bic.w	r1, r1, #3
 80074de:	3d03      	subs	r5, #3
 80074e0:	45a8      	cmp	r8, r5
 80074e2:	bf38      	it	cc
 80074e4:	2100      	movcc	r1, #0
 80074e6:	440b      	add	r3, r1
 80074e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ec:	b199      	cbz	r1, 8007516 <__mdiff+0x11a>
 80074ee:	6117      	str	r7, [r2, #16]
 80074f0:	e79e      	b.n	8007430 <__mdiff+0x34>
 80074f2:	46e6      	mov	lr, ip
 80074f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80074f8:	fa1f fc81 	uxth.w	ip, r1
 80074fc:	44f4      	add	ip, lr
 80074fe:	0c08      	lsrs	r0, r1, #16
 8007500:	4471      	add	r1, lr
 8007502:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007506:	b289      	uxth	r1, r1
 8007508:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800750c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007510:	f846 1b04 	str.w	r1, [r6], #4
 8007514:	e7dc      	b.n	80074d0 <__mdiff+0xd4>
 8007516:	3f01      	subs	r7, #1
 8007518:	e7e6      	b.n	80074e8 <__mdiff+0xec>
 800751a:	bf00      	nop
 800751c:	080081f6 	.word	0x080081f6
 8007520:	08008207 	.word	0x08008207

08007524 <__d2b>:
 8007524:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007528:	2101      	movs	r1, #1
 800752a:	4690      	mov	r8, r2
 800752c:	4699      	mov	r9, r3
 800752e:	9e08      	ldr	r6, [sp, #32]
 8007530:	f7ff fcd0 	bl	8006ed4 <_Balloc>
 8007534:	4604      	mov	r4, r0
 8007536:	b930      	cbnz	r0, 8007546 <__d2b+0x22>
 8007538:	4602      	mov	r2, r0
 800753a:	f240 310f 	movw	r1, #783	@ 0x30f
 800753e:	4b23      	ldr	r3, [pc, #140]	@ (80075cc <__d2b+0xa8>)
 8007540:	4823      	ldr	r0, [pc, #140]	@ (80075d0 <__d2b+0xac>)
 8007542:	f000 fa7f 	bl	8007a44 <__assert_func>
 8007546:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800754a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800754e:	b10d      	cbz	r5, 8007554 <__d2b+0x30>
 8007550:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	f1b8 0300 	subs.w	r3, r8, #0
 800755a:	d024      	beq.n	80075a6 <__d2b+0x82>
 800755c:	4668      	mov	r0, sp
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	f7ff fd7f 	bl	8007062 <__lo0bits>
 8007564:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007568:	b1d8      	cbz	r0, 80075a2 <__d2b+0x7e>
 800756a:	f1c0 0320 	rsb	r3, r0, #32
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	430b      	orrs	r3, r1
 8007574:	40c2      	lsrs	r2, r0
 8007576:	6163      	str	r3, [r4, #20]
 8007578:	9201      	str	r2, [sp, #4]
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	bf0c      	ite	eq
 8007580:	2201      	moveq	r2, #1
 8007582:	2202      	movne	r2, #2
 8007584:	61a3      	str	r3, [r4, #24]
 8007586:	6122      	str	r2, [r4, #16]
 8007588:	b1ad      	cbz	r5, 80075b6 <__d2b+0x92>
 800758a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800758e:	4405      	add	r5, r0
 8007590:	6035      	str	r5, [r6, #0]
 8007592:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007598:	6018      	str	r0, [r3, #0]
 800759a:	4620      	mov	r0, r4
 800759c:	b002      	add	sp, #8
 800759e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80075a2:	6161      	str	r1, [r4, #20]
 80075a4:	e7e9      	b.n	800757a <__d2b+0x56>
 80075a6:	a801      	add	r0, sp, #4
 80075a8:	f7ff fd5b 	bl	8007062 <__lo0bits>
 80075ac:	9b01      	ldr	r3, [sp, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	6163      	str	r3, [r4, #20]
 80075b2:	3020      	adds	r0, #32
 80075b4:	e7e7      	b.n	8007586 <__d2b+0x62>
 80075b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075be:	6030      	str	r0, [r6, #0]
 80075c0:	6918      	ldr	r0, [r3, #16]
 80075c2:	f7ff fd2f 	bl	8007024 <__hi0bits>
 80075c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075ca:	e7e4      	b.n	8007596 <__d2b+0x72>
 80075cc:	080081f6 	.word	0x080081f6
 80075d0:	08008207 	.word	0x08008207

080075d4 <__ssputs_r>:
 80075d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	461f      	mov	r7, r3
 80075da:	688e      	ldr	r6, [r1, #8]
 80075dc:	4682      	mov	sl, r0
 80075de:	42be      	cmp	r6, r7
 80075e0:	460c      	mov	r4, r1
 80075e2:	4690      	mov	r8, r2
 80075e4:	680b      	ldr	r3, [r1, #0]
 80075e6:	d82d      	bhi.n	8007644 <__ssputs_r+0x70>
 80075e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075f0:	d026      	beq.n	8007640 <__ssputs_r+0x6c>
 80075f2:	6965      	ldr	r5, [r4, #20]
 80075f4:	6909      	ldr	r1, [r1, #16]
 80075f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075fa:	eba3 0901 	sub.w	r9, r3, r1
 80075fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007602:	1c7b      	adds	r3, r7, #1
 8007604:	444b      	add	r3, r9
 8007606:	106d      	asrs	r5, r5, #1
 8007608:	429d      	cmp	r5, r3
 800760a:	bf38      	it	cc
 800760c:	461d      	movcc	r5, r3
 800760e:	0553      	lsls	r3, r2, #21
 8007610:	d527      	bpl.n	8007662 <__ssputs_r+0x8e>
 8007612:	4629      	mov	r1, r5
 8007614:	f7ff fbd2 	bl	8006dbc <_malloc_r>
 8007618:	4606      	mov	r6, r0
 800761a:	b360      	cbz	r0, 8007676 <__ssputs_r+0xa2>
 800761c:	464a      	mov	r2, r9
 800761e:	6921      	ldr	r1, [r4, #16]
 8007620:	f000 fa02 	bl	8007a28 <memcpy>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800762a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	6126      	str	r6, [r4, #16]
 8007632:	444e      	add	r6, r9
 8007634:	6026      	str	r6, [r4, #0]
 8007636:	463e      	mov	r6, r7
 8007638:	6165      	str	r5, [r4, #20]
 800763a:	eba5 0509 	sub.w	r5, r5, r9
 800763e:	60a5      	str	r5, [r4, #8]
 8007640:	42be      	cmp	r6, r7
 8007642:	d900      	bls.n	8007646 <__ssputs_r+0x72>
 8007644:	463e      	mov	r6, r7
 8007646:	4632      	mov	r2, r6
 8007648:	4641      	mov	r1, r8
 800764a:	6820      	ldr	r0, [r4, #0]
 800764c:	f000 f9c2 	bl	80079d4 <memmove>
 8007650:	2000      	movs	r0, #0
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	1b9b      	subs	r3, r3, r6
 8007656:	60a3      	str	r3, [r4, #8]
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	4433      	add	r3, r6
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007662:	462a      	mov	r2, r5
 8007664:	f000 fa32 	bl	8007acc <_realloc_r>
 8007668:	4606      	mov	r6, r0
 800766a:	2800      	cmp	r0, #0
 800766c:	d1e0      	bne.n	8007630 <__ssputs_r+0x5c>
 800766e:	4650      	mov	r0, sl
 8007670:	6921      	ldr	r1, [r4, #16]
 8007672:	f7ff fb31 	bl	8006cd8 <_free_r>
 8007676:	230c      	movs	r3, #12
 8007678:	f8ca 3000 	str.w	r3, [sl]
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f04f 30ff 	mov.w	r0, #4294967295
 8007682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	e7e9      	b.n	800765e <__ssputs_r+0x8a>
	...

0800768c <_svfiprintf_r>:
 800768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007690:	4698      	mov	r8, r3
 8007692:	898b      	ldrh	r3, [r1, #12]
 8007694:	4607      	mov	r7, r0
 8007696:	061b      	lsls	r3, r3, #24
 8007698:	460d      	mov	r5, r1
 800769a:	4614      	mov	r4, r2
 800769c:	b09d      	sub	sp, #116	@ 0x74
 800769e:	d510      	bpl.n	80076c2 <_svfiprintf_r+0x36>
 80076a0:	690b      	ldr	r3, [r1, #16]
 80076a2:	b973      	cbnz	r3, 80076c2 <_svfiprintf_r+0x36>
 80076a4:	2140      	movs	r1, #64	@ 0x40
 80076a6:	f7ff fb89 	bl	8006dbc <_malloc_r>
 80076aa:	6028      	str	r0, [r5, #0]
 80076ac:	6128      	str	r0, [r5, #16]
 80076ae:	b930      	cbnz	r0, 80076be <_svfiprintf_r+0x32>
 80076b0:	230c      	movs	r3, #12
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	b01d      	add	sp, #116	@ 0x74
 80076ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076be:	2340      	movs	r3, #64	@ 0x40
 80076c0:	616b      	str	r3, [r5, #20]
 80076c2:	2300      	movs	r3, #0
 80076c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c6:	2320      	movs	r3, #32
 80076c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076cc:	2330      	movs	r3, #48	@ 0x30
 80076ce:	f04f 0901 	mov.w	r9, #1
 80076d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007870 <_svfiprintf_r+0x1e4>
 80076da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076de:	4623      	mov	r3, r4
 80076e0:	469a      	mov	sl, r3
 80076e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e6:	b10a      	cbz	r2, 80076ec <_svfiprintf_r+0x60>
 80076e8:	2a25      	cmp	r2, #37	@ 0x25
 80076ea:	d1f9      	bne.n	80076e0 <_svfiprintf_r+0x54>
 80076ec:	ebba 0b04 	subs.w	fp, sl, r4
 80076f0:	d00b      	beq.n	800770a <_svfiprintf_r+0x7e>
 80076f2:	465b      	mov	r3, fp
 80076f4:	4622      	mov	r2, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7ff ff6b 	bl	80075d4 <__ssputs_r>
 80076fe:	3001      	adds	r0, #1
 8007700:	f000 80a7 	beq.w	8007852 <_svfiprintf_r+0x1c6>
 8007704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007706:	445a      	add	r2, fp
 8007708:	9209      	str	r2, [sp, #36]	@ 0x24
 800770a:	f89a 3000 	ldrb.w	r3, [sl]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 809f 	beq.w	8007852 <_svfiprintf_r+0x1c6>
 8007714:	2300      	movs	r3, #0
 8007716:	f04f 32ff 	mov.w	r2, #4294967295
 800771a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800771e:	f10a 0a01 	add.w	sl, sl, #1
 8007722:	9304      	str	r3, [sp, #16]
 8007724:	9307      	str	r3, [sp, #28]
 8007726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800772a:	931a      	str	r3, [sp, #104]	@ 0x68
 800772c:	4654      	mov	r4, sl
 800772e:	2205      	movs	r2, #5
 8007730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007734:	484e      	ldr	r0, [pc, #312]	@ (8007870 <_svfiprintf_r+0x1e4>)
 8007736:	f7fe fc6e 	bl	8006016 <memchr>
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	b9d8      	cbnz	r0, 8007776 <_svfiprintf_r+0xea>
 800773e:	06d0      	lsls	r0, r2, #27
 8007740:	bf44      	itt	mi
 8007742:	2320      	movmi	r3, #32
 8007744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007748:	0711      	lsls	r1, r2, #28
 800774a:	bf44      	itt	mi
 800774c:	232b      	movmi	r3, #43	@ 0x2b
 800774e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007752:	f89a 3000 	ldrb.w	r3, [sl]
 8007756:	2b2a      	cmp	r3, #42	@ 0x2a
 8007758:	d015      	beq.n	8007786 <_svfiprintf_r+0xfa>
 800775a:	4654      	mov	r4, sl
 800775c:	2000      	movs	r0, #0
 800775e:	f04f 0c0a 	mov.w	ip, #10
 8007762:	9a07      	ldr	r2, [sp, #28]
 8007764:	4621      	mov	r1, r4
 8007766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800776a:	3b30      	subs	r3, #48	@ 0x30
 800776c:	2b09      	cmp	r3, #9
 800776e:	d94b      	bls.n	8007808 <_svfiprintf_r+0x17c>
 8007770:	b1b0      	cbz	r0, 80077a0 <_svfiprintf_r+0x114>
 8007772:	9207      	str	r2, [sp, #28]
 8007774:	e014      	b.n	80077a0 <_svfiprintf_r+0x114>
 8007776:	eba0 0308 	sub.w	r3, r0, r8
 800777a:	fa09 f303 	lsl.w	r3, r9, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	46a2      	mov	sl, r4
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	e7d2      	b.n	800772c <_svfiprintf_r+0xa0>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	1d19      	adds	r1, r3, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	9103      	str	r1, [sp, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfbb      	ittet	lt
 8007792:	425b      	neglt	r3, r3
 8007794:	f042 0202 	orrlt.w	r2, r2, #2
 8007798:	9307      	strge	r3, [sp, #28]
 800779a:	9307      	strlt	r3, [sp, #28]
 800779c:	bfb8      	it	lt
 800779e:	9204      	strlt	r2, [sp, #16]
 80077a0:	7823      	ldrb	r3, [r4, #0]
 80077a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a4:	d10a      	bne.n	80077bc <_svfiprintf_r+0x130>
 80077a6:	7863      	ldrb	r3, [r4, #1]
 80077a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077aa:	d132      	bne.n	8007812 <_svfiprintf_r+0x186>
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	3402      	adds	r4, #2
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	9203      	str	r2, [sp, #12]
 80077b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007874 <_svfiprintf_r+0x1e8>
 80077c0:	2203      	movs	r2, #3
 80077c2:	4650      	mov	r0, sl
 80077c4:	7821      	ldrb	r1, [r4, #0]
 80077c6:	f7fe fc26 	bl	8006016 <memchr>
 80077ca:	b138      	cbz	r0, 80077dc <_svfiprintf_r+0x150>
 80077cc:	2240      	movs	r2, #64	@ 0x40
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	eba0 000a 	sub.w	r0, r0, sl
 80077d4:	4082      	lsls	r2, r0
 80077d6:	4313      	orrs	r3, r2
 80077d8:	3401      	adds	r4, #1
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e0:	2206      	movs	r2, #6
 80077e2:	4825      	ldr	r0, [pc, #148]	@ (8007878 <_svfiprintf_r+0x1ec>)
 80077e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077e8:	f7fe fc15 	bl	8006016 <memchr>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d036      	beq.n	800785e <_svfiprintf_r+0x1d2>
 80077f0:	4b22      	ldr	r3, [pc, #136]	@ (800787c <_svfiprintf_r+0x1f0>)
 80077f2:	bb1b      	cbnz	r3, 800783c <_svfiprintf_r+0x1b0>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	3307      	adds	r3, #7
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	3308      	adds	r3, #8
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007802:	4433      	add	r3, r6
 8007804:	9309      	str	r3, [sp, #36]	@ 0x24
 8007806:	e76a      	b.n	80076de <_svfiprintf_r+0x52>
 8007808:	460c      	mov	r4, r1
 800780a:	2001      	movs	r0, #1
 800780c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007810:	e7a8      	b.n	8007764 <_svfiprintf_r+0xd8>
 8007812:	2300      	movs	r3, #0
 8007814:	f04f 0c0a 	mov.w	ip, #10
 8007818:	4619      	mov	r1, r3
 800781a:	3401      	adds	r4, #1
 800781c:	9305      	str	r3, [sp, #20]
 800781e:	4620      	mov	r0, r4
 8007820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007824:	3a30      	subs	r2, #48	@ 0x30
 8007826:	2a09      	cmp	r2, #9
 8007828:	d903      	bls.n	8007832 <_svfiprintf_r+0x1a6>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0c6      	beq.n	80077bc <_svfiprintf_r+0x130>
 800782e:	9105      	str	r1, [sp, #20]
 8007830:	e7c4      	b.n	80077bc <_svfiprintf_r+0x130>
 8007832:	4604      	mov	r4, r0
 8007834:	2301      	movs	r3, #1
 8007836:	fb0c 2101 	mla	r1, ip, r1, r2
 800783a:	e7f0      	b.n	800781e <_svfiprintf_r+0x192>
 800783c:	ab03      	add	r3, sp, #12
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	462a      	mov	r2, r5
 8007842:	4638      	mov	r0, r7
 8007844:	4b0e      	ldr	r3, [pc, #56]	@ (8007880 <_svfiprintf_r+0x1f4>)
 8007846:	a904      	add	r1, sp, #16
 8007848:	f7fd fe82 	bl	8005550 <_printf_float>
 800784c:	1c42      	adds	r2, r0, #1
 800784e:	4606      	mov	r6, r0
 8007850:	d1d6      	bne.n	8007800 <_svfiprintf_r+0x174>
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	065b      	lsls	r3, r3, #25
 8007856:	f53f af2d 	bmi.w	80076b4 <_svfiprintf_r+0x28>
 800785a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800785c:	e72c      	b.n	80076b8 <_svfiprintf_r+0x2c>
 800785e:	ab03      	add	r3, sp, #12
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	462a      	mov	r2, r5
 8007864:	4638      	mov	r0, r7
 8007866:	4b06      	ldr	r3, [pc, #24]	@ (8007880 <_svfiprintf_r+0x1f4>)
 8007868:	a904      	add	r1, sp, #16
 800786a:	f7fe f90f 	bl	8005a8c <_printf_i>
 800786e:	e7ed      	b.n	800784c <_svfiprintf_r+0x1c0>
 8007870:	08008360 	.word	0x08008360
 8007874:	08008366 	.word	0x08008366
 8007878:	0800836a 	.word	0x0800836a
 800787c:	08005551 	.word	0x08005551
 8007880:	080075d5 	.word	0x080075d5

08007884 <__sflush_r>:
 8007884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	0716      	lsls	r6, r2, #28
 800788c:	4605      	mov	r5, r0
 800788e:	460c      	mov	r4, r1
 8007890:	d454      	bmi.n	800793c <__sflush_r+0xb8>
 8007892:	684b      	ldr	r3, [r1, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc02      	bgt.n	800789e <__sflush_r+0x1a>
 8007898:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd48      	ble.n	8007930 <__sflush_r+0xac>
 800789e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078a0:	2e00      	cmp	r6, #0
 80078a2:	d045      	beq.n	8007930 <__sflush_r+0xac>
 80078a4:	2300      	movs	r3, #0
 80078a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078aa:	682f      	ldr	r7, [r5, #0]
 80078ac:	6a21      	ldr	r1, [r4, #32]
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	d030      	beq.n	8007914 <__sflush_r+0x90>
 80078b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	0759      	lsls	r1, r3, #29
 80078b8:	d505      	bpl.n	80078c6 <__sflush_r+0x42>
 80078ba:	6863      	ldr	r3, [r4, #4]
 80078bc:	1ad2      	subs	r2, r2, r3
 80078be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078c0:	b10b      	cbz	r3, 80078c6 <__sflush_r+0x42>
 80078c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078c4:	1ad2      	subs	r2, r2, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	4628      	mov	r0, r5
 80078ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078cc:	6a21      	ldr	r1, [r4, #32]
 80078ce:	47b0      	blx	r6
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	d106      	bne.n	80078e4 <__sflush_r+0x60>
 80078d6:	6829      	ldr	r1, [r5, #0]
 80078d8:	291d      	cmp	r1, #29
 80078da:	d82b      	bhi.n	8007934 <__sflush_r+0xb0>
 80078dc:	4a28      	ldr	r2, [pc, #160]	@ (8007980 <__sflush_r+0xfc>)
 80078de:	410a      	asrs	r2, r1
 80078e0:	07d6      	lsls	r6, r2, #31
 80078e2:	d427      	bmi.n	8007934 <__sflush_r+0xb0>
 80078e4:	2200      	movs	r2, #0
 80078e6:	6062      	str	r2, [r4, #4]
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	04d9      	lsls	r1, r3, #19
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	d504      	bpl.n	80078fa <__sflush_r+0x76>
 80078f0:	1c42      	adds	r2, r0, #1
 80078f2:	d101      	bne.n	80078f8 <__sflush_r+0x74>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b903      	cbnz	r3, 80078fa <__sflush_r+0x76>
 80078f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80078fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078fc:	602f      	str	r7, [r5, #0]
 80078fe:	b1b9      	cbz	r1, 8007930 <__sflush_r+0xac>
 8007900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007904:	4299      	cmp	r1, r3
 8007906:	d002      	beq.n	800790e <__sflush_r+0x8a>
 8007908:	4628      	mov	r0, r5
 800790a:	f7ff f9e5 	bl	8006cd8 <_free_r>
 800790e:	2300      	movs	r3, #0
 8007910:	6363      	str	r3, [r4, #52]	@ 0x34
 8007912:	e00d      	b.n	8007930 <__sflush_r+0xac>
 8007914:	2301      	movs	r3, #1
 8007916:	4628      	mov	r0, r5
 8007918:	47b0      	blx	r6
 800791a:	4602      	mov	r2, r0
 800791c:	1c50      	adds	r0, r2, #1
 800791e:	d1c9      	bne.n	80078b4 <__sflush_r+0x30>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0c6      	beq.n	80078b4 <__sflush_r+0x30>
 8007926:	2b1d      	cmp	r3, #29
 8007928:	d001      	beq.n	800792e <__sflush_r+0xaa>
 800792a:	2b16      	cmp	r3, #22
 800792c:	d11d      	bne.n	800796a <__sflush_r+0xe6>
 800792e:	602f      	str	r7, [r5, #0]
 8007930:	2000      	movs	r0, #0
 8007932:	e021      	b.n	8007978 <__sflush_r+0xf4>
 8007934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007938:	b21b      	sxth	r3, r3
 800793a:	e01a      	b.n	8007972 <__sflush_r+0xee>
 800793c:	690f      	ldr	r7, [r1, #16]
 800793e:	2f00      	cmp	r7, #0
 8007940:	d0f6      	beq.n	8007930 <__sflush_r+0xac>
 8007942:	0793      	lsls	r3, r2, #30
 8007944:	bf18      	it	ne
 8007946:	2300      	movne	r3, #0
 8007948:	680e      	ldr	r6, [r1, #0]
 800794a:	bf08      	it	eq
 800794c:	694b      	ldreq	r3, [r1, #20]
 800794e:	1bf6      	subs	r6, r6, r7
 8007950:	600f      	str	r7, [r1, #0]
 8007952:	608b      	str	r3, [r1, #8]
 8007954:	2e00      	cmp	r6, #0
 8007956:	ddeb      	ble.n	8007930 <__sflush_r+0xac>
 8007958:	4633      	mov	r3, r6
 800795a:	463a      	mov	r2, r7
 800795c:	4628      	mov	r0, r5
 800795e:	6a21      	ldr	r1, [r4, #32]
 8007960:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007964:	47e0      	blx	ip
 8007966:	2800      	cmp	r0, #0
 8007968:	dc07      	bgt.n	800797a <__sflush_r+0xf6>
 800796a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007972:	f04f 30ff 	mov.w	r0, #4294967295
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797a:	4407      	add	r7, r0
 800797c:	1a36      	subs	r6, r6, r0
 800797e:	e7e9      	b.n	8007954 <__sflush_r+0xd0>
 8007980:	dfbffffe 	.word	0xdfbffffe

08007984 <_fflush_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	690b      	ldr	r3, [r1, #16]
 8007988:	4605      	mov	r5, r0
 800798a:	460c      	mov	r4, r1
 800798c:	b913      	cbnz	r3, 8007994 <_fflush_r+0x10>
 800798e:	2500      	movs	r5, #0
 8007990:	4628      	mov	r0, r5
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	b118      	cbz	r0, 800799e <_fflush_r+0x1a>
 8007996:	6a03      	ldr	r3, [r0, #32]
 8007998:	b90b      	cbnz	r3, 800799e <_fflush_r+0x1a>
 800799a:	f7fe fa23 	bl	8005de4 <__sinit>
 800799e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0f3      	beq.n	800798e <_fflush_r+0xa>
 80079a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079a8:	07d0      	lsls	r0, r2, #31
 80079aa:	d404      	bmi.n	80079b6 <_fflush_r+0x32>
 80079ac:	0599      	lsls	r1, r3, #22
 80079ae:	d402      	bmi.n	80079b6 <_fflush_r+0x32>
 80079b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079b2:	f7fe fb2e 	bl	8006012 <__retarget_lock_acquire_recursive>
 80079b6:	4628      	mov	r0, r5
 80079b8:	4621      	mov	r1, r4
 80079ba:	f7ff ff63 	bl	8007884 <__sflush_r>
 80079be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079c0:	4605      	mov	r5, r0
 80079c2:	07da      	lsls	r2, r3, #31
 80079c4:	d4e4      	bmi.n	8007990 <_fflush_r+0xc>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	059b      	lsls	r3, r3, #22
 80079ca:	d4e1      	bmi.n	8007990 <_fflush_r+0xc>
 80079cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ce:	f7fe fb21 	bl	8006014 <__retarget_lock_release_recursive>
 80079d2:	e7dd      	b.n	8007990 <_fflush_r+0xc>

080079d4 <memmove>:
 80079d4:	4288      	cmp	r0, r1
 80079d6:	b510      	push	{r4, lr}
 80079d8:	eb01 0402 	add.w	r4, r1, r2
 80079dc:	d902      	bls.n	80079e4 <memmove+0x10>
 80079de:	4284      	cmp	r4, r0
 80079e0:	4623      	mov	r3, r4
 80079e2:	d807      	bhi.n	80079f4 <memmove+0x20>
 80079e4:	1e43      	subs	r3, r0, #1
 80079e6:	42a1      	cmp	r1, r4
 80079e8:	d008      	beq.n	80079fc <memmove+0x28>
 80079ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079f2:	e7f8      	b.n	80079e6 <memmove+0x12>
 80079f4:	4601      	mov	r1, r0
 80079f6:	4402      	add	r2, r0
 80079f8:	428a      	cmp	r2, r1
 80079fa:	d100      	bne.n	80079fe <memmove+0x2a>
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a06:	e7f7      	b.n	80079f8 <memmove+0x24>

08007a08 <_sbrk_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	4d05      	ldr	r5, [pc, #20]	@ (8007a24 <_sbrk_r+0x1c>)
 8007a0e:	4604      	mov	r4, r0
 8007a10:	4608      	mov	r0, r1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f7fa fb10 	bl	8002038 <_sbrk>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_sbrk_r+0x1a>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_sbrk_r+0x1a>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000540 	.word	0x20000540

08007a28 <memcpy>:
 8007a28:	440a      	add	r2, r1
 8007a2a:	4291      	cmp	r1, r2
 8007a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a30:	d100      	bne.n	8007a34 <memcpy+0xc>
 8007a32:	4770      	bx	lr
 8007a34:	b510      	push	{r4, lr}
 8007a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3a:	4291      	cmp	r1, r2
 8007a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a40:	d1f9      	bne.n	8007a36 <memcpy+0xe>
 8007a42:	bd10      	pop	{r4, pc}

08007a44 <__assert_func>:
 8007a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a46:	4614      	mov	r4, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <__assert_func+0x2c>)
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68d8      	ldr	r0, [r3, #12]
 8007a52:	b954      	cbnz	r4, 8007a6a <__assert_func+0x26>
 8007a54:	4b07      	ldr	r3, [pc, #28]	@ (8007a74 <__assert_func+0x30>)
 8007a56:	461c      	mov	r4, r3
 8007a58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a5c:	9100      	str	r1, [sp, #0]
 8007a5e:	462b      	mov	r3, r5
 8007a60:	4905      	ldr	r1, [pc, #20]	@ (8007a78 <__assert_func+0x34>)
 8007a62:	f000 f86f 	bl	8007b44 <fiprintf>
 8007a66:	f000 f87f 	bl	8007b68 <abort>
 8007a6a:	4b04      	ldr	r3, [pc, #16]	@ (8007a7c <__assert_func+0x38>)
 8007a6c:	e7f4      	b.n	8007a58 <__assert_func+0x14>
 8007a6e:	bf00      	nop
 8007a70:	20000020 	.word	0x20000020
 8007a74:	080083b6 	.word	0x080083b6
 8007a78:	08008388 	.word	0x08008388
 8007a7c:	0800837b 	.word	0x0800837b

08007a80 <_calloc_r>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	fba1 5402 	umull	r5, r4, r1, r2
 8007a86:	b93c      	cbnz	r4, 8007a98 <_calloc_r+0x18>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7ff f997 	bl	8006dbc <_malloc_r>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	b928      	cbnz	r0, 8007a9e <_calloc_r+0x1e>
 8007a92:	2600      	movs	r6, #0
 8007a94:	4630      	mov	r0, r6
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	220c      	movs	r2, #12
 8007a9a:	6002      	str	r2, [r0, #0]
 8007a9c:	e7f9      	b.n	8007a92 <_calloc_r+0x12>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	f7fe fa38 	bl	8005f16 <memset>
 8007aa6:	e7f5      	b.n	8007a94 <_calloc_r+0x14>

08007aa8 <__ascii_mbtowc>:
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	b901      	cbnz	r1, 8007aae <__ascii_mbtowc+0x6>
 8007aac:	a901      	add	r1, sp, #4
 8007aae:	b142      	cbz	r2, 8007ac2 <__ascii_mbtowc+0x1a>
 8007ab0:	b14b      	cbz	r3, 8007ac6 <__ascii_mbtowc+0x1e>
 8007ab2:	7813      	ldrb	r3, [r2, #0]
 8007ab4:	600b      	str	r3, [r1, #0]
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	1e10      	subs	r0, r2, #0
 8007aba:	bf18      	it	ne
 8007abc:	2001      	movne	r0, #1
 8007abe:	b002      	add	sp, #8
 8007ac0:	4770      	bx	lr
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	e7fb      	b.n	8007abe <__ascii_mbtowc+0x16>
 8007ac6:	f06f 0001 	mvn.w	r0, #1
 8007aca:	e7f8      	b.n	8007abe <__ascii_mbtowc+0x16>

08007acc <_realloc_r>:
 8007acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	4615      	mov	r5, r2
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	b921      	cbnz	r1, 8007ae2 <_realloc_r+0x16>
 8007ad8:	4611      	mov	r1, r2
 8007ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ade:	f7ff b96d 	b.w	8006dbc <_malloc_r>
 8007ae2:	b92a      	cbnz	r2, 8007af0 <_realloc_r+0x24>
 8007ae4:	f7ff f8f8 	bl	8006cd8 <_free_r>
 8007ae8:	2400      	movs	r4, #0
 8007aea:	4620      	mov	r0, r4
 8007aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af0:	f000 f841 	bl	8007b76 <_malloc_usable_size_r>
 8007af4:	4285      	cmp	r5, r0
 8007af6:	4606      	mov	r6, r0
 8007af8:	d802      	bhi.n	8007b00 <_realloc_r+0x34>
 8007afa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007afe:	d8f4      	bhi.n	8007aea <_realloc_r+0x1e>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4640      	mov	r0, r8
 8007b04:	f7ff f95a 	bl	8006dbc <_malloc_r>
 8007b08:	4607      	mov	r7, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d0ec      	beq.n	8007ae8 <_realloc_r+0x1c>
 8007b0e:	42b5      	cmp	r5, r6
 8007b10:	462a      	mov	r2, r5
 8007b12:	4621      	mov	r1, r4
 8007b14:	bf28      	it	cs
 8007b16:	4632      	movcs	r2, r6
 8007b18:	f7ff ff86 	bl	8007a28 <memcpy>
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f7ff f8da 	bl	8006cd8 <_free_r>
 8007b24:	463c      	mov	r4, r7
 8007b26:	e7e0      	b.n	8007aea <_realloc_r+0x1e>

08007b28 <__ascii_wctomb>:
 8007b28:	4603      	mov	r3, r0
 8007b2a:	4608      	mov	r0, r1
 8007b2c:	b141      	cbz	r1, 8007b40 <__ascii_wctomb+0x18>
 8007b2e:	2aff      	cmp	r2, #255	@ 0xff
 8007b30:	d904      	bls.n	8007b3c <__ascii_wctomb+0x14>
 8007b32:	228a      	movs	r2, #138	@ 0x8a
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	4770      	bx	lr
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	700a      	strb	r2, [r1, #0]
 8007b40:	4770      	bx	lr
	...

08007b44 <fiprintf>:
 8007b44:	b40e      	push	{r1, r2, r3}
 8007b46:	b503      	push	{r0, r1, lr}
 8007b48:	4601      	mov	r1, r0
 8007b4a:	ab03      	add	r3, sp, #12
 8007b4c:	4805      	ldr	r0, [pc, #20]	@ (8007b64 <fiprintf+0x20>)
 8007b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b52:	6800      	ldr	r0, [r0, #0]
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	f000 f83d 	bl	8007bd4 <_vfiprintf_r>
 8007b5a:	b002      	add	sp, #8
 8007b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b60:	b003      	add	sp, #12
 8007b62:	4770      	bx	lr
 8007b64:	20000020 	.word	0x20000020

08007b68 <abort>:
 8007b68:	2006      	movs	r0, #6
 8007b6a:	b508      	push	{r3, lr}
 8007b6c:	f000 fa06 	bl	8007f7c <raise>
 8007b70:	2001      	movs	r0, #1
 8007b72:	f7fa f9ec 	bl	8001f4e <_exit>

08007b76 <_malloc_usable_size_r>:
 8007b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7a:	1f18      	subs	r0, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bfbc      	itt	lt
 8007b80:	580b      	ldrlt	r3, [r1, r0]
 8007b82:	18c0      	addlt	r0, r0, r3
 8007b84:	4770      	bx	lr

08007b86 <__sfputc_r>:
 8007b86:	6893      	ldr	r3, [r2, #8]
 8007b88:	b410      	push	{r4}
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	6093      	str	r3, [r2, #8]
 8007b90:	da07      	bge.n	8007ba2 <__sfputc_r+0x1c>
 8007b92:	6994      	ldr	r4, [r2, #24]
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	db01      	blt.n	8007b9c <__sfputc_r+0x16>
 8007b98:	290a      	cmp	r1, #10
 8007b9a:	d102      	bne.n	8007ba2 <__sfputc_r+0x1c>
 8007b9c:	bc10      	pop	{r4}
 8007b9e:	f000 b931 	b.w	8007e04 <__swbuf_r>
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	1c58      	adds	r0, r3, #1
 8007ba6:	6010      	str	r0, [r2, #0]
 8007ba8:	7019      	strb	r1, [r3, #0]
 8007baa:	4608      	mov	r0, r1
 8007bac:	bc10      	pop	{r4}
 8007bae:	4770      	bx	lr

08007bb0 <__sfputs_r>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	4614      	mov	r4, r2
 8007bb8:	18d5      	adds	r5, r2, r3
 8007bba:	42ac      	cmp	r4, r5
 8007bbc:	d101      	bne.n	8007bc2 <__sfputs_r+0x12>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e007      	b.n	8007bd2 <__sfputs_r+0x22>
 8007bc2:	463a      	mov	r2, r7
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bca:	f7ff ffdc 	bl	8007b86 <__sfputc_r>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	d1f3      	bne.n	8007bba <__sfputs_r+0xa>
 8007bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bd4 <_vfiprintf_r>:
 8007bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd8:	460d      	mov	r5, r1
 8007bda:	4614      	mov	r4, r2
 8007bdc:	4698      	mov	r8, r3
 8007bde:	4606      	mov	r6, r0
 8007be0:	b09d      	sub	sp, #116	@ 0x74
 8007be2:	b118      	cbz	r0, 8007bec <_vfiprintf_r+0x18>
 8007be4:	6a03      	ldr	r3, [r0, #32]
 8007be6:	b90b      	cbnz	r3, 8007bec <_vfiprintf_r+0x18>
 8007be8:	f7fe f8fc 	bl	8005de4 <__sinit>
 8007bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bee:	07d9      	lsls	r1, r3, #31
 8007bf0:	d405      	bmi.n	8007bfe <_vfiprintf_r+0x2a>
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	059a      	lsls	r2, r3, #22
 8007bf6:	d402      	bmi.n	8007bfe <_vfiprintf_r+0x2a>
 8007bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bfa:	f7fe fa0a 	bl	8006012 <__retarget_lock_acquire_recursive>
 8007bfe:	89ab      	ldrh	r3, [r5, #12]
 8007c00:	071b      	lsls	r3, r3, #28
 8007c02:	d501      	bpl.n	8007c08 <_vfiprintf_r+0x34>
 8007c04:	692b      	ldr	r3, [r5, #16]
 8007c06:	b99b      	cbnz	r3, 8007c30 <_vfiprintf_r+0x5c>
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f000 f938 	bl	8007e80 <__swsetup_r>
 8007c10:	b170      	cbz	r0, 8007c30 <_vfiprintf_r+0x5c>
 8007c12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c14:	07dc      	lsls	r4, r3, #31
 8007c16:	d504      	bpl.n	8007c22 <_vfiprintf_r+0x4e>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	b01d      	add	sp, #116	@ 0x74
 8007c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	0598      	lsls	r0, r3, #22
 8007c26:	d4f7      	bmi.n	8007c18 <_vfiprintf_r+0x44>
 8007c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c2a:	f7fe f9f3 	bl	8006014 <__retarget_lock_release_recursive>
 8007c2e:	e7f3      	b.n	8007c18 <_vfiprintf_r+0x44>
 8007c30:	2300      	movs	r3, #0
 8007c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c34:	2320      	movs	r3, #32
 8007c36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c3a:	2330      	movs	r3, #48	@ 0x30
 8007c3c:	f04f 0901 	mov.w	r9, #1
 8007c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007df0 <_vfiprintf_r+0x21c>
 8007c48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	469a      	mov	sl, r3
 8007c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c54:	b10a      	cbz	r2, 8007c5a <_vfiprintf_r+0x86>
 8007c56:	2a25      	cmp	r2, #37	@ 0x25
 8007c58:	d1f9      	bne.n	8007c4e <_vfiprintf_r+0x7a>
 8007c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c5e:	d00b      	beq.n	8007c78 <_vfiprintf_r+0xa4>
 8007c60:	465b      	mov	r3, fp
 8007c62:	4622      	mov	r2, r4
 8007c64:	4629      	mov	r1, r5
 8007c66:	4630      	mov	r0, r6
 8007c68:	f7ff ffa2 	bl	8007bb0 <__sfputs_r>
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	f000 80a7 	beq.w	8007dc0 <_vfiprintf_r+0x1ec>
 8007c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c74:	445a      	add	r2, fp
 8007c76:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c78:	f89a 3000 	ldrb.w	r3, [sl]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 809f 	beq.w	8007dc0 <_vfiprintf_r+0x1ec>
 8007c82:	2300      	movs	r3, #0
 8007c84:	f04f 32ff 	mov.w	r2, #4294967295
 8007c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c8c:	f10a 0a01 	add.w	sl, sl, #1
 8007c90:	9304      	str	r3, [sp, #16]
 8007c92:	9307      	str	r3, [sp, #28]
 8007c94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c98:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c9a:	4654      	mov	r4, sl
 8007c9c:	2205      	movs	r2, #5
 8007c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca2:	4853      	ldr	r0, [pc, #332]	@ (8007df0 <_vfiprintf_r+0x21c>)
 8007ca4:	f7fe f9b7 	bl	8006016 <memchr>
 8007ca8:	9a04      	ldr	r2, [sp, #16]
 8007caa:	b9d8      	cbnz	r0, 8007ce4 <_vfiprintf_r+0x110>
 8007cac:	06d1      	lsls	r1, r2, #27
 8007cae:	bf44      	itt	mi
 8007cb0:	2320      	movmi	r3, #32
 8007cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cb6:	0713      	lsls	r3, r2, #28
 8007cb8:	bf44      	itt	mi
 8007cba:	232b      	movmi	r3, #43	@ 0x2b
 8007cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cc6:	d015      	beq.n	8007cf4 <_vfiprintf_r+0x120>
 8007cc8:	4654      	mov	r4, sl
 8007cca:	2000      	movs	r0, #0
 8007ccc:	f04f 0c0a 	mov.w	ip, #10
 8007cd0:	9a07      	ldr	r2, [sp, #28]
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cd8:	3b30      	subs	r3, #48	@ 0x30
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d94b      	bls.n	8007d76 <_vfiprintf_r+0x1a2>
 8007cde:	b1b0      	cbz	r0, 8007d0e <_vfiprintf_r+0x13a>
 8007ce0:	9207      	str	r2, [sp, #28]
 8007ce2:	e014      	b.n	8007d0e <_vfiprintf_r+0x13a>
 8007ce4:	eba0 0308 	sub.w	r3, r0, r8
 8007ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8007cec:	4313      	orrs	r3, r2
 8007cee:	46a2      	mov	sl, r4
 8007cf0:	9304      	str	r3, [sp, #16]
 8007cf2:	e7d2      	b.n	8007c9a <_vfiprintf_r+0xc6>
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	1d19      	adds	r1, r3, #4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	9103      	str	r1, [sp, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfbb      	ittet	lt
 8007d00:	425b      	neglt	r3, r3
 8007d02:	f042 0202 	orrlt.w	r2, r2, #2
 8007d06:	9307      	strge	r3, [sp, #28]
 8007d08:	9307      	strlt	r3, [sp, #28]
 8007d0a:	bfb8      	it	lt
 8007d0c:	9204      	strlt	r2, [sp, #16]
 8007d0e:	7823      	ldrb	r3, [r4, #0]
 8007d10:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d12:	d10a      	bne.n	8007d2a <_vfiprintf_r+0x156>
 8007d14:	7863      	ldrb	r3, [r4, #1]
 8007d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d18:	d132      	bne.n	8007d80 <_vfiprintf_r+0x1ac>
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	3402      	adds	r4, #2
 8007d1e:	1d1a      	adds	r2, r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	9203      	str	r2, [sp, #12]
 8007d24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d28:	9305      	str	r3, [sp, #20]
 8007d2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007df4 <_vfiprintf_r+0x220>
 8007d2e:	2203      	movs	r2, #3
 8007d30:	4650      	mov	r0, sl
 8007d32:	7821      	ldrb	r1, [r4, #0]
 8007d34:	f7fe f96f 	bl	8006016 <memchr>
 8007d38:	b138      	cbz	r0, 8007d4a <_vfiprintf_r+0x176>
 8007d3a:	2240      	movs	r2, #64	@ 0x40
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	eba0 000a 	sub.w	r0, r0, sl
 8007d42:	4082      	lsls	r2, r0
 8007d44:	4313      	orrs	r3, r2
 8007d46:	3401      	adds	r4, #1
 8007d48:	9304      	str	r3, [sp, #16]
 8007d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4e:	2206      	movs	r2, #6
 8007d50:	4829      	ldr	r0, [pc, #164]	@ (8007df8 <_vfiprintf_r+0x224>)
 8007d52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d56:	f7fe f95e 	bl	8006016 <memchr>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d03f      	beq.n	8007dde <_vfiprintf_r+0x20a>
 8007d5e:	4b27      	ldr	r3, [pc, #156]	@ (8007dfc <_vfiprintf_r+0x228>)
 8007d60:	bb1b      	cbnz	r3, 8007daa <_vfiprintf_r+0x1d6>
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	3307      	adds	r3, #7
 8007d66:	f023 0307 	bic.w	r3, r3, #7
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	9303      	str	r3, [sp, #12]
 8007d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d70:	443b      	add	r3, r7
 8007d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d74:	e76a      	b.n	8007c4c <_vfiprintf_r+0x78>
 8007d76:	460c      	mov	r4, r1
 8007d78:	2001      	movs	r0, #1
 8007d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d7e:	e7a8      	b.n	8007cd2 <_vfiprintf_r+0xfe>
 8007d80:	2300      	movs	r3, #0
 8007d82:	f04f 0c0a 	mov.w	ip, #10
 8007d86:	4619      	mov	r1, r3
 8007d88:	3401      	adds	r4, #1
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d92:	3a30      	subs	r2, #48	@ 0x30
 8007d94:	2a09      	cmp	r2, #9
 8007d96:	d903      	bls.n	8007da0 <_vfiprintf_r+0x1cc>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0c6      	beq.n	8007d2a <_vfiprintf_r+0x156>
 8007d9c:	9105      	str	r1, [sp, #20]
 8007d9e:	e7c4      	b.n	8007d2a <_vfiprintf_r+0x156>
 8007da0:	4604      	mov	r4, r0
 8007da2:	2301      	movs	r3, #1
 8007da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007da8:	e7f0      	b.n	8007d8c <_vfiprintf_r+0x1b8>
 8007daa:	ab03      	add	r3, sp, #12
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	462a      	mov	r2, r5
 8007db0:	4630      	mov	r0, r6
 8007db2:	4b13      	ldr	r3, [pc, #76]	@ (8007e00 <_vfiprintf_r+0x22c>)
 8007db4:	a904      	add	r1, sp, #16
 8007db6:	f7fd fbcb 	bl	8005550 <_printf_float>
 8007dba:	4607      	mov	r7, r0
 8007dbc:	1c78      	adds	r0, r7, #1
 8007dbe:	d1d6      	bne.n	8007d6e <_vfiprintf_r+0x19a>
 8007dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dc2:	07d9      	lsls	r1, r3, #31
 8007dc4:	d405      	bmi.n	8007dd2 <_vfiprintf_r+0x1fe>
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	059a      	lsls	r2, r3, #22
 8007dca:	d402      	bmi.n	8007dd2 <_vfiprintf_r+0x1fe>
 8007dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dce:	f7fe f921 	bl	8006014 <__retarget_lock_release_recursive>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	065b      	lsls	r3, r3, #25
 8007dd6:	f53f af1f 	bmi.w	8007c18 <_vfiprintf_r+0x44>
 8007dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ddc:	e71e      	b.n	8007c1c <_vfiprintf_r+0x48>
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	462a      	mov	r2, r5
 8007de4:	4630      	mov	r0, r6
 8007de6:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <_vfiprintf_r+0x22c>)
 8007de8:	a904      	add	r1, sp, #16
 8007dea:	f7fd fe4f 	bl	8005a8c <_printf_i>
 8007dee:	e7e4      	b.n	8007dba <_vfiprintf_r+0x1e6>
 8007df0:	08008360 	.word	0x08008360
 8007df4:	08008366 	.word	0x08008366
 8007df8:	0800836a 	.word	0x0800836a
 8007dfc:	08005551 	.word	0x08005551
 8007e00:	08007bb1 	.word	0x08007bb1

08007e04 <__swbuf_r>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	460e      	mov	r6, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	b118      	cbz	r0, 8007e16 <__swbuf_r+0x12>
 8007e0e:	6a03      	ldr	r3, [r0, #32]
 8007e10:	b90b      	cbnz	r3, 8007e16 <__swbuf_r+0x12>
 8007e12:	f7fd ffe7 	bl	8005de4 <__sinit>
 8007e16:	69a3      	ldr	r3, [r4, #24]
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	071a      	lsls	r2, r3, #28
 8007e1e:	d501      	bpl.n	8007e24 <__swbuf_r+0x20>
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b943      	cbnz	r3, 8007e36 <__swbuf_r+0x32>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f82a 	bl	8007e80 <__swsetup_r>
 8007e2c:	b118      	cbz	r0, 8007e36 <__swbuf_r+0x32>
 8007e2e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e32:	4638      	mov	r0, r7
 8007e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6922      	ldr	r2, [r4, #16]
 8007e3a:	b2f6      	uxtb	r6, r6
 8007e3c:	1a98      	subs	r0, r3, r2
 8007e3e:	6963      	ldr	r3, [r4, #20]
 8007e40:	4637      	mov	r7, r6
 8007e42:	4283      	cmp	r3, r0
 8007e44:	dc05      	bgt.n	8007e52 <__swbuf_r+0x4e>
 8007e46:	4621      	mov	r1, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f7ff fd9b 	bl	8007984 <_fflush_r>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d1ed      	bne.n	8007e2e <__swbuf_r+0x2a>
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	6022      	str	r2, [r4, #0]
 8007e5e:	701e      	strb	r6, [r3, #0]
 8007e60:	6962      	ldr	r2, [r4, #20]
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d004      	beq.n	8007e72 <__swbuf_r+0x6e>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	07db      	lsls	r3, r3, #31
 8007e6c:	d5e1      	bpl.n	8007e32 <__swbuf_r+0x2e>
 8007e6e:	2e0a      	cmp	r6, #10
 8007e70:	d1df      	bne.n	8007e32 <__swbuf_r+0x2e>
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7ff fd85 	bl	8007984 <_fflush_r>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d0d9      	beq.n	8007e32 <__swbuf_r+0x2e>
 8007e7e:	e7d6      	b.n	8007e2e <__swbuf_r+0x2a>

08007e80 <__swsetup_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4b29      	ldr	r3, [pc, #164]	@ (8007f28 <__swsetup_r+0xa8>)
 8007e84:	4605      	mov	r5, r0
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	460c      	mov	r4, r1
 8007e8a:	b118      	cbz	r0, 8007e94 <__swsetup_r+0x14>
 8007e8c:	6a03      	ldr	r3, [r0, #32]
 8007e8e:	b90b      	cbnz	r3, 8007e94 <__swsetup_r+0x14>
 8007e90:	f7fd ffa8 	bl	8005de4 <__sinit>
 8007e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e98:	0719      	lsls	r1, r3, #28
 8007e9a:	d422      	bmi.n	8007ee2 <__swsetup_r+0x62>
 8007e9c:	06da      	lsls	r2, r3, #27
 8007e9e:	d407      	bmi.n	8007eb0 <__swsetup_r+0x30>
 8007ea0:	2209      	movs	r2, #9
 8007ea2:	602a      	str	r2, [r5, #0]
 8007ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	e033      	b.n	8007f18 <__swsetup_r+0x98>
 8007eb0:	0758      	lsls	r0, r3, #29
 8007eb2:	d512      	bpl.n	8007eda <__swsetup_r+0x5a>
 8007eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eb6:	b141      	cbz	r1, 8007eca <__swsetup_r+0x4a>
 8007eb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	d002      	beq.n	8007ec6 <__swsetup_r+0x46>
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f7fe ff09 	bl	8006cd8 <_free_r>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f043 0308 	orr.w	r3, r3, #8
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	b94b      	cbnz	r3, 8007efa <__swsetup_r+0x7a>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef0:	d003      	beq.n	8007efa <__swsetup_r+0x7a>
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f000 f882 	bl	8007ffe <__smakebuf_r>
 8007efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efe:	f013 0201 	ands.w	r2, r3, #1
 8007f02:	d00a      	beq.n	8007f1a <__swsetup_r+0x9a>
 8007f04:	2200      	movs	r2, #0
 8007f06:	60a2      	str	r2, [r4, #8]
 8007f08:	6962      	ldr	r2, [r4, #20]
 8007f0a:	4252      	negs	r2, r2
 8007f0c:	61a2      	str	r2, [r4, #24]
 8007f0e:	6922      	ldr	r2, [r4, #16]
 8007f10:	b942      	cbnz	r2, 8007f24 <__swsetup_r+0xa4>
 8007f12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f16:	d1c5      	bne.n	8007ea4 <__swsetup_r+0x24>
 8007f18:	bd38      	pop	{r3, r4, r5, pc}
 8007f1a:	0799      	lsls	r1, r3, #30
 8007f1c:	bf58      	it	pl
 8007f1e:	6962      	ldrpl	r2, [r4, #20]
 8007f20:	60a2      	str	r2, [r4, #8]
 8007f22:	e7f4      	b.n	8007f0e <__swsetup_r+0x8e>
 8007f24:	2000      	movs	r0, #0
 8007f26:	e7f7      	b.n	8007f18 <__swsetup_r+0x98>
 8007f28:	20000020 	.word	0x20000020

08007f2c <_raise_r>:
 8007f2c:	291f      	cmp	r1, #31
 8007f2e:	b538      	push	{r3, r4, r5, lr}
 8007f30:	4605      	mov	r5, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	d904      	bls.n	8007f40 <_raise_r+0x14>
 8007f36:	2316      	movs	r3, #22
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f42:	b112      	cbz	r2, 8007f4a <_raise_r+0x1e>
 8007f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f48:	b94b      	cbnz	r3, 8007f5e <_raise_r+0x32>
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 f830 	bl	8007fb0 <_getpid_r>
 8007f50:	4622      	mov	r2, r4
 8007f52:	4601      	mov	r1, r0
 8007f54:	4628      	mov	r0, r5
 8007f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f5a:	f000 b817 	b.w	8007f8c <_kill_r>
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d00a      	beq.n	8007f78 <_raise_r+0x4c>
 8007f62:	1c59      	adds	r1, r3, #1
 8007f64:	d103      	bne.n	8007f6e <_raise_r+0x42>
 8007f66:	2316      	movs	r3, #22
 8007f68:	6003      	str	r3, [r0, #0]
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	e7e7      	b.n	8007f3e <_raise_r+0x12>
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4620      	mov	r0, r4
 8007f72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f76:	4798      	blx	r3
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e7e0      	b.n	8007f3e <_raise_r+0x12>

08007f7c <raise>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	@ (8007f88 <raise+0xc>)
 8007f7e:	4601      	mov	r1, r0
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f7ff bfd3 	b.w	8007f2c <_raise_r>
 8007f86:	bf00      	nop
 8007f88:	20000020 	.word	0x20000020

08007f8c <_kill_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4d06      	ldr	r5, [pc, #24]	@ (8007fac <_kill_r+0x20>)
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	f7f9 ffc8 	bl	8001f2e <_kill>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	d102      	bne.n	8007fa8 <_kill_r+0x1c>
 8007fa2:	682b      	ldr	r3, [r5, #0]
 8007fa4:	b103      	cbz	r3, 8007fa8 <_kill_r+0x1c>
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	bf00      	nop
 8007fac:	20000540 	.word	0x20000540

08007fb0 <_getpid_r>:
 8007fb0:	f7f9 bfb6 	b.w	8001f20 <_getpid>

08007fb4 <__swhatbuf_r>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	461e      	mov	r6, r3
 8007fc2:	b096      	sub	sp, #88	@ 0x58
 8007fc4:	da0c      	bge.n	8007fe0 <__swhatbuf_r+0x2c>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	2100      	movs	r1, #0
 8007fca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fce:	bf14      	ite	ne
 8007fd0:	2340      	movne	r3, #64	@ 0x40
 8007fd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	6031      	str	r1, [r6, #0]
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	b016      	add	sp, #88	@ 0x58
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	466a      	mov	r2, sp
 8007fe2:	f000 f849 	bl	8008078 <_fstat_r>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	dbed      	blt.n	8007fc6 <__swhatbuf_r+0x12>
 8007fea:	9901      	ldr	r1, [sp, #4]
 8007fec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ff0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ff4:	4259      	negs	r1, r3
 8007ff6:	4159      	adcs	r1, r3
 8007ff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ffc:	e7eb      	b.n	8007fd6 <__swhatbuf_r+0x22>

08007ffe <__smakebuf_r>:
 8007ffe:	898b      	ldrh	r3, [r1, #12]
 8008000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008002:	079d      	lsls	r5, r3, #30
 8008004:	4606      	mov	r6, r0
 8008006:	460c      	mov	r4, r1
 8008008:	d507      	bpl.n	800801a <__smakebuf_r+0x1c>
 800800a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	2301      	movs	r3, #1
 8008014:	6163      	str	r3, [r4, #20]
 8008016:	b003      	add	sp, #12
 8008018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801a:	466a      	mov	r2, sp
 800801c:	ab01      	add	r3, sp, #4
 800801e:	f7ff ffc9 	bl	8007fb4 <__swhatbuf_r>
 8008022:	9f00      	ldr	r7, [sp, #0]
 8008024:	4605      	mov	r5, r0
 8008026:	4639      	mov	r1, r7
 8008028:	4630      	mov	r0, r6
 800802a:	f7fe fec7 	bl	8006dbc <_malloc_r>
 800802e:	b948      	cbnz	r0, 8008044 <__smakebuf_r+0x46>
 8008030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008034:	059a      	lsls	r2, r3, #22
 8008036:	d4ee      	bmi.n	8008016 <__smakebuf_r+0x18>
 8008038:	f023 0303 	bic.w	r3, r3, #3
 800803c:	f043 0302 	orr.w	r3, r3, #2
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	e7e2      	b.n	800800a <__smakebuf_r+0xc>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800804a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	9b01      	ldr	r3, [sp, #4]
 8008052:	6020      	str	r0, [r4, #0]
 8008054:	b15b      	cbz	r3, 800806e <__smakebuf_r+0x70>
 8008056:	4630      	mov	r0, r6
 8008058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800805c:	f000 f81e 	bl	800809c <_isatty_r>
 8008060:	b128      	cbz	r0, 800806e <__smakebuf_r+0x70>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	431d      	orrs	r5, r3
 8008072:	81a5      	strh	r5, [r4, #12]
 8008074:	e7cf      	b.n	8008016 <__smakebuf_r+0x18>
	...

08008078 <_fstat_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	2300      	movs	r3, #0
 800807c:	4d06      	ldr	r5, [pc, #24]	@ (8008098 <_fstat_r+0x20>)
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	4611      	mov	r1, r2
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	f7f9 ffb1 	bl	8001fec <_fstat>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d102      	bne.n	8008094 <_fstat_r+0x1c>
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	b103      	cbz	r3, 8008094 <_fstat_r+0x1c>
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	bf00      	nop
 8008098:	20000540 	.word	0x20000540

0800809c <_isatty_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	2300      	movs	r3, #0
 80080a0:	4d05      	ldr	r5, [pc, #20]	@ (80080b8 <_isatty_r+0x1c>)
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7f9 ffaf 	bl	800200a <_isatty>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_isatty_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_isatty_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20000540 	.word	0x20000540

080080bc <_init>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr

080080c8 <_fini>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr
