
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008054  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08008168  08008168  00009168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008548  08008548  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008548  08008548  00009548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008550  08008550  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008550  08008550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008558  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001dc  08008734  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08008734  0000a550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f321  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  00019526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8a  00000000  00000000  0001ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195cf  00000000  00000000  0001d5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112d5  00000000  00000000  00036b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009168c  00000000  00000000  00047e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d94f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000d9538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000de588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800814c 	.word	0x0800814c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800814c 	.word	0x0800814c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <uprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uprintf(char *str){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f819 	bl	8000150 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4803      	ldr	r0, [pc, #12]	@ (8001134 <uprintf+0x24>)
 8001128:	f004 f83e 	bl	80051a8 <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000368 	.word	0x20000368

08001138 <toggleSystemOnOff>:

void toggleSystemOnOff() {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    // Implement the logic to toggle the system on and off;
	systemOn = !systemOn;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <toggleSystemOnOff+0x3c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <toggleSystemOnOff+0x3c>)
 800114e:	601a      	str	r2, [r3, #0]
    if (systemOn) {
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <toggleSystemOnOff+0x3c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <toggleSystemOnOff+0x2c>
        // Turn on system
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Example LED ON
 8001158:	2201      	movs	r2, #1
 800115a:	2180      	movs	r1, #128	@ 0x80
 800115c:	4806      	ldr	r0, [pc, #24]	@ (8001178 <toggleSystemOnOff+0x40>)
 800115e:	f002 f947 	bl	80033f0 <HAL_GPIO_WritePin>
    } else {
        // Turn off system
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Example LED OFF
    }
}
 8001162:	e004      	b.n	800116e <toggleSystemOnOff+0x36>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Example LED OFF
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <toggleSystemOnOff+0x40>)
 800116a:	f002 f941 	bl	80033f0 <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000240 	.word	0x20000240
 8001178:	40010800 	.word	0x40010800
 800117c:	00000000 	.word	0x00000000

08001180 <readTemperature>:

void readTemperature() {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
	uint32_t soma = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc1);
 800118a:	4823      	ldr	r0, [pc, #140]	@ (8001218 <readTemperature+0x98>)
 800118c:	f001 f8f0 	bl	8002370 <HAL_ADC_Start>
    for(int i = 0; i < 8; i++){
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	e011      	b.n	80011ba <readTemperature+0x3a>
    	HAL_ADC_PollForConversion(&hadc1,100);
 8001196:	2164      	movs	r1, #100	@ 0x64
 8001198:	481f      	ldr	r0, [pc, #124]	@ (8001218 <readTemperature+0x98>)
 800119a:	f001 f9c3 	bl	8002524 <HAL_ADC_PollForConversion>
        adcValue = HAL_ADC_GetValue(&hadc1);
 800119e:	481e      	ldr	r0, [pc, #120]	@ (8001218 <readTemperature+0x98>)
 80011a0:	f001 fb7c 	bl	800289c <HAL_ADC_GetValue>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <readTemperature+0x9c>)
 80011a8:	6013      	str	r3, [r2, #0]
        soma += adcValue;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <readTemperature+0x9c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < 8; i++){
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b07      	cmp	r3, #7
 80011be:	ddea      	ble.n	8001196 <readTemperature+0x16>
    }
    adcValue = soma/8;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	4a15      	ldr	r2, [pc, #84]	@ (800121c <readTemperature+0x9c>)
 80011c6:	6013      	str	r3, [r2, #0]
        float voltage = (adcValue / 4095.0); // ADC de 12 bits, Vref = 2.5V
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <readTemperature+0x9c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f909 	bl	80003e4 <__aeabi_ui2d>
 80011d2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001210 <readTemperature+0x90>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff faa8 	bl	800072c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fc50 	bl	8000a88 <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	607b      	str	r3, [r7, #4]
        temperatureMeasured = (voltage) * 50.0; // Escala de 0 a 50ºC
 80011ec:	490c      	ldr	r1, [pc, #48]	@ (8001220 <readTemperature+0xa0>)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fda8 	bl	8000d44 <__aeabi_fmul>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <readTemperature+0xa4>)
 80011fa:	601a      	str	r2, [r3, #0]

    HAL_ADC_Stop(&hadc1);
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <readTemperature+0x98>)
 80011fe:	f001 f965 	bl	80024cc <HAL_ADC_Stop>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	00000000 	.word	0x00000000
 8001214:	40affe00 	.word	0x40affe00
 8001218:	20000258 	.word	0x20000258
 800121c:	2000024c 	.word	0x2000024c
 8001220:	42480000 	.word	0x42480000
 8001224:	20000238 	.word	0x20000238

08001228 <updatePWM>:

void updatePWM() {
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0

    if (systemOn) {
 800122c:	4b3c      	ldr	r3, [pc, #240]	@ (8001320 <updatePWM+0xf8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d06e      	beq.n	8001312 <updatePWM+0xea>
        if (temperatureMeasured < (temperatureAdjusted - hysteresis)) {
 8001234:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <updatePWM+0xfc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a3b      	ldr	r2, [pc, #236]	@ (8001328 <updatePWM+0x100>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_fsub>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b38      	ldr	r3, [pc, #224]	@ (800132c <updatePWM+0x104>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f7ff ff34 	bl	80010bc <__aeabi_fcmpgt>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d023      	beq.n	80012a2 <updatePWM+0x7a>

        	 x = (temperatureAdjusted-temperatureMeasured)/45;
 800125a:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <updatePWM+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a33      	ldr	r2, [pc, #204]	@ (800132c <updatePWM+0x104>)
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fc63 	bl	8000b30 <__aeabi_fsub>
 800126a:	4603      	mov	r3, r0
 800126c:	4930      	ldr	r1, [pc, #192]	@ (8001330 <updatePWM+0x108>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe1c 	bl	8000eac <__aeabi_fdiv>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <updatePWM+0x10c>)
 800127a:	601a      	str	r2, [r3, #0]

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x*10000);
 800127c:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <updatePWM+0x10c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	492d      	ldr	r1, [pc, #180]	@ (8001338 <updatePWM+0x110>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd5e 	bl	8000d44 <__aeabi_fmul>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <updatePWM+0x114>)
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	4610      	mov	r0, r2
 8001292:	f7ff ff1d 	bl	80010d0 <__aeabi_f2uiz>
 8001296:	4603      	mov	r3, r0
 8001298:	6363      	str	r3, [r4, #52]	@ 0x34
            controlador = 0;
 800129a:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <updatePWM+0x118>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        }
    } else {
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    }
}
 80012a0:	e03b      	b.n	800131a <updatePWM+0xf2>
        } else if (temperatureMeasured > (temperatureAdjusted + hysteresis)) {
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <updatePWM+0xfc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <updatePWM+0x100>)
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc41 	bl	8000b34 <__addsf3>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <updatePWM+0x104>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4610      	mov	r0, r2
 80012be:	f7ff fedf 	bl	8001080 <__aeabi_fcmplt>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00d      	beq.n	80012e4 <updatePWM+0xbc>
        		x=0;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <updatePWM+0x10c>)
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x);
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <updatePWM+0x10c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	@ (800133c <updatePWM+0x114>)
 80012d6:	6814      	ldr	r4, [r2, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fef9 	bl	80010d0 <__aeabi_f2uiz>
 80012de:	4603      	mov	r3, r0
 80012e0:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80012e2:	e01a      	b.n	800131a <updatePWM+0xf2>
            if(controlador == 0){
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <updatePWM+0x118>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d116      	bne.n	800131a <updatePWM+0xf2>
            	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x*10000);
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <updatePWM+0x10c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4911      	ldr	r1, [pc, #68]	@ (8001338 <updatePWM+0x110>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fd26 	bl	8000d44 <__aeabi_fmul>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <updatePWM+0x114>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4610      	mov	r0, r2
 8001302:	f7ff fee5 	bl	80010d0 <__aeabi_f2uiz>
 8001306:	4603      	mov	r3, r0
 8001308:	6363      	str	r3, [r4, #52]	@ 0x34
            	controlador = 1;
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <updatePWM+0x118>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	e003      	b.n	800131a <updatePWM+0xf2>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <updatePWM+0x114>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800131a:	bf00      	nop
 800131c:	bd98      	pop	{r3, r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	20000240 	.word	0x20000240
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004
 800132c:	20000238 	.word	0x20000238
 8001330:	42340000 	.word	0x42340000
 8001334:	20000248 	.word	0x20000248
 8001338:	461c4000 	.word	0x461c4000
 800133c:	200002d8 	.word	0x200002d8
 8001340:	20000244 	.word	0x20000244

08001344 <encoderPushButtonHandler>:

void encoderPushButtonHandler() {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
    adjustmentMode = !adjustmentMode;
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <encoderPushButtonHandler+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <encoderPushButtonHandler+0x40>)
 800135a:	601a      	str	r2, [r3, #0]
    if (adjustmentMode) {
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <encoderPushButtonHandler+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <encoderPushButtonHandler+0x2e>
        HAL_GPIO_WritePin(GPIOA, ledAjuste_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800136a:	4807      	ldr	r0, [pc, #28]	@ (8001388 <encoderPushButtonHandler+0x44>)
 800136c:	f002 f840 	bl	80033f0 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOA, ledAjuste_Pin, GPIO_PIN_RESET);
    }
}
 8001370:	e005      	b.n	800137e <encoderPushButtonHandler+0x3a>
        HAL_GPIO_WritePin(GPIOA, ledAjuste_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <encoderPushButtonHandler+0x44>)
 800137a:	f002 f839 	bl	80033f0 <HAL_GPIO_WritePin>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000023c 	.word	0x2000023c
 8001388:	40010800 	.word	0x40010800

0800138c <encoderRotationHandler>:
void encoderRotationHandler(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
    static int32_t lastCounterValue = 0;
    int32_t currentCounterValue = (int32_t)__HAL_TIM_GET_COUNTER(&htim4);
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <encoderRotationHandler+0x98>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	607b      	str	r3, [r7, #4]
    int32_t difference = currentCounterValue - lastCounterValue;
 800139a:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <encoderRotationHandler+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	603b      	str	r3, [r7, #0]

    if (adjustmentMode) {
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <encoderRotationHandler+0xa0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d037      	beq.n	800141c <encoderRotationHandler+0x90>
        if (difference > 0) {
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd0b      	ble.n	80013ca <encoderRotationHandler+0x3e>
        	temperatureAdjusted++;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fbba 	bl	8000b34 <__addsf3>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e00d      	b.n	80013e6 <encoderRotationHandler+0x5a>
        } else if (difference < 0) {
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da0a      	bge.n	80013e6 <encoderRotationHandler+0x5a>
        	temperatureAdjusted--;
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fba9 	bl	8000b30 <__aeabi_fsub>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013e4:	601a      	str	r2, [r3, #0]
        }

        // Ensure temperatureTAJ stays within a valid range
        if (temperatureAdjusted < 30) temperatureAdjusted = 30;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4912      	ldr	r1, [pc, #72]	@ (8001434 <encoderRotationHandler+0xa8>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe47 	bl	8001080 <__aeabi_fcmplt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <encoderRotationHandler+0x72>
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <encoderRotationHandler+0xa4>)
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <encoderRotationHandler+0xa8>)
 80013fc:	601a      	str	r2, [r3, #0]
        if (temperatureAdjusted > 45) temperatureAdjusted = 45;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <encoderRotationHandler+0xa4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	490d      	ldr	r1, [pc, #52]	@ (8001438 <encoderRotationHandler+0xac>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe59 	bl	80010bc <__aeabi_fcmpgt>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <encoderRotationHandler+0x8a>
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <encoderRotationHandler+0xa4>)
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <encoderRotationHandler+0xac>)
 8001414:	601a      	str	r2, [r3, #0]

        // Update the last counter value
        lastCounterValue = currentCounterValue;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <encoderRotationHandler+0x9c>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6013      	str	r3, [r2, #0]
    }

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000320 	.word	0x20000320
 8001428:	200003b0 	.word	0x200003b0
 800142c:	2000023c 	.word	0x2000023c
 8001430:	20000000 	.word	0x20000000
 8001434:	41f00000 	.word	0x41f00000
 8001438:	42340000 	.word	0x42340000

0800143c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
	// pega o tempo atual do sistema
	currentMillis = HAL_GetTick();
 8001446:	f000 fe8d 	bl	8002164 <HAL_GetTick>
 800144a:	4603      	mov	r3, r0
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_GPIO_EXTI_Callback+0x50>)
 800144e:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 500){
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <HAL_GPIO_EXTI_Callback+0x50>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_GPIO_EXTI_Callback+0x54>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800145e:	d910      	bls.n	8001482 <HAL_GPIO_EXTI_Callback+0x46>

		if (GPIO_Pin == OnOff_Pin ) {
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001466:	d102      	bne.n	800146e <HAL_GPIO_EXTI_Callback+0x32>
			toggleSystemOnOff();
 8001468:	f7ff fe66 	bl	8001138 <toggleSystemOnOff>
 800146c:	e005      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x3e>
		} else if (GPIO_Pin == Mode_Pin) {
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001474:	d101      	bne.n	800147a <HAL_GPIO_EXTI_Callback+0x3e>
			encoderPushButtonHandler();
 8001476:	f7ff ff65 	bl	8001344 <encoderPushButtonHandler>
		}
		previousMillis = currentMillis;
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <HAL_GPIO_EXTI_Callback+0x50>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_GPIO_EXTI_Callback+0x54>)
 8001480:	6013      	str	r3, [r2, #0]
	}
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000254 	.word	0x20000254
 8001490:	20000250 	.word	0x20000250

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001498:	b089      	sub	sp, #36	@ 0x24
 800149a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 fe3a 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f874 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 fa62 	bl	800196c <MX_GPIO_Init>
  MX_CRC_Init();
 80014a8:	f000 f90a 	bl	80016c0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80014ac:	f000 fa34 	bl	8001918 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014b0:	f000 f8c8 	bl	8001644 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014b4:	f000 f918 	bl	80016e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014b8:	f000 f964 	bl	8001784 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014bc:	f000 f9d8 	bl	8001870 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);// Gera pwm para o adc
 80014c0:	2104      	movs	r1, #4
 80014c2:	4826      	ldr	r0, [pc, #152]	@ (800155c <main+0xc8>)
 80014c4:	f002 fe84 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1); // Calibra o adc antes de iniciar
 80014c8:	4825      	ldr	r0, [pc, #148]	@ (8001560 <main+0xcc>)
 80014ca:	f001 fc59 	bl	8002d80 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1); //inicia adc
 80014ce:	4824      	ldr	r0, [pc, #144]	@ (8001560 <main+0xcc>)
 80014d0:	f001 f92e 	bl	8002730 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Inicia PWM para o aquecedor
 80014d4:	2100      	movs	r1, #0
 80014d6:	4823      	ldr	r0, [pc, #140]	@ (8001564 <main+0xd0>)
 80014d8:	f002 fe7a 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80014dc:	213c      	movs	r1, #60	@ 0x3c
 80014de:	4822      	ldr	r0, [pc, #136]	@ (8001568 <main+0xd4>)
 80014e0:	f002 ffba 	bl	8004458 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    	readTemperature();
 80014e4:	f7ff fe4c 	bl	8001180 <readTemperature>
	    updatePWM();
 80014e8:	f7ff fe9e 	bl	8001228 <updatePWM>
	    encoderRotationHandler();
 80014ec:	f7ff ff4e 	bl	800138c <encoderRotationHandler>
	    //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, temperatureMeasured*100);

	    sprintf(buffer, "TM: %.2f, TAJ: %.2f, ST: %d, MD: %d, RC: %.2f \n", temperatureMeasured, temperatureAdjusted, systemOn, adjustmentMode, x);
 80014f0:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <main+0xd8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff97 	bl	8000428 <__aeabi_f2d>
 80014fa:	4680      	mov	r8, r0
 80014fc:	4689      	mov	r9, r1
 80014fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <main+0xdc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ff90 	bl	8000428 <__aeabi_f2d>
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
 800150c:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <main+0xe0>)
 800150e:	681e      	ldr	r6, [r3, #0]
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <main+0xe4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <main+0xe8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ff84 	bl	8000428 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	9303      	str	r3, [sp, #12]
 800152c:	9602      	str	r6, [sp, #8]
 800152e:	e9cd 4500 	strd	r4, r5, [sp]
 8001532:	4642      	mov	r2, r8
 8001534:	464b      	mov	r3, r9
 8001536:	4912      	ldr	r1, [pc, #72]	@ (8001580 <main+0xec>)
 8001538:	4812      	ldr	r0, [pc, #72]	@ (8001584 <main+0xf0>)
 800153a:	f004 fcd3 	bl	8005ee4 <siprintf>
	    uprintf(buffer);
 800153e:	4811      	ldr	r0, [pc, #68]	@ (8001584 <main+0xf0>)
 8001540:	f7ff fde6 	bl	8001110 <uprintf>

	    HAL_GPIO_TogglePin(LEDX_GPIO_Port, LEDX_Pin);
 8001544:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001548:	480f      	ldr	r0, [pc, #60]	@ (8001588 <main+0xf4>)
 800154a:	f001 ff69 	bl	8003420 <HAL_GPIO_TogglePin>
	    HAL_Delay(500);
 800154e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001552:	f000 fe11 	bl	8002178 <HAL_Delay>
    	readTemperature();
 8001556:	bf00      	nop
 8001558:	e7c4      	b.n	80014e4 <main+0x50>
 800155a:	bf00      	nop
 800155c:	20000290 	.word	0x20000290
 8001560:	20000258 	.word	0x20000258
 8001564:	200002d8 	.word	0x200002d8
 8001568:	20000320 	.word	0x20000320
 800156c:	20000238 	.word	0x20000238
 8001570:	20000000 	.word	0x20000000
 8001574:	20000240 	.word	0x20000240
 8001578:	2000023c 	.word	0x2000023c
 800157c:	20000248 	.word	0x20000248
 8001580:	08008168 	.word	0x08008168
 8001584:	200001f8 	.word	0x200001f8
 8001588:	40011000 	.word	0x40011000

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	@ 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001596:	2228      	movs	r2, #40	@ 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fd05 	bl	8005faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ca:	2301      	movs	r3, #1
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ce:	2302      	movs	r3, #2
 80015d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015d8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 ff4e 	bl	8003484 <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ee:	f000 fa61 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001602:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f002 f9ba 	bl	8003988 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800161a:	f000 fa4b 	bl	8001ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800161e:	2302      	movs	r3, #2
 8001620:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001626:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4618      	mov	r0, r3
 800162c:	f002 fb6a 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001636:	f000 fa3d 	bl	8001ab4 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3750      	adds	r7, #80	@ 0x50
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MX_ADC1_Init+0x74>)
 8001656:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <MX_ADC1_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MX_ADC1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_ADC1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_ADC1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_ADC1_Init+0x74>)
 800166e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001672:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_ADC1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_ADC1_Init+0x74>)
 800167c:	2201      	movs	r2, #1
 800167e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001680:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <MX_ADC1_Init+0x74>)
 8001682:	f000 fd9d 	bl	80021c0 <HAL_ADC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 fa12 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001694:	2301      	movs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001698:	2302      	movs	r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_ADC1_Init+0x74>)
 80016a2:	f001 f9d9 	bl	8002a58 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016ac:	f000 fa02 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000258 	.word	0x20000258
 80016bc:	40012400 	.word	0x40012400

080016c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_CRC_Init+0x20>)
 80016c6:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <MX_CRC_Init+0x24>)
 80016c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_CRC_Init+0x20>)
 80016cc:	f001 fcef 	bl	80030ae <HAL_CRC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016d6:	f000 f9ed 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000288 	.word	0x20000288
 80016e4:	40023000 	.word	0x40023000

080016e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <MX_TIM2_Init+0x98>)
 8001706:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800170a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <MX_TIM2_Init+0x98>)
 800170e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_TIM2_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3333;
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <MX_TIM2_Init+0x98>)
 800171c:	f640 5205 	movw	r2, #3333	@ 0xd05
 8001720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <MX_TIM2_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <MX_TIM2_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172e:	4814      	ldr	r0, [pc, #80]	@ (8001780 <MX_TIM2_Init+0x98>)
 8001730:	f002 fc54 	bl	8003fdc <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800173a:	f000 f9bb 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	@ (8001780 <MX_TIM2_Init+0x98>)
 800174c:	f003 f8dc 	bl	8004908 <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001756:	f000 f9ad 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <MX_TIM2_Init+0x98>)
 8001768:	f003 fc5e 	bl	8005028 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001772:	f000 f99f 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000290 	.word	0x20000290

08001784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	@ 0x38
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017b6:	4a2d      	ldr	r2, [pc, #180]	@ (800186c <MX_TIM3_Init+0xe8>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80017ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017bc:	2248      	movs	r2, #72	@ 0x48
 80017be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017da:	4823      	ldr	r0, [pc, #140]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017dc:	f002 fbfe 	bl	8003fdc <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017e6:	f000 f965 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f4:	4619      	mov	r1, r3
 80017f6:	481c      	ldr	r0, [pc, #112]	@ (8001868 <MX_TIM3_Init+0xe4>)
 80017f8:	f003 f886 	bl	8004908 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001802:	f000 f957 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001806:	4818      	ldr	r0, [pc, #96]	@ (8001868 <MX_TIM3_Init+0xe4>)
 8001808:	f002 fc8a 	bl	8004120 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001812:	f000 f94f 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	4619      	mov	r1, r3
 8001824:	4810      	ldr	r0, [pc, #64]	@ (8001868 <MX_TIM3_Init+0xe4>)
 8001826:	f003 fbff 	bl	8005028 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001830:	f000 f940 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	@ 0x60
 8001836:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	@ (8001868 <MX_TIM3_Init+0xe4>)
 800184c:	f002 ff9a 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001856:	f000 f92d 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800185a:	4803      	ldr	r0, [pc, #12]	@ (8001868 <MX_TIM3_Init+0xe4>)
 800185c:	f000 fa32 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	@ 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200002d8 	.word	0x200002d8
 800186c:	40000400 	.word	0x40000400

08001870 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2224      	movs	r2, #36	@ 0x24
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f004 fb93 	bl	8005faa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800188c:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <MX_TIM4_Init+0xa0>)
 800188e:	4a21      	ldr	r2, [pc, #132]	@ (8001914 <MX_TIM4_Init+0xa4>)
 8001890:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MX_TIM4_Init+0xa0>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <MX_TIM4_Init+0xa0>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_TIM4_Init+0xa0>)
 80018a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MX_TIM4_Init+0xa0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <MX_TIM4_Init+0xa0>)
 80018ae:	2280      	movs	r2, #128	@ 0x80
 80018b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018b2:	2303      	movs	r3, #3
 80018b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ba:	2301      	movs	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018c2:	230a      	movs	r3, #10
 80018c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ca:	2301      	movs	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4619      	mov	r1, r3
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <MX_TIM4_Init+0xa0>)
 80018de:	f002 fd19 	bl	8004314 <HAL_TIM_Encoder_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80018e8:	f000 f8e4 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_TIM4_Init+0xa0>)
 80018fa:	f003 fb95 	bl	8005028 <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001904:	f000 f8d6 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	@ 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000320 	.word	0x20000320
 8001914:	40000800 	.word	0x40000800

08001918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <MX_USART2_UART_Init+0x50>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001924:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001950:	f003 fbda 	bl	8005108 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195a:	f000 f8ab 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000368 	.word	0x20000368
 8001968:	40004400 	.word	0x40004400

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <MX_GPIO_Init+0x114>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a3e      	ldr	r2, [pc, #248]	@ (8001a80 <MX_GPIO_Init+0x114>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a80 <MX_GPIO_Init+0x114>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <MX_GPIO_Init+0x114>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a38      	ldr	r2, [pc, #224]	@ (8001a80 <MX_GPIO_Init+0x114>)
 800199e:	f043 0320 	orr.w	r3, r3, #32
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b36      	ldr	r3, [pc, #216]	@ (8001a80 <MX_GPIO_Init+0x114>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <MX_GPIO_Init+0x114>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a32      	ldr	r2, [pc, #200]	@ (8001a80 <MX_GPIO_Init+0x114>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <MX_GPIO_Init+0x114>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <MX_GPIO_Init+0x114>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001a80 <MX_GPIO_Init+0x114>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <MX_GPIO_Init+0x114>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDX_GPIO_Port, LEDX_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e6:	4827      	ldr	r0, [pc, #156]	@ (8001a84 <MX_GPIO_Init+0x118>)
 80019e8:	f001 fd02 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedOnOff_Pin|ledAjuste_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80019f2:	4825      	ldr	r0, [pc, #148]	@ (8001a88 <MX_GPIO_Init+0x11c>)
 80019f4:	f001 fcfc 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDX_Pin */
  GPIO_InitStruct.Pin = LEDX_Pin;
 80019f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDX_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481c      	ldr	r0, [pc, #112]	@ (8001a84 <MX_GPIO_Init+0x118>)
 8001a12:	f001 fb69 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedOnOff_Pin ledAjuste_Pin */
  GPIO_InitStruct.Pin = LedOnOff_Pin|ledAjuste_Pin;
 8001a16:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4816      	ldr	r0, [pc, #88]	@ (8001a88 <MX_GPIO_Init+0x11c>)
 8001a30:	f001 fb5a 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Taj_Pin */
  GPIO_InitStruct.Pin = Taj_Pin;
 8001a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Taj_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480f      	ldr	r0, [pc, #60]	@ (8001a88 <MX_GPIO_Init+0x11c>)
 8001a4a:	f001 fb4d 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OnOff_Pin Mode_Pin */
  GPIO_InitStruct.Pin = OnOff_Pin|Mode_Pin;
 8001a4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a54:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <MX_GPIO_Init+0x120>)
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <MX_GPIO_Init+0x11c>)
 8001a64:	f001 fb40 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2028      	movs	r0, #40	@ 0x28
 8001a6e:	f001 faf4 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a72:	2028      	movs	r0, #40	@ 0x28
 8001a74:	f001 fb0d 	bl	8003092 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	10110000 	.word	0x10110000

08001a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aa2:	f000 fb4d 	bl	8002140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <Error_Handler+0x8>

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_MspInit+0x5c>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <HAL_MspInit+0x5c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_MspInit+0x5c>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_MspInit+0x5c>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <HAL_MspInit+0x5c>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_MspInit+0x5c>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_MspInit+0x60>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <HAL_MspInit+0x60>)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000

08001b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <HAL_ADC_MspInit+0x7c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d129      	bne.n	8001b98 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b44:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_ADC_MspInit+0x80>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a16      	ldr	r2, [pc, #88]	@ (8001ba4 <HAL_ADC_MspInit+0x80>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_ADC_MspInit+0x80>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_ADC_MspInit+0x80>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <HAL_ADC_MspInit+0x80>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_ADC_MspInit+0x80>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b74:	2301      	movs	r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	4809      	ldr	r0, [pc, #36]	@ (8001ba8 <HAL_ADC_MspInit+0x84>)
 8001b84:	f001 fab0 	bl	80030e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2012      	movs	r0, #18
 8001b8e:	f001 fa64 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b92:	2012      	movs	r0, #18
 8001b94:	f001 fa7d 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012400 	.word	0x40012400
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010800 	.word	0x40010800

08001bac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_CRC_MspInit+0x34>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_CRC_MspInit+0x38>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4a08      	ldr	r2, [pc, #32]	@ (8001be4 <HAL_CRC_MspInit+0x38>)
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc8:	6153      	str	r3, [r2, #20]
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_CRC_MspInit+0x38>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	40023000 	.word	0x40023000
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_TIM_Base_MspInit+0x58>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <HAL_TIM_Base_MspInit+0x58>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_TIM_Base_MspInit+0x58>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c12:	e010      	b.n	8001c36 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <HAL_TIM_Base_MspInit+0x5c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10b      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <HAL_TIM_Base_MspInit+0x58>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a07      	ldr	r2, [pc, #28]	@ (8001c40 <HAL_TIM_Base_MspInit+0x58>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_TIM_Base_MspInit+0x58>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40000400 	.word	0x40000400

08001c48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a15      	ldr	r2, [pc, #84]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0x70>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d123      	bne.n	8001cb0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x74>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4a13      	ldr	r2, [pc, #76]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x74>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	61d3      	str	r3, [r2, #28]
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x74>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x74>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x74>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x74>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c98:	23c0      	movs	r3, #192	@ 0xc0
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <HAL_TIM_Encoder_MspInit+0x78>)
 8001cac:	f001 fa1c 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010c00 	.word	0x40010c00

08001cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <HAL_TIM_MspPostInit+0x58>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d117      	bne.n	8001d14 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_TIM_MspPostInit+0x5c>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <HAL_TIM_MspPostInit+0x5c>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_TIM_MspPostInit+0x5c>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cfc:	2340      	movs	r3, #64	@ 0x40
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <HAL_TIM_MspPostInit+0x60>)
 8001d10:	f001 f9ea 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010800 	.word	0x40010800

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_UART_MspInit+0x88>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d12f      	bne.n	8001da8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <HAL_UART_MspInit+0x90>)
 8001d8c:	f001 f9ac 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d90:	2308      	movs	r3, #8
 8001d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <HAL_UART_MspInit+0x90>)
 8001da4:	f001 f9a0 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40004400 	.word	0x40004400
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010800 	.word	0x40010800

08001dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	@ 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e8c <HAL_InitTick+0xd0>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e8c <HAL_InitTick+0xd0>)
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ddc:	6193      	str	r3, [r2, #24]
 8001dde:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_InitTick+0xd0>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dea:	f107 020c 	add.w	r2, r7, #12
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 ff37 	bl	8003c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dfa:	f001 ff21 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8001dfe:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e02:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <HAL_InitTick+0xd4>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	0c9b      	lsrs	r3, r3, #18
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e10:	4a21      	ldr	r2, [pc, #132]	@ (8001e98 <HAL_InitTick+0xdc>)
 8001e12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e1a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e34:	4817      	ldr	r0, [pc, #92]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e36:	f002 f8d1 	bl	8003fdc <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d11b      	bne.n	8001e80 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e48:	4812      	ldr	r0, [pc, #72]	@ (8001e94 <HAL_InitTick+0xd8>)
 8001e4a:	f002 f917 	bl	800407c <HAL_TIM_Base_Start_IT>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e5c:	2019      	movs	r0, #25
 8001e5e:	f001 f918 	bl	8003092 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d808      	bhi.n	8001e7a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	2019      	movs	r0, #25
 8001e6e:	f001 f8f4 	bl	800305a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_InitTick+0xe0>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e002      	b.n	8001e80 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3730      	adds	r7, #48	@ 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	200003b4 	.word	0x200003b4
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <ADC1_2_IRQHandler+0x10>)
 8001efe:	f000 fcd9 	bl	80028b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000258 	.word	0x20000258

08001f0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <TIM1_UP_IRQHandler+0x10>)
 8001f12:	f002 fb2f 	bl	8004574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200003b4 	.word	0x200003b4

08001f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OnOff_Pin);
 8001f24:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f28:	f001 fa94 	bl	8003454 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Mode_Pin);
 8001f2c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001f30:	f001 fa90 	bl	8003454 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <_kill>:

int _kill(int pid, int sig)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f50:	f004 f87e 	bl	8006050 <__errno>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2216      	movs	r2, #22
 8001f58:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_exit>:

void _exit (int status)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffe7 	bl	8001f46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <_exit+0x12>

08001f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e00a      	b.n	8001fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f8e:	f3af 8000 	nop.w
 8001f92:	4601      	mov	r1, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbf0      	blt.n	8001f8e <_read+0x12>
  }

  return len;
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e009      	b.n	8001fdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf1      	blt.n	8001fc8 <_write+0x12>
  }
  return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_close>:

int _close(int file)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002014:	605a      	str	r2, [r3, #4]
  return 0;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <_isatty>:

int _isatty(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
	...

08002050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002058:	4a14      	ldr	r2, [pc, #80]	@ (80020ac <_sbrk+0x5c>)
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <_sbrk+0x60>)
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <_sbrk+0x64>)
 800206e:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <_sbrk+0x68>)
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d207      	bcs.n	8002090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002080:	f003 ffe6 	bl	8006050 <__errno>
 8002084:	4603      	mov	r3, r0
 8002086:	220c      	movs	r2, #12
 8002088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e009      	b.n	80020a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002090:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002096:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <_sbrk+0x64>)
 80020a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20005000 	.word	0x20005000
 80020b0:	00000400 	.word	0x00000400
 80020b4:	200003fc 	.word	0x200003fc
 80020b8:	20000550 	.word	0x20000550

080020bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c8:	f7ff fff8 	bl	80020bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480b      	ldr	r0, [pc, #44]	@ (80020fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020ce:	490c      	ldr	r1, [pc, #48]	@ (8002100 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002104 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020e4:	4c09      	ldr	r4, [pc, #36]	@ (800210c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f2:	f003 ffb3 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020f6:	f7ff f9cd 	bl	8001494 <main>
  bx lr
 80020fa:	4770      	bx	lr
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002104:	08008558 	.word	0x08008558
  ldr r2, =_sbss
 8002108:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800210c:	20000550 	.word	0x20000550

08002110 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <CAN1_RX1_IRQHandler>
	...

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_Init+0x28>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a07      	ldr	r2, [pc, #28]	@ (800213c <HAL_Init+0x28>)
 800211e:	f043 0310 	orr.w	r3, r3, #16
 8002122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 ff8d 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212a:	200f      	movs	r0, #15
 800212c:	f7ff fe46 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002130:	f7ff fcc6 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000

08002140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_IncTick+0x1c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_IncTick+0x20>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a03      	ldr	r2, [pc, #12]	@ (8002160 <HAL_IncTick+0x20>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	20000010 	.word	0x20000010
 8002160:	20000400 	.word	0x20000400

08002164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;
 8002168:	4b02      	ldr	r3, [pc, #8]	@ (8002174 <HAL_GetTick+0x10>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000400 	.word	0x20000400

08002178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff fff0 	bl	8002164 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d005      	beq.n	800219e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_Delay+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800219e:	bf00      	nop
 80021a0:	f7ff ffe0 	bl	8002164 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d8f7      	bhi.n	80021a0 <HAL_Delay+0x28>
  {
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000010 	.word	0x20000010

080021c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0be      	b.n	8002360 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fc90 	bl	8001b24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fd79 	bl	8002cfc <ADC_ConversionStop_Disable>
 800220a:	4603      	mov	r3, r0
 800220c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8099 	bne.w	800234e <HAL_ADC_Init+0x18e>
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8095 	bne.w	800234e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800222c:	f023 0302 	bic.w	r3, r3, #2
 8002230:	f043 0202 	orr.w	r2, r3, #2
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002240:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7b1b      	ldrb	r3, [r3, #12]
 8002246:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002248:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4313      	orrs	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002258:	d003      	beq.n	8002262 <HAL_ADC_Init+0xa2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_ADC_Init+0xa8>
 8002262:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002266:	e000      	b.n	800226a <HAL_ADC_Init+0xaa>
 8002268:	2300      	movs	r3, #0
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7d1b      	ldrb	r3, [r3, #20]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d119      	bne.n	80022ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7b1b      	ldrb	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	3b01      	subs	r3, #1
 8002286:	035a      	lsls	r2, r3, #13
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	e00b      	b.n	80022ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	430a      	orrs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4b28      	ldr	r3, [pc, #160]	@ (8002368 <HAL_ADC_Init+0x1a8>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022dc:	d003      	beq.n	80022e6 <HAL_ADC_Init+0x126>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d104      	bne.n	80022f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	430a      	orrs	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <HAL_ADC_Init+0x1ac>)
 800230c:	4013      	ands	r3, r2
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	d10b      	bne.n	800232c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800232a:	e018      	b.n	800235e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f023 0312 	bic.w	r3, r3, #18
 8002334:	f043 0210 	orr.w	r2, r3, #16
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800234c:	e007      	b.n	800235e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800235e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	ffe1f7fd 	.word	0xffe1f7fd
 800236c:	ff1f0efe 	.word	0xff1f0efe

08002370 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADC_Start+0x1a>
 8002386:	2302      	movs	r3, #2
 8002388:	e098      	b.n	80024bc <HAL_ADC_Start+0x14c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fc58 	bl	8002c48 <ADC_Enable>
 8002398:	4603      	mov	r3, r0
 800239a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 8087 	bne.w	80024b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a41      	ldr	r2, [pc, #260]	@ (80024c4 <HAL_ADC_Start+0x154>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d105      	bne.n	80023ce <HAL_ADC_Start+0x5e>
 80023c2:	4b41      	ldr	r3, [pc, #260]	@ (80024c8 <HAL_ADC_Start+0x158>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d026      	beq.n	8002436 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f8:	e01d      	b.n	8002436 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2f      	ldr	r2, [pc, #188]	@ (80024c8 <HAL_ADC_Start+0x158>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d004      	beq.n	800241a <HAL_ADC_Start+0xaa>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2b      	ldr	r2, [pc, #172]	@ (80024c4 <HAL_ADC_Start+0x154>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10d      	bne.n	8002436 <HAL_ADC_Start+0xc6>
 800241a:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_ADC_Start+0x158>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800242e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	f023 0206 	bic.w	r2, r3, #6
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800244e:	e002      	b.n	8002456 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f06f 0202 	mvn.w	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002472:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002476:	d113      	bne.n	80024a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800247c:	4a11      	ldr	r2, [pc, #68]	@ (80024c4 <HAL_ADC_Start+0x154>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d105      	bne.n	800248e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_ADC_Start+0x158>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	e00c      	b.n	80024ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e003      	b.n	80024ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40012800 	.word	0x40012800
 80024c8:	40012400 	.word	0x40012400

080024cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_Stop+0x1a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e01a      	b.n	800251c <HAL_ADC_Stop+0x50>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fc04 	bl	8002cfc <ADC_ConversionStop_Disable>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002502:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800253a:	f7ff fe13 	bl	8002164 <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0d3      	b.n	800270e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d131      	bne.n	80025d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d12a      	bne.n	80025d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002582:	e021      	b.n	80025c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d01d      	beq.n	80025c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_ADC_PollForConversion+0x7e>
 8002592:	f7ff fde7 	bl	8002164 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d212      	bcs.n	80025c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0a2      	b.n	800270e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0d6      	beq.n	8002584 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025d6:	e070      	b.n	80026ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002718 <HAL_ADC_PollForConversion+0x1f4>)
 80025da:	681c      	ldr	r4, [r3, #0]
 80025dc:	2002      	movs	r0, #2
 80025de:	f001 fc47 	bl	8003e70 <HAL_RCCEx_GetPeriphCLKFreq>
 80025e2:	4603      	mov	r3, r0
 80025e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6919      	ldr	r1, [r3, #16]
 80025ee:	4b4b      	ldr	r3, [pc, #300]	@ (800271c <HAL_ADC_PollForConversion+0x1f8>)
 80025f0:	400b      	ands	r3, r1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_ADC_PollForConversion+0x104>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68d9      	ldr	r1, [r3, #12]
 80025fc:	4b48      	ldr	r3, [pc, #288]	@ (8002720 <HAL_ADC_PollForConversion+0x1fc>)
 80025fe:	400b      	ands	r3, r1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d111      	bne.n	8002628 <HAL_ADC_PollForConversion+0x104>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	4b46      	ldr	r3, [pc, #280]	@ (8002724 <HAL_ADC_PollForConversion+0x200>)
 800260c:	400b      	ands	r3, r1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HAL_ADC_PollForConversion+0x100>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68d9      	ldr	r1, [r3, #12]
 8002618:	4b43      	ldr	r3, [pc, #268]	@ (8002728 <HAL_ADC_PollForConversion+0x204>)
 800261a:	400b      	ands	r3, r1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_PollForConversion+0x100>
 8002620:	2314      	movs	r3, #20
 8002622:	e020      	b.n	8002666 <HAL_ADC_PollForConversion+0x142>
 8002624:	2329      	movs	r3, #41	@ 0x29
 8002626:	e01e      	b.n	8002666 <HAL_ADC_PollForConversion+0x142>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	4b3d      	ldr	r3, [pc, #244]	@ (8002724 <HAL_ADC_PollForConversion+0x200>)
 8002630:	400b      	ands	r3, r1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_ADC_PollForConversion+0x120>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68d9      	ldr	r1, [r3, #12]
 800263c:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <HAL_ADC_PollForConversion+0x204>)
 800263e:	400b      	ands	r3, r1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <HAL_ADC_PollForConversion+0x13c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6919      	ldr	r1, [r3, #16]
 800264a:	4b38      	ldr	r3, [pc, #224]	@ (800272c <HAL_ADC_PollForConversion+0x208>)
 800264c:	400b      	ands	r3, r1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <HAL_ADC_PollForConversion+0x140>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68d9      	ldr	r1, [r3, #12]
 8002658:	4b34      	ldr	r3, [pc, #208]	@ (800272c <HAL_ADC_PollForConversion+0x208>)
 800265a:	400b      	ands	r3, r1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_PollForConversion+0x140>
 8002660:	2354      	movs	r3, #84	@ 0x54
 8002662:	e000      	b.n	8002666 <HAL_ADC_PollForConversion+0x142>
 8002664:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800266c:	e021      	b.n	80026b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d01a      	beq.n	80026ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_ADC_PollForConversion+0x168>
 800267c:	f7ff fd72 	bl	8002164 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d20f      	bcs.n	80026ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	429a      	cmp	r2, r3
 8002692:	d90b      	bls.n	80026ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	f043 0204 	orr.w	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e030      	b.n	800270e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d8d9      	bhi.n	800266e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f06f 0212 	mvn.w	r2, #18
 80026c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80026da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80026de:	d115      	bne.n	800270c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd90      	pop	{r4, r7, pc}
 8002716:	bf00      	nop
 8002718:	20000008 	.word	0x20000008
 800271c:	24924924 	.word	0x24924924
 8002720:	00924924 	.word	0x00924924
 8002724:	12492492 	.word	0x12492492
 8002728:	00492492 	.word	0x00492492
 800272c:	00249249 	.word	0x00249249

08002730 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_Start_IT+0x1a>
 8002746:	2302      	movs	r3, #2
 8002748:	e0a0      	b.n	800288c <HAL_ADC_Start_IT+0x15c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa78 	bl	8002c48 <ADC_Enable>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 808f 	bne.w	8002882 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a45      	ldr	r2, [pc, #276]	@ (8002894 <HAL_ADC_Start_IT+0x164>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d105      	bne.n	800278e <HAL_ADC_Start_IT+0x5e>
 8002782:	4b45      	ldr	r3, [pc, #276]	@ (8002898 <HAL_ADC_Start_IT+0x168>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d026      	beq.n	80027f6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b8:	e01d      	b.n	80027f6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <HAL_ADC_Start_IT+0x168>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_ADC_Start_IT+0xaa>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002894 <HAL_ADC_Start_IT+0x164>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10d      	bne.n	80027f6 <HAL_ADC_Start_IT+0xc6>
 80027da:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <HAL_ADC_Start_IT+0x168>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	f023 0206 	bic.w	r2, r3, #6
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800280e:	e002      	b.n	8002816 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f06f 0202 	mvn.w	r2, #2
 8002826:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0220 	orr.w	r2, r2, #32
 8002836:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002842:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002846:	d113      	bne.n	8002870 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800284c:	4a11      	ldr	r2, [pc, #68]	@ (8002894 <HAL_ADC_Start_IT+0x164>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d105      	bne.n	800285e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_ADC_Start_IT+0x168>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	e00c      	b.n	800288a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e003      	b.n	800288a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40012800 	.word	0x40012800
 8002898:	40012400 	.word	0x40012400

0800289c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03e      	beq.n	8002954 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d039      	beq.n	8002954 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002902:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002906:	d11d      	bne.n	8002944 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800290c:	2b00      	cmp	r3, #0
 800290e:	d119      	bne.n	8002944 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0220 	bic.w	r2, r2, #32
 800291e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f874 	bl	8002a32 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f06f 0212 	mvn.w	r2, #18
 8002952:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04d      	beq.n	80029fa <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d048      	beq.n	80029fa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800298a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800298e:	d012      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800299a:	2b00      	cmp	r3, #0
 800299c:	d125      	bne.n	80029ea <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029a8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029ac:	d11d      	bne.n	80029ea <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa76 	bl	8002edc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 020c 	mvn.w	r2, #12
 80029f8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d012      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f812 	bl	8002a44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0201 	mvn.w	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x20>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0dc      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1da>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	d81c      	bhi.n	8002ac2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	3b05      	subs	r3, #5
 8002a9a:	221f      	movs	r2, #31
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	4019      	ands	r1, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b05      	subs	r3, #5
 8002ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ac0:	e03c      	b.n	8002b3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d81c      	bhi.n	8002b04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	3b23      	subs	r3, #35	@ 0x23
 8002adc:	221f      	movs	r2, #31
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4019      	ands	r1, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	3b23      	subs	r3, #35	@ 0x23
 8002af6:	fa00 f203 	lsl.w	r2, r0, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b02:	e01b      	b.n	8002b3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	3b41      	subs	r3, #65	@ 0x41
 8002b16:	221f      	movs	r2, #31
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4019      	ands	r1, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b41      	subs	r3, #65	@ 0x41
 8002b30:	fa00 f203 	lsl.w	r2, r0, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d91c      	bls.n	8002b7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68d9      	ldr	r1, [r3, #12]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	3b1e      	subs	r3, #30
 8002b56:	2207      	movs	r2, #7
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	4019      	ands	r1, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6898      	ldr	r0, [r3, #8]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b1e      	subs	r3, #30
 8002b70:	fa00 f203 	lsl.w	r2, r0, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	e019      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6919      	ldr	r1, [r3, #16]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	2207      	movs	r2, #7
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	4019      	ands	r1, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6898      	ldr	r0, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d003      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bbe:	2b11      	cmp	r3, #17
 8002bc0:	d132      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_ADC_ConfigChannel+0x1e4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d125      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d126      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002be8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d11a      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9a      	lsrs	r2, r3, #18
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x1b2>
 8002c16:	e007      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40012400 	.word	0x40012400
 8002c40:	20000008 	.word	0x20000008
 8002c44:	431bde83 	.word	0x431bde83

08002c48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d040      	beq.n	8002ce8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c76:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf4 <ADC_Enable+0xac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <ADC_Enable+0xb0>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	0c9b      	lsrs	r3, r3, #18
 8002c82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c84:	e002      	b.n	8002c8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f9      	bne.n	8002c86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c92:	f7ff fa67 	bl	8002164 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c98:	e01f      	b.n	8002cda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c9a:	f7ff fa63 	bl	8002164 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d918      	bls.n	8002cda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d011      	beq.n	8002cda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	f043 0210 	orr.w	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e007      	b.n	8002cea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d1d8      	bne.n	8002c9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	431bde83 	.word	0x431bde83

08002cfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d12e      	bne.n	8002d74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d26:	f7ff fa1d 	bl	8002164 <HAL_GetTick>
 8002d2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d2c:	e01b      	b.n	8002d66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d2e:	f7ff fa19 	bl	8002164 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d914      	bls.n	8002d66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10d      	bne.n	8002d66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	f043 0210 	orr.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e007      	b.n	8002d76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d0dc      	beq.n	8002d2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_ADCEx_Calibration_Start+0x1e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e097      	b.n	8002ece <HAL_ADCEx_Calibration_Start+0x14e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffa8 	bl	8002cfc <ADC_ConversionStop_Disable>
 8002dac:	4603      	mov	r3, r0
 8002dae:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff49 	bl	8002c48 <ADC_Enable>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 8081 	bne.w	8002ec4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dca:	f023 0302 	bic.w	r3, r3, #2
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002dd6:	4b40      	ldr	r3, [pc, #256]	@ (8002ed8 <HAL_ADCEx_Calibration_Start+0x158>)
 8002dd8:	681c      	ldr	r4, [r3, #0]
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f001 f848 	bl	8003e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8002de0:	4603      	mov	r3, r0
 8002de2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002de6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002de8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002dea:	e002      	b.n	8002df2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f9      	bne.n	8002dec <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0208 	orr.w	r2, r2, #8
 8002e06:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e08:	f7ff f9ac 	bl	8002164 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e0e:	e01b      	b.n	8002e48 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e10:	f7ff f9a8 	bl	8002164 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b0a      	cmp	r3, #10
 8002e1c:	d914      	bls.n	8002e48 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	f023 0312 	bic.w	r3, r3, #18
 8002e34:	f043 0210 	orr.w	r2, r3, #16
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e042      	b.n	8002ece <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1dc      	bne.n	8002e10 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0204 	orr.w	r2, r2, #4
 8002e64:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e66:	f7ff f97d 	bl	8002164 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e6c:	e01b      	b.n	8002ea6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e6e:	f7ff f979 	bl	8002164 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b0a      	cmp	r3, #10
 8002e7a:	d914      	bls.n	8002ea6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	f023 0312 	bic.w	r3, r3, #18
 8002e92:	f043 0210 	orr.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e013      	b.n	8002ece <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1dc      	bne.n	8002e6e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	f023 0303 	bic.w	r3, r3, #3
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000008 	.word	0x20000008

08002edc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
	...

08002ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f22:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	60d3      	str	r3, [r2, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4906      	ldr	r1, [pc, #24]	@ (8002f88 <__NVIC_EnableIRQ+0x34>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	@ (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	@ (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	@ 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff4f 	bl	8002ef0 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff64 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ffb2 	bl	8002fe0 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff81 	bl	8002f8c <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff57 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00e      	b.n	80030de <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	795b      	ldrb	r3, [r3, #5]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fe fd6b 	bl	8001bac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b08b      	sub	sp, #44	@ 0x2c
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e169      	b.n	80033d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030fc:	2201      	movs	r2, #1
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8158 	bne.w	80033ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a9a      	ldr	r2, [pc, #616]	@ (8003388 <HAL_GPIO_Init+0x2a0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d05e      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003124:	4a98      	ldr	r2, [pc, #608]	@ (8003388 <HAL_GPIO_Init+0x2a0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d875      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800312a:	4a98      	ldr	r2, [pc, #608]	@ (800338c <HAL_GPIO_Init+0x2a4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d058      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003130:	4a96      	ldr	r2, [pc, #600]	@ (800338c <HAL_GPIO_Init+0x2a4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d86f      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003136:	4a96      	ldr	r2, [pc, #600]	@ (8003390 <HAL_GPIO_Init+0x2a8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d052      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 800313c:	4a94      	ldr	r2, [pc, #592]	@ (8003390 <HAL_GPIO_Init+0x2a8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d869      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003142:	4a94      	ldr	r2, [pc, #592]	@ (8003394 <HAL_GPIO_Init+0x2ac>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04c      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003148:	4a92      	ldr	r2, [pc, #584]	@ (8003394 <HAL_GPIO_Init+0x2ac>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d863      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800314e:	4a92      	ldr	r2, [pc, #584]	@ (8003398 <HAL_GPIO_Init+0x2b0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d046      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003154:	4a90      	ldr	r2, [pc, #576]	@ (8003398 <HAL_GPIO_Init+0x2b0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d85d      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800315a:	2b12      	cmp	r3, #18
 800315c:	d82a      	bhi.n	80031b4 <HAL_GPIO_Init+0xcc>
 800315e:	2b12      	cmp	r3, #18
 8003160:	d859      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <HAL_GPIO_Init+0x80>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	080031e3 	.word	0x080031e3
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031cf 	.word	0x080031cf
 8003174:	08003211 	.word	0x08003211
 8003178:	08003217 	.word	0x08003217
 800317c:	08003217 	.word	0x08003217
 8003180:	08003217 	.word	0x08003217
 8003184:	08003217 	.word	0x08003217
 8003188:	08003217 	.word	0x08003217
 800318c:	08003217 	.word	0x08003217
 8003190:	08003217 	.word	0x08003217
 8003194:	08003217 	.word	0x08003217
 8003198:	08003217 	.word	0x08003217
 800319c:	08003217 	.word	0x08003217
 80031a0:	08003217 	.word	0x08003217
 80031a4:	08003217 	.word	0x08003217
 80031a8:	08003217 	.word	0x08003217
 80031ac:	080031c5 	.word	0x080031c5
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	4a79      	ldr	r2, [pc, #484]	@ (800339c <HAL_GPIO_Init+0x2b4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ba:	e02c      	b.n	8003216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e029      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e024      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	3308      	adds	r3, #8
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e01f      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	330c      	adds	r3, #12
 80031de:	623b      	str	r3, [r7, #32]
          break;
 80031e0:	e01a      	b.n	8003218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ea:	2304      	movs	r3, #4
 80031ec:	623b      	str	r3, [r7, #32]
          break;
 80031ee:	e013      	b.n	8003218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f8:	2308      	movs	r3, #8
 80031fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	611a      	str	r2, [r3, #16]
          break;
 8003202:	e009      	b.n	8003218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003204:	2308      	movs	r3, #8
 8003206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	615a      	str	r2, [r3, #20]
          break;
 800320e:	e003      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003210:	2300      	movs	r3, #0
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	e000      	b.n	8003218 <HAL_GPIO_Init+0x130>
          break;
 8003216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2bff      	cmp	r3, #255	@ 0xff
 800321c:	d801      	bhi.n	8003222 <HAL_GPIO_Init+0x13a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_Init+0x13e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2bff      	cmp	r3, #255	@ 0xff
 800322c:	d802      	bhi.n	8003234 <HAL_GPIO_Init+0x14c>
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_Init+0x152>
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	3b08      	subs	r3, #8
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	210f      	movs	r1, #15
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	401a      	ands	r2, r3
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80b1 	beq.w	80033ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003268:	4b4d      	ldr	r3, [pc, #308]	@ (80033a0 <HAL_GPIO_Init+0x2b8>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a4c      	ldr	r2, [pc, #304]	@ (80033a0 <HAL_GPIO_Init+0x2b8>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6193      	str	r3, [r2, #24]
 8003274:	4b4a      	ldr	r3, [pc, #296]	@ (80033a0 <HAL_GPIO_Init+0x2b8>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003280:	4a48      	ldr	r2, [pc, #288]	@ (80033a4 <HAL_GPIO_Init+0x2bc>)
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a40      	ldr	r2, [pc, #256]	@ (80033a8 <HAL_GPIO_Init+0x2c0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_GPIO_Init+0x1ec>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3f      	ldr	r2, [pc, #252]	@ (80033ac <HAL_GPIO_Init+0x2c4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00d      	beq.n	80032d0 <HAL_GPIO_Init+0x1e8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3e      	ldr	r2, [pc, #248]	@ (80033b0 <HAL_GPIO_Init+0x2c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <HAL_GPIO_Init+0x1e4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3d      	ldr	r2, [pc, #244]	@ (80033b4 <HAL_GPIO_Init+0x2cc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_GPIO_Init+0x1e0>
 80032c4:	2303      	movs	r3, #3
 80032c6:	e006      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e004      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e002      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032d4:	2300      	movs	r3, #0
 80032d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d8:	f002 0203 	and.w	r2, r2, #3
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	4093      	lsls	r3, r2
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032e6:	492f      	ldr	r1, [pc, #188]	@ (80033a4 <HAL_GPIO_Init+0x2bc>)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003300:	4b2d      	ldr	r3, [pc, #180]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	492c      	ldr	r1, [pc, #176]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800330e:	4b2a      	ldr	r3, [pc, #168]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	43db      	mvns	r3, r3
 8003316:	4928      	ldr	r1, [pc, #160]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003318:	4013      	ands	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003328:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	4922      	ldr	r1, [pc, #136]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003336:	4b20      	ldr	r3, [pc, #128]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	43db      	mvns	r3, r3
 800333e:	491e      	ldr	r1, [pc, #120]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003340:	4013      	ands	r3, r2
 8003342:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003350:	4b19      	ldr	r3, [pc, #100]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4918      	ldr	r1, [pc, #96]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800335e:	4b16      	ldr	r3, [pc, #88]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	43db      	mvns	r3, r3
 8003366:	4914      	ldr	r1, [pc, #80]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003368:	4013      	ands	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d021      	beq.n	80033bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003378:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	490e      	ldr	r1, [pc, #56]	@ (80033b8 <HAL_GPIO_Init+0x2d0>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
 8003384:	e021      	b.n	80033ca <HAL_GPIO_Init+0x2e2>
 8003386:	bf00      	nop
 8003388:	10320000 	.word	0x10320000
 800338c:	10310000 	.word	0x10310000
 8003390:	10220000 	.word	0x10220000
 8003394:	10210000 	.word	0x10210000
 8003398:	10120000 	.word	0x10120000
 800339c:	10110000 	.word	0x10110000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40010800 	.word	0x40010800
 80033ac:	40010c00 	.word	0x40010c00
 80033b0:	40011000 	.word	0x40011000
 80033b4:	40011400 	.word	0x40011400
 80033b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_GPIO_Init+0x304>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	4909      	ldr	r1, [pc, #36]	@ (80033ec <HAL_GPIO_Init+0x304>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f47f ae8e 	bne.w	80030fc <HAL_GPIO_Init+0x14>
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	372c      	adds	r7, #44	@ 0x2c
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800340c:	e003      	b.n	8003416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	041a      	lsls	r2, r3, #16
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43d9      	mvns	r1, r3
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	400b      	ands	r3, r1
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	611a      	str	r2, [r3, #16]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
	...

08003454 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800345e:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800346a:	4a05      	ldr	r2, [pc, #20]	@ (8003480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd ffe2 	bl	800143c <HAL_GPIO_EXTI_Callback>
  }
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40010400 	.word	0x40010400

08003484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e272      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8087 	beq.w	80035b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a4:	4b92      	ldr	r3, [pc, #584]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d00c      	beq.n	80034ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034b0:	4b8f      	ldr	r3, [pc, #572]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d112      	bne.n	80034e2 <HAL_RCC_OscConfig+0x5e>
 80034bc:	4b8c      	ldr	r3, [pc, #560]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d10b      	bne.n	80034e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ca:	4b89      	ldr	r3, [pc, #548]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d06c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x12c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d168      	bne.n	80035b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e24c      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x76>
 80034ec:	4b80      	ldr	r3, [pc, #512]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a7f      	ldr	r2, [pc, #508]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e02e      	b.n	8003558 <HAL_RCC_OscConfig+0xd4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x98>
 8003502:	4b7b      	ldr	r3, [pc, #492]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7a      	ldr	r2, [pc, #488]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b78      	ldr	r3, [pc, #480]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a77      	ldr	r2, [pc, #476]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003514:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01d      	b.n	8003558 <HAL_RCC_OscConfig+0xd4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0xbc>
 8003526:	4b72      	ldr	r3, [pc, #456]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a71      	ldr	r2, [pc, #452]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b6f      	ldr	r3, [pc, #444]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a6e      	ldr	r2, [pc, #440]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xd4>
 8003540:	4b6b      	ldr	r3, [pc, #428]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6a      	ldr	r2, [pc, #424]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b68      	ldr	r3, [pc, #416]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a67      	ldr	r2, [pc, #412]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003556:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe fe00 	bl	8002164 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe fdfc 	bl	8002164 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e200      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b5d      	ldr	r3, [pc, #372]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0xe4>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe fdec 	bl	8002164 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe fde8 	bl	8002164 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	@ 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1ec      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	4b53      	ldr	r3, [pc, #332]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x10c>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d063      	beq.n	8003686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035be:	4b4c      	ldr	r3, [pc, #304]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ca:	4b49      	ldr	r3, [pc, #292]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d11c      	bne.n	8003610 <HAL_RCC_OscConfig+0x18c>
 80035d6:	4b46      	ldr	r3, [pc, #280]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	4b43      	ldr	r3, [pc, #268]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x176>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e1c0      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fa:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4939      	ldr	r1, [pc, #228]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	e03a      	b.n	8003686 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003618:	4b36      	ldr	r3, [pc, #216]	@ (80036f4 <HAL_RCC_OscConfig+0x270>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fe fda1 	bl	8002164 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003626:	f7fe fd9d 	bl	8002164 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e1a1      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003638:	4b2d      	ldr	r3, [pc, #180]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4927      	ldr	r1, [pc, #156]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	e015      	b.n	8003686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365a:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <HAL_RCC_OscConfig+0x270>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe fd80 	bl	8002164 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003668:	f7fe fd7c 	bl	8002164 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e180      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367a:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d03a      	beq.n	8003708 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d019      	beq.n	80036ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369a:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <HAL_RCC_OscConfig+0x274>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe fd60 	bl	8002164 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a8:	f7fe fd5c 	bl	8002164 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e160      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036c6:	2001      	movs	r0, #1
 80036c8:	f000 fafe 	bl	8003cc8 <RCC_Delay>
 80036cc:	e01c      	b.n	8003708 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ce:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <HAL_RCC_OscConfig+0x274>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d4:	f7fe fd46 	bl	8002164 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036da:	e00f      	b.n	80036fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fe fd42 	bl	8002164 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d908      	bls.n	80036fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e146      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	42420000 	.word	0x42420000
 80036f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	4b92      	ldr	r3, [pc, #584]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e9      	bne.n	80036dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a6 	beq.w	8003862 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b8b      	ldr	r3, [pc, #556]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10d      	bne.n	8003742 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	4b88      	ldr	r3, [pc, #544]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4a87      	ldr	r2, [pc, #540]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003730:	61d3      	str	r3, [r2, #28]
 8003732:	4b85      	ldr	r3, [pc, #532]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003742:	4b82      	ldr	r3, [pc, #520]	@ (800394c <HAL_RCC_OscConfig+0x4c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d118      	bne.n	8003780 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374e:	4b7f      	ldr	r3, [pc, #508]	@ (800394c <HAL_RCC_OscConfig+0x4c8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7e      	ldr	r2, [pc, #504]	@ (800394c <HAL_RCC_OscConfig+0x4c8>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375a:	f7fe fd03 	bl	8002164 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003762:	f7fe fcff 	bl	8002164 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b64      	cmp	r3, #100	@ 0x64
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e103      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	4b75      	ldr	r3, [pc, #468]	@ (800394c <HAL_RCC_OscConfig+0x4c8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d106      	bne.n	8003796 <HAL_RCC_OscConfig+0x312>
 8003788:	4b6f      	ldr	r3, [pc, #444]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a6e      	ldr	r2, [pc, #440]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6213      	str	r3, [r2, #32]
 8003794:	e02d      	b.n	80037f2 <HAL_RCC_OscConfig+0x36e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x334>
 800379e:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a69      	ldr	r2, [pc, #420]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6213      	str	r3, [r2, #32]
 80037aa:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	4a66      	ldr	r2, [pc, #408]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	6213      	str	r3, [r2, #32]
 80037b6:	e01c      	b.n	80037f2 <HAL_RCC_OscConfig+0x36e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d10c      	bne.n	80037da <HAL_RCC_OscConfig+0x356>
 80037c0:	4b61      	ldr	r3, [pc, #388]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4a60      	ldr	r2, [pc, #384]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6213      	str	r3, [r2, #32]
 80037cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6213      	str	r3, [r2, #32]
 80037d8:	e00b      	b.n	80037f2 <HAL_RCC_OscConfig+0x36e>
 80037da:	4b5b      	ldr	r3, [pc, #364]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a5a      	ldr	r2, [pc, #360]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	4b58      	ldr	r3, [pc, #352]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4a57      	ldr	r2, [pc, #348]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7fe fcb3 	bl	8002164 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe fcaf 	bl	8002164 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0b1      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4b4b      	ldr	r3, [pc, #300]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ee      	beq.n	8003802 <HAL_RCC_OscConfig+0x37e>
 8003824:	e014      	b.n	8003850 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe fc9d 	bl	8002164 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fc99 	bl	8002164 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e09b      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003844:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b3c      	ldr	r3, [pc, #240]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4a3b      	ldr	r2, [pc, #236]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003860:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8087 	beq.w	800397a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386c:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d061      	beq.n	800393c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d146      	bne.n	800390e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b33      	ldr	r3, [pc, #204]	@ (8003950 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe fc6d 	bl	8002164 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fe fc69 	bl	8002164 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e06d      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a0:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b4:	d108      	bne.n	80038c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038b6:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4921      	ldr	r1, [pc, #132]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a19      	ldr	r1, [r3, #32]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	430b      	orrs	r3, r1
 80038da:	491b      	ldr	r1, [pc, #108]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <HAL_RCC_OscConfig+0x4cc>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fc3d 	bl	8002164 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe fc39 	bl	8002164 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e03d      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003900:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x46a>
 800390c:	e035      	b.n	800397a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <HAL_RCC_OscConfig+0x4cc>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fc26 	bl	8002164 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fc22 	bl	8002164 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e026      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x498>
 800393a:	e01e      	b.n	800397a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e019      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_RCC_OscConfig+0x500>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	429a      	cmp	r2, r3
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000

08003988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0d0      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d910      	bls.n	80039cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b67      	ldr	r3, [pc, #412]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 0207 	bic.w	r2, r3, #7
 80039b2:	4965      	ldr	r1, [pc, #404]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b63      	ldr	r3, [pc, #396]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0b8      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e4:	4b59      	ldr	r3, [pc, #356]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a58      	ldr	r2, [pc, #352]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039fc:	4b53      	ldr	r3, [pc, #332]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4a52      	ldr	r2, [pc, #328]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b50      	ldr	r3, [pc, #320]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	494d      	ldr	r1, [pc, #308]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d040      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b47      	ldr	r3, [pc, #284]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b41      	ldr	r3, [pc, #260]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e073      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b3d      	ldr	r3, [pc, #244]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e06b      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b39      	ldr	r3, [pc, #228]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4936      	ldr	r1, [pc, #216]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a78:	f7fe fb74 	bl	8002164 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe fb70 	bl	8002164 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e053      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b27      	ldr	r3, [pc, #156]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d210      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b24      	ldr	r3, [pc, #144]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 0207 	bic.w	r2, r3, #7
 8003abe:	4922      	ldr	r1, [pc, #136]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e032      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4916      	ldr	r1, [pc, #88]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b02:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	490e      	ldr	r1, [pc, #56]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b16:	f000 f821 	bl	8003b5c <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	490a      	ldr	r1, [pc, #40]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2e:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <HAL_RCC_ClockConfig+0x1cc>)
 8003b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b32:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_ClockConfig+0x1d0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe f940 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08008198 	.word	0x08008198
 8003b54:	20000008 	.word	0x20000008
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b76:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x30>
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x36>
 8003b8a:	e027      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b8e:	613b      	str	r3, [r7, #16]
      break;
 8003b90:	e027      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	0c9b      	lsrs	r3, r3, #18
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	4a17      	ldr	r2, [pc, #92]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b9c:	5cd3      	ldrb	r3, [r2, r3]
 8003b9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d010      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003baa:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	0c5b      	lsrs	r3, r3, #17
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	4a11      	ldr	r2, [pc, #68]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bbe:	fb03 f202 	mul.w	r2, r3, r2
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e004      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	613b      	str	r3, [r7, #16]
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bde:	613b      	str	r3, [r7, #16]
      break;
 8003be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be2:	693b      	ldr	r3, [r7, #16]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	007a1200 	.word	0x007a1200
 8003bf8:	080081b0 	.word	0x080081b0
 8003bfc:	080081c0 	.word	0x080081c0
 8003c00:	003d0900 	.word	0x003d0900

08003c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c08:	4b02      	ldr	r3, [pc, #8]	@ (8003c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	20000008 	.word	0x20000008

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c1c:	f7ff fff2 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	@ (8003c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	080081a8 	.word	0x080081a8

08003c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c44:	f7ff ffde 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	0adb      	lsrs	r3, r3, #11
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	@ (8003c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	080081a8 	.word	0x080081a8

08003c68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	220f      	movs	r2, #15
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c78:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <HAL_RCC_GetClockConfig+0x58>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c84:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc0 <HAL_RCC_GetClockConfig+0x58>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <HAL_RCC_GetClockConfig+0x58>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c9c:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <HAL_RCC_GetClockConfig+0x58>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	08db      	lsrs	r3, r3, #3
 8003ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0207 	and.w	r2, r3, #7
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40022000 	.word	0x40022000

08003cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cfc <RCC_Delay+0x34>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d00 <RCC_Delay+0x38>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0a5b      	lsrs	r3, r3, #9
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ce4:	bf00      	nop
  }
  while (Delay --);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	60fa      	str	r2, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f9      	bne.n	8003ce4 <RCC_Delay+0x1c>
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	20000008 	.word	0x20000008
 8003d00:	10624dd3 	.word	0x10624dd3

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d07d      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d24:	4b4f      	ldr	r3, [pc, #316]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b4c      	ldr	r3, [pc, #304]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	4a4b      	ldr	r2, [pc, #300]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	61d3      	str	r3, [r2, #28]
 8003d3c:	4b49      	ldr	r3, [pc, #292]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	4b46      	ldr	r3, [pc, #280]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d118      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d58:	4b43      	ldr	r3, [pc, #268]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d64:	f7fe f9fe 	bl	8002164 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fe f9fa 	bl	8002164 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e06d      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d8a:	4b36      	ldr	r3, [pc, #216]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d027      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db2:	4b2e      	ldr	r3, [pc, #184]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dbe:	4a29      	ldr	r2, [pc, #164]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d014      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe f9c9 	bl	8002164 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe f9c5 	bl	8002164 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e036      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ee      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4917      	ldr	r1, [pc, #92]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e28:	4b0e      	ldr	r3, [pc, #56]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	490b      	ldr	r1, [pc, #44]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e46:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4904      	ldr	r1, [pc, #16]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	42420440 	.word	0x42420440

08003e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	f200 808a 	bhi.w	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d045      	beq.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d075      	beq.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ea6:	e082      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ea8:	4b46      	ldr	r3, [pc, #280]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003eae:	4b45      	ldr	r3, [pc, #276]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d07b      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	0c9b      	lsrs	r3, r3, #18
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	4a41      	ldr	r2, [pc, #260]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	0c5b      	lsrs	r3, r3, #17
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	4a3b      	ldr	r2, [pc, #236]	@ (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
 8003ee0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003eec:	4a38      	ldr	r2, [pc, #224]	@ (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a34      	ldr	r2, [pc, #208]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f08:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f14:	d102      	bne.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	61bb      	str	r3, [r7, #24]
      break;
 8003f1a:	e04a      	b.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4a2d      	ldr	r2, [pc, #180]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
      break;
 8003f2a:	e042      	b.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f2c:	4b25      	ldr	r3, [pc, #148]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	e01f      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5a:	d109      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f68:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e00f      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7a:	d11c      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f7c:	4b11      	ldr	r3, [pc, #68]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003f88:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003f8c:	61bb      	str	r3, [r7, #24]
      break;
 8003f8e:	e012      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f90:	e011      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f92:	f7ff fe55 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0b9b      	lsrs	r3, r3, #14
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	61bb      	str	r3, [r7, #24]
      break;
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fb6:	bf00      	nop
    }
  }
  return (frequency);
 8003fb8:	69bb      	ldr	r3, [r7, #24]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	080081c4 	.word	0x080081c4
 8003fcc:	080081d4 	.word	0x080081d4
 8003fd0:	007a1200 	.word	0x007a1200
 8003fd4:	003d0900 	.word	0x003d0900
 8003fd8:	aaaaaaab 	.word	0xaaaaaaab

08003fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e041      	b.n	8004072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd fdf0 	bl	8001be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 fd60 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d001      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e03a      	b.n	800410a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <HAL_TIM_Base_Start_IT+0x98>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x58>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d009      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x58>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a14      	ldr	r2, [pc, #80]	@ (8004118 <HAL_TIM_Base_Start_IT+0x9c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x58>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a13      	ldr	r2, [pc, #76]	@ (800411c <HAL_TIM_Base_Start_IT+0xa0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d010      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	e007      	b.n	8004108 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800

08004120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e041      	b.n	80041b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f839 	bl	80041be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 fcbe 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_TIM_PWM_Start+0x24>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e022      	b.n	800423a <HAL_TIM_PWM_Start+0x6a>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d109      	bne.n	800420e <HAL_TIM_PWM_Start+0x3e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e015      	b.n	800423a <HAL_TIM_PWM_Start+0x6a>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d109      	bne.n	8004228 <HAL_TIM_PWM_Start+0x58>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e008      	b.n	800423a <HAL_TIM_PWM_Start+0x6a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e05e      	b.n	8004300 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004250:	e013      	b.n	800427a <HAL_TIM_PWM_Start+0xaa>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start+0x92>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004260:	e00b      	b.n	800427a <HAL_TIM_PWM_Start+0xaa>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start+0xa2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004270:	e003      	b.n	800427a <HAL_TIM_PWM_Start+0xaa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2201      	movs	r2, #1
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 feac 	bl	8004fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1e      	ldr	r2, [pc, #120]	@ (8004308 <HAL_TIM_PWM_Start+0x138>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d107      	bne.n	80042a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_TIM_PWM_Start+0x138>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00e      	beq.n	80042ca <HAL_TIM_PWM_Start+0xfa>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b4:	d009      	beq.n	80042ca <HAL_TIM_PWM_Start+0xfa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a14      	ldr	r2, [pc, #80]	@ (800430c <HAL_TIM_PWM_Start+0x13c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_TIM_PWM_Start+0xfa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <HAL_TIM_PWM_Start+0x140>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d111      	bne.n	80042ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b06      	cmp	r3, #6
 80042da:	d010      	beq.n	80042fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	e007      	b.n	80042fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800

08004314 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e093      	b.n	8004450 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fd fc83 	bl	8001c48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004358:	f023 0307 	bic.w	r3, r3, #7
 800435c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f000 fbb9 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	4313      	orrs	r3, r2
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043b4:	f023 030c 	bic.w	r3, r3, #12
 80043b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	4313      	orrs	r3, r2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	011a      	lsls	r2, r3, #4
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	031b      	lsls	r3, r3, #12
 80043e4:	4313      	orrs	r3, r2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4313      	orrs	r3, r2
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004468:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004470:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004478:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004480:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d110      	bne.n	80044aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800448e:	7b7b      	ldrb	r3, [r7, #13]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e069      	b.n	800456c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a8:	e031      	b.n	800450e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d110      	bne.n	80044d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044b0:	7bbb      	ldrb	r3, [r7, #14]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044b6:	7b3b      	ldrb	r3, [r7, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d001      	beq.n	80044c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e055      	b.n	800456c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044d0:	e01d      	b.n	800450e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d108      	bne.n	80044ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044d8:	7bbb      	ldrb	r3, [r7, #14]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044de:	7b7b      	ldrb	r3, [r7, #13]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d102      	bne.n	80044ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044e4:	7b3b      	ldrb	r3, [r7, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e03e      	b.n	800456c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_TIM_Encoder_Start+0xc4>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d008      	beq.n	800452c <HAL_TIM_Encoder_Start+0xd4>
 800451a:	e00f      	b.n	800453c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fd5b 	bl	8004fe0 <TIM_CCxChannelCmd>
      break;
 800452a:	e016      	b.n	800455a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	2104      	movs	r1, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fd53 	bl	8004fe0 <TIM_CCxChannelCmd>
      break;
 800453a:	e00e      	b.n	800455a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fd4b 	bl	8004fe0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2201      	movs	r2, #1
 8004550:	2104      	movs	r1, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fd44 	bl	8004fe0 <TIM_CCxChannelCmd>
      break;
 8004558:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	d122      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b02      	cmp	r3, #2
 8004596:	d11b      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0202 	mvn.w	r2, #2
 80045a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa76 	bl	8004aa8 <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fa69 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fa78 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d122      	bne.n	8004624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d11b      	bne.n	8004624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0204 	mvn.w	r2, #4
 80045f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa4c 	bl	8004aa8 <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa3f 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa4e 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b08      	cmp	r3, #8
 8004630:	d122      	bne.n	8004678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b08      	cmp	r3, #8
 800463e:	d11b      	bne.n	8004678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0208 	mvn.w	r2, #8
 8004648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa22 	bl	8004aa8 <HAL_TIM_IC_CaptureCallback>
 8004664:	e005      	b.n	8004672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa15 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fa24 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b10      	cmp	r3, #16
 8004684:	d122      	bne.n	80046cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b10      	cmp	r3, #16
 8004692:	d11b      	bne.n	80046cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0210 	mvn.w	r2, #16
 800469c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2208      	movs	r2, #8
 80046a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9f8 	bl	8004aa8 <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9eb 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f9fa 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d10e      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0201 	mvn.w	r2, #1
 80046f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd f9cc 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004702:	2b80      	cmp	r3, #128	@ 0x80
 8004704:	d10e      	bne.n	8004724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004710:	2b80      	cmp	r3, #128	@ 0x80
 8004712:	d107      	bne.n	8004724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fce9 	bl	80050f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472e:	2b40      	cmp	r3, #64	@ 0x40
 8004730:	d10e      	bne.n	8004750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d107      	bne.n	8004750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9be 	bl	8004acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	d10e      	bne.n	800477c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b20      	cmp	r3, #32
 800476a:	d107      	bne.n	800477c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0220 	mvn.w	r2, #32
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fcb4 	bl	80050e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e0ae      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	f200 809f 	bhi.w	80048f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047b2:	a201      	add	r2, pc, #4	@ (adr r2, 80047b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	080048f1 	.word	0x080048f1
 80047c0:	080048f1 	.word	0x080048f1
 80047c4:	080048f1 	.word	0x080048f1
 80047c8:	0800482d 	.word	0x0800482d
 80047cc:	080048f1 	.word	0x080048f1
 80047d0:	080048f1 	.word	0x080048f1
 80047d4:	080048f1 	.word	0x080048f1
 80047d8:	0800486f 	.word	0x0800486f
 80047dc:	080048f1 	.word	0x080048f1
 80047e0:	080048f1 	.word	0x080048f1
 80047e4:	080048f1 	.word	0x080048f1
 80047e8:	080048af 	.word	0x080048af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f9d6 	bl	8004ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0208 	orr.w	r2, r2, #8
 8004806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6999      	ldr	r1, [r3, #24]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	619a      	str	r2, [r3, #24]
      break;
 800482a:	e064      	b.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fa1c 	bl	8004c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6999      	ldr	r1, [r3, #24]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	619a      	str	r2, [r3, #24]
      break;
 800486c:	e043      	b.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fa65 	bl	8004d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0208 	orr.w	r2, r2, #8
 8004888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0204 	bic.w	r2, r2, #4
 8004898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	61da      	str	r2, [r3, #28]
      break;
 80048ac:	e023      	b.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 faaf 	bl	8004e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69d9      	ldr	r1, [r3, #28]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	021a      	lsls	r2, r3, #8
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	61da      	str	r2, [r3, #28]
      break;
 80048ee:	e002      	b.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
      break;
 80048f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIM_ConfigClockSource+0x1c>
 8004920:	2302      	movs	r3, #2
 8004922:	e0b4      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x186>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800494a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800495c:	d03e      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0xd4>
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004962:	f200 8087 	bhi.w	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496a:	f000 8086 	beq.w	8004a7a <HAL_TIM_ConfigClockSource+0x172>
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004972:	d87f      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b70      	cmp	r3, #112	@ 0x70
 8004976:	d01a      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0xa6>
 8004978:	2b70      	cmp	r3, #112	@ 0x70
 800497a:	d87b      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b60      	cmp	r3, #96	@ 0x60
 800497e:	d050      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x11a>
 8004980:	2b60      	cmp	r3, #96	@ 0x60
 8004982:	d877      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b50      	cmp	r3, #80	@ 0x50
 8004986:	d03c      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0xfa>
 8004988:	2b50      	cmp	r3, #80	@ 0x50
 800498a:	d873      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b40      	cmp	r3, #64	@ 0x40
 800498e:	d058      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x13a>
 8004990:	2b40      	cmp	r3, #64	@ 0x40
 8004992:	d86f      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b30      	cmp	r3, #48	@ 0x30
 8004996:	d064      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x15a>
 8004998:	2b30      	cmp	r3, #48	@ 0x30
 800499a:	d86b      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d060      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d867      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d05c      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x15a>
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d05a      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x15a>
 80049ac:	e062      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049be:	f000 faf0 	bl	8004fa2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	609a      	str	r2, [r3, #8]
      break;
 80049da:	e04f      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ec:	f000 fad9 	bl	8004fa2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049fe:	609a      	str	r2, [r3, #8]
      break;
 8004a00:	e03c      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f000 fa50 	bl	8004eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2150      	movs	r1, #80	@ 0x50
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 faa7 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 8004a20:	e02c      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f000 fa6e 	bl	8004f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2160      	movs	r1, #96	@ 0x60
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fa97 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 8004a40:	e01c      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f000 fa30 	bl	8004eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2140      	movs	r1, #64	@ 0x40
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fa87 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 8004a60:	e00c      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f000 fa7e 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 8004a72:	e003      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      break;
 8004a78:	e000      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
	...

08004ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a29      	ldr	r2, [pc, #164]	@ (8004b98 <TIM_Base_SetConfig+0xb8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_Base_SetConfig+0x30>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afe:	d007      	beq.n	8004b10 <TIM_Base_SetConfig+0x30>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <TIM_Base_SetConfig+0xbc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0x30>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a25      	ldr	r2, [pc, #148]	@ (8004ba0 <TIM_Base_SetConfig+0xc0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d108      	bne.n	8004b22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <TIM_Base_SetConfig+0xb8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_Base_SetConfig+0x62>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b30:	d007      	beq.n	8004b42 <TIM_Base_SetConfig+0x62>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a19      	ldr	r2, [pc, #100]	@ (8004b9c <TIM_Base_SetConfig+0xbc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_Base_SetConfig+0x62>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <TIM_Base_SetConfig+0xc0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d108      	bne.n	8004b54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a07      	ldr	r2, [pc, #28]	@ (8004b98 <TIM_Base_SetConfig+0xb8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d103      	bne.n	8004b88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	615a      	str	r2, [r3, #20]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800

08004ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f023 0201 	bic.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 0302 	bic.w	r3, r3, #2
 8004bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004c6c <TIM_OC1_SetConfig+0xc8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10c      	bne.n	8004c1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f023 0308 	bic.w	r3, r3, #8
 8004c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f023 0304 	bic.w	r3, r3, #4
 8004c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a13      	ldr	r2, [pc, #76]	@ (8004c6c <TIM_OC1_SetConfig+0xc8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d111      	bne.n	8004c46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	621a      	str	r2, [r3, #32]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40012c00 	.word	0x40012c00

08004c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f023 0210 	bic.w	r2, r3, #16
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0320 	bic.w	r3, r3, #32
 8004cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1d      	ldr	r2, [pc, #116]	@ (8004d40 <TIM_OC2_SetConfig+0xd0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10d      	bne.n	8004cec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <TIM_OC2_SetConfig+0xd0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d113      	bne.n	8004d1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00

08004d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e14 <TIM_OC3_SetConfig+0xd0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10d      	bne.n	8004dbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a14      	ldr	r2, [pc, #80]	@ (8004e14 <TIM_OC3_SetConfig+0xd0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d113      	bne.n	8004dee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00

08004e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a0f      	ldr	r2, [pc, #60]	@ (8004eb0 <TIM_OC4_SetConfig+0x98>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d109      	bne.n	8004e8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	019b      	lsls	r3, r3, #6
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr
 8004eb0:	40012c00 	.word	0x40012c00

08004eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0201 	bic.w	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 030a 	bic.w	r3, r3, #10
 8004ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0210 	bic.w	r2, r3, #16
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	031b      	lsls	r3, r3, #12
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f043 0307 	orr.w	r3, r3, #7
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	609a      	str	r2, [r3, #8]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	021a      	lsls	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	609a      	str	r2, [r3, #8]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1a      	ldr	r2, [r3, #32]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	43db      	mvns	r3, r3
 8005002:	401a      	ands	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800503c:	2302      	movs	r3, #2
 800503e:	e046      	b.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a16      	ldr	r2, [pc, #88]	@ (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00e      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508c:	d009      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a12      	ldr	r2, [pc, #72]	@ (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a10      	ldr	r2, [pc, #64]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10c      	bne.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40000800 	.word	0x40000800

080050e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e042      	b.n	80051a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc fdfa 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	@ 0x24
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800514a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f91d 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	@ 0x28
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d16d      	bne.n	80052a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Transmit+0x2c>
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e066      	b.n	80052a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2221      	movs	r2, #33	@ 0x21
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e6:	f7fc ffbd 	bl	8002164 <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	88fa      	ldrh	r2, [r7, #6]
 80051f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005200:	d108      	bne.n	8005214 <HAL_UART_Transmit+0x6c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	e003      	b.n	800521c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800521c:	e02a      	b.n	8005274 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	2180      	movs	r1, #128	@ 0x80
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f840 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e036      	b.n	80052a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800524c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3302      	adds	r3, #2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e007      	b.n	8005266 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1cf      	bne.n	800521e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	2140      	movs	r1, #64	@ 0x40
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f810 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e006      	b.n	80052a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b090      	sub	sp, #64	@ 0x40
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052be:	e050      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d04c      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
 80052ce:	f7fc ff49 	bl	8002164 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052da:	429a      	cmp	r2, r3
 80052dc:	d241      	bcs.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8005300:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	613b      	str	r3, [r7, #16]
   return(result);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005332:	623a      	str	r2, [r7, #32]
 8005334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	69f9      	ldr	r1, [r7, #28]
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e5      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d09f      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3740      	adds	r7, #64	@ 0x40
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053c6:	f023 030c 	bic.w	r3, r3, #12
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <UART_SetConfig+0x114>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d103      	bne.n	80053fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053f4:	f7fe fc24 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	e002      	b.n	8005402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fe fc0c 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8005400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	4a22      	ldr	r2, [pc, #136]	@ (80054a4 <UART_SetConfig+0x118>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	0119      	lsls	r1, r3, #4
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009a      	lsls	r2, r3, #2
 800542c:	441a      	add	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	fbb2 f2f3 	udiv	r2, r2, r3
 8005438:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <UART_SetConfig+0x118>)
 800543a:	fba3 0302 	umull	r0, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2064      	movs	r0, #100	@ 0x64
 8005442:	fb00 f303 	mul.w	r3, r0, r3
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	3332      	adds	r3, #50	@ 0x32
 800544c:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <UART_SetConfig+0x118>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005458:	4419      	add	r1, r3
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005470:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <UART_SetConfig+0x118>)
 8005472:	fba3 0302 	umull	r0, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2064      	movs	r0, #100	@ 0x64
 800547a:	fb00 f303 	mul.w	r3, r0, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	@ 0x32
 8005484:	4a07      	ldr	r2, [pc, #28]	@ (80054a4 <UART_SetConfig+0x118>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	440a      	add	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40013800 	.word	0x40013800
 80054a4:	51eb851f 	.word	0x51eb851f

080054a8 <__cvt>:
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ae:	461d      	mov	r5, r3
 80054b0:	bfbb      	ittet	lt
 80054b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80054b6:	461d      	movlt	r5, r3
 80054b8:	2300      	movge	r3, #0
 80054ba:	232d      	movlt	r3, #45	@ 0x2d
 80054bc:	b088      	sub	sp, #32
 80054be:	4614      	mov	r4, r2
 80054c0:	bfb8      	it	lt
 80054c2:	4614      	movlt	r4, r2
 80054c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80054c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80054c8:	7013      	strb	r3, [r2, #0]
 80054ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80054d0:	f023 0820 	bic.w	r8, r3, #32
 80054d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054d8:	d005      	beq.n	80054e6 <__cvt+0x3e>
 80054da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054de:	d100      	bne.n	80054e2 <__cvt+0x3a>
 80054e0:	3601      	adds	r6, #1
 80054e2:	2302      	movs	r3, #2
 80054e4:	e000      	b.n	80054e8 <__cvt+0x40>
 80054e6:	2303      	movs	r3, #3
 80054e8:	aa07      	add	r2, sp, #28
 80054ea:	9204      	str	r2, [sp, #16]
 80054ec:	aa06      	add	r2, sp, #24
 80054ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054f2:	e9cd 3600 	strd	r3, r6, [sp]
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	f000 fe6d 	bl	80061d8 <_dtoa_r>
 80054fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005502:	4607      	mov	r7, r0
 8005504:	d119      	bne.n	800553a <__cvt+0x92>
 8005506:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005508:	07db      	lsls	r3, r3, #31
 800550a:	d50e      	bpl.n	800552a <__cvt+0x82>
 800550c:	eb00 0906 	add.w	r9, r0, r6
 8005510:	2200      	movs	r2, #0
 8005512:	2300      	movs	r3, #0
 8005514:	4620      	mov	r0, r4
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800551c:	b108      	cbz	r0, 8005522 <__cvt+0x7a>
 800551e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005522:	2230      	movs	r2, #48	@ 0x30
 8005524:	9b07      	ldr	r3, [sp, #28]
 8005526:	454b      	cmp	r3, r9
 8005528:	d31e      	bcc.n	8005568 <__cvt+0xc0>
 800552a:	4638      	mov	r0, r7
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005530:	1bdb      	subs	r3, r3, r7
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	b008      	add	sp, #32
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800553e:	eb00 0906 	add.w	r9, r0, r6
 8005542:	d1e5      	bne.n	8005510 <__cvt+0x68>
 8005544:	7803      	ldrb	r3, [r0, #0]
 8005546:	2b30      	cmp	r3, #48	@ 0x30
 8005548:	d10a      	bne.n	8005560 <__cvt+0xb8>
 800554a:	2200      	movs	r2, #0
 800554c:	2300      	movs	r3, #0
 800554e:	4620      	mov	r0, r4
 8005550:	4629      	mov	r1, r5
 8005552:	f7fb fa29 	bl	80009a8 <__aeabi_dcmpeq>
 8005556:	b918      	cbnz	r0, 8005560 <__cvt+0xb8>
 8005558:	f1c6 0601 	rsb	r6, r6, #1
 800555c:	f8ca 6000 	str.w	r6, [sl]
 8005560:	f8da 3000 	ldr.w	r3, [sl]
 8005564:	4499      	add	r9, r3
 8005566:	e7d3      	b.n	8005510 <__cvt+0x68>
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	9107      	str	r1, [sp, #28]
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e7d9      	b.n	8005524 <__cvt+0x7c>

08005570 <__exponent>:
 8005570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005572:	2900      	cmp	r1, #0
 8005574:	bfb6      	itet	lt
 8005576:	232d      	movlt	r3, #45	@ 0x2d
 8005578:	232b      	movge	r3, #43	@ 0x2b
 800557a:	4249      	neglt	r1, r1
 800557c:	2909      	cmp	r1, #9
 800557e:	7002      	strb	r2, [r0, #0]
 8005580:	7043      	strb	r3, [r0, #1]
 8005582:	dd29      	ble.n	80055d8 <__exponent+0x68>
 8005584:	f10d 0307 	add.w	r3, sp, #7
 8005588:	461d      	mov	r5, r3
 800558a:	270a      	movs	r7, #10
 800558c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005590:	461a      	mov	r2, r3
 8005592:	fb07 1416 	mls	r4, r7, r6, r1
 8005596:	3430      	adds	r4, #48	@ 0x30
 8005598:	f802 4c01 	strb.w	r4, [r2, #-1]
 800559c:	460c      	mov	r4, r1
 800559e:	2c63      	cmp	r4, #99	@ 0x63
 80055a0:	4631      	mov	r1, r6
 80055a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80055a6:	dcf1      	bgt.n	800558c <__exponent+0x1c>
 80055a8:	3130      	adds	r1, #48	@ 0x30
 80055aa:	1e94      	subs	r4, r2, #2
 80055ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055b0:	4623      	mov	r3, r4
 80055b2:	1c41      	adds	r1, r0, #1
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	d30a      	bcc.n	80055ce <__exponent+0x5e>
 80055b8:	f10d 0309 	add.w	r3, sp, #9
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	42ac      	cmp	r4, r5
 80055c0:	bf88      	it	hi
 80055c2:	2300      	movhi	r3, #0
 80055c4:	3302      	adds	r3, #2
 80055c6:	4403      	add	r3, r0
 80055c8:	1a18      	subs	r0, r3, r0
 80055ca:	b003      	add	sp, #12
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055d6:	e7ed      	b.n	80055b4 <__exponent+0x44>
 80055d8:	2330      	movs	r3, #48	@ 0x30
 80055da:	3130      	adds	r1, #48	@ 0x30
 80055dc:	7083      	strb	r3, [r0, #2]
 80055de:	70c1      	strb	r1, [r0, #3]
 80055e0:	1d03      	adds	r3, r0, #4
 80055e2:	e7f1      	b.n	80055c8 <__exponent+0x58>

080055e4 <_printf_float>:
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	b091      	sub	sp, #68	@ 0x44
 80055ea:	460c      	mov	r4, r1
 80055ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80055f0:	4616      	mov	r6, r2
 80055f2:	461f      	mov	r7, r3
 80055f4:	4605      	mov	r5, r0
 80055f6:	f000 fce1 	bl	8005fbc <_localeconv_r>
 80055fa:	6803      	ldr	r3, [r0, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	9308      	str	r3, [sp, #32]
 8005600:	f7fa fda6 	bl	8000150 <strlen>
 8005604:	2300      	movs	r3, #0
 8005606:	930e      	str	r3, [sp, #56]	@ 0x38
 8005608:	f8d8 3000 	ldr.w	r3, [r8]
 800560c:	9009      	str	r0, [sp, #36]	@ 0x24
 800560e:	3307      	adds	r3, #7
 8005610:	f023 0307 	bic.w	r3, r3, #7
 8005614:	f103 0208 	add.w	r2, r3, #8
 8005618:	f894 a018 	ldrb.w	sl, [r4, #24]
 800561c:	f8d4 b000 	ldr.w	fp, [r4]
 8005620:	f8c8 2000 	str.w	r2, [r8]
 8005624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800562c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800562e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005632:	f04f 32ff 	mov.w	r2, #4294967295
 8005636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800563a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800563e:	4b9c      	ldr	r3, [pc, #624]	@ (80058b0 <_printf_float+0x2cc>)
 8005640:	f7fb f9e4 	bl	8000a0c <__aeabi_dcmpun>
 8005644:	bb70      	cbnz	r0, 80056a4 <_printf_float+0xc0>
 8005646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800564a:	f04f 32ff 	mov.w	r2, #4294967295
 800564e:	4b98      	ldr	r3, [pc, #608]	@ (80058b0 <_printf_float+0x2cc>)
 8005650:	f7fb f9be 	bl	80009d0 <__aeabi_dcmple>
 8005654:	bb30      	cbnz	r0, 80056a4 <_printf_float+0xc0>
 8005656:	2200      	movs	r2, #0
 8005658:	2300      	movs	r3, #0
 800565a:	4640      	mov	r0, r8
 800565c:	4649      	mov	r1, r9
 800565e:	f7fb f9ad 	bl	80009bc <__aeabi_dcmplt>
 8005662:	b110      	cbz	r0, 800566a <_printf_float+0x86>
 8005664:	232d      	movs	r3, #45	@ 0x2d
 8005666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800566a:	4a92      	ldr	r2, [pc, #584]	@ (80058b4 <_printf_float+0x2d0>)
 800566c:	4b92      	ldr	r3, [pc, #584]	@ (80058b8 <_printf_float+0x2d4>)
 800566e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005672:	bf94      	ite	ls
 8005674:	4690      	movls	r8, r2
 8005676:	4698      	movhi	r8, r3
 8005678:	2303      	movs	r3, #3
 800567a:	f04f 0900 	mov.w	r9, #0
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	f02b 0304 	bic.w	r3, fp, #4
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	4633      	mov	r3, r6
 8005688:	4621      	mov	r1, r4
 800568a:	4628      	mov	r0, r5
 800568c:	9700      	str	r7, [sp, #0]
 800568e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005690:	f000 f9d4 	bl	8005a3c <_printf_common>
 8005694:	3001      	adds	r0, #1
 8005696:	f040 8090 	bne.w	80057ba <_printf_float+0x1d6>
 800569a:	f04f 30ff 	mov.w	r0, #4294967295
 800569e:	b011      	add	sp, #68	@ 0x44
 80056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fb f9ae 	bl	8000a0c <__aeabi_dcmpun>
 80056b0:	b148      	cbz	r0, 80056c6 <_printf_float+0xe2>
 80056b2:	464b      	mov	r3, r9
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfb8      	it	lt
 80056b8:	232d      	movlt	r3, #45	@ 0x2d
 80056ba:	4a80      	ldr	r2, [pc, #512]	@ (80058bc <_printf_float+0x2d8>)
 80056bc:	bfb8      	it	lt
 80056be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056c2:	4b7f      	ldr	r3, [pc, #508]	@ (80058c0 <_printf_float+0x2dc>)
 80056c4:	e7d3      	b.n	800566e <_printf_float+0x8a>
 80056c6:	6863      	ldr	r3, [r4, #4]
 80056c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	d13f      	bne.n	8005750 <_printf_float+0x16c>
 80056d0:	2306      	movs	r3, #6
 80056d2:	6063      	str	r3, [r4, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	9206      	str	r2, [sp, #24]
 80056de:	aa0e      	add	r2, sp, #56	@ 0x38
 80056e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80056e4:	aa0d      	add	r2, sp, #52	@ 0x34
 80056e6:	9203      	str	r2, [sp, #12]
 80056e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80056ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	4642      	mov	r2, r8
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	4628      	mov	r0, r5
 80056f8:	464b      	mov	r3, r9
 80056fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80056fc:	f7ff fed4 	bl	80054a8 <__cvt>
 8005700:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005702:	4680      	mov	r8, r0
 8005704:	2947      	cmp	r1, #71	@ 0x47
 8005706:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005708:	d128      	bne.n	800575c <_printf_float+0x178>
 800570a:	1cc8      	adds	r0, r1, #3
 800570c:	db02      	blt.n	8005714 <_printf_float+0x130>
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	4299      	cmp	r1, r3
 8005712:	dd40      	ble.n	8005796 <_printf_float+0x1b2>
 8005714:	f1aa 0a02 	sub.w	sl, sl, #2
 8005718:	fa5f fa8a 	uxtb.w	sl, sl
 800571c:	4652      	mov	r2, sl
 800571e:	3901      	subs	r1, #1
 8005720:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005724:	910d      	str	r1, [sp, #52]	@ 0x34
 8005726:	f7ff ff23 	bl	8005570 <__exponent>
 800572a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800572c:	4681      	mov	r9, r0
 800572e:	1813      	adds	r3, r2, r0
 8005730:	2a01      	cmp	r2, #1
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	dc02      	bgt.n	800573c <_printf_float+0x158>
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	07d2      	lsls	r2, r2, #31
 800573a:	d501      	bpl.n	8005740 <_printf_float+0x15c>
 800573c:	3301      	adds	r3, #1
 800573e:	6123      	str	r3, [r4, #16]
 8005740:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005744:	2b00      	cmp	r3, #0
 8005746:	d09e      	beq.n	8005686 <_printf_float+0xa2>
 8005748:	232d      	movs	r3, #45	@ 0x2d
 800574a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800574e:	e79a      	b.n	8005686 <_printf_float+0xa2>
 8005750:	2947      	cmp	r1, #71	@ 0x47
 8005752:	d1bf      	bne.n	80056d4 <_printf_float+0xf0>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1bd      	bne.n	80056d4 <_printf_float+0xf0>
 8005758:	2301      	movs	r3, #1
 800575a:	e7ba      	b.n	80056d2 <_printf_float+0xee>
 800575c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005760:	d9dc      	bls.n	800571c <_printf_float+0x138>
 8005762:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005766:	d118      	bne.n	800579a <_printf_float+0x1b6>
 8005768:	2900      	cmp	r1, #0
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	dd0b      	ble.n	8005786 <_printf_float+0x1a2>
 800576e:	6121      	str	r1, [r4, #16]
 8005770:	b913      	cbnz	r3, 8005778 <_printf_float+0x194>
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	07d0      	lsls	r0, r2, #31
 8005776:	d502      	bpl.n	800577e <_printf_float+0x19a>
 8005778:	3301      	adds	r3, #1
 800577a:	440b      	add	r3, r1
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	f04f 0900 	mov.w	r9, #0
 8005782:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005784:	e7dc      	b.n	8005740 <_printf_float+0x15c>
 8005786:	b913      	cbnz	r3, 800578e <_printf_float+0x1aa>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	07d2      	lsls	r2, r2, #31
 800578c:	d501      	bpl.n	8005792 <_printf_float+0x1ae>
 800578e:	3302      	adds	r3, #2
 8005790:	e7f4      	b.n	800577c <_printf_float+0x198>
 8005792:	2301      	movs	r3, #1
 8005794:	e7f2      	b.n	800577c <_printf_float+0x198>
 8005796:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800579a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800579c:	4299      	cmp	r1, r3
 800579e:	db05      	blt.n	80057ac <_printf_float+0x1c8>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	6121      	str	r1, [r4, #16]
 80057a4:	07d8      	lsls	r0, r3, #31
 80057a6:	d5ea      	bpl.n	800577e <_printf_float+0x19a>
 80057a8:	1c4b      	adds	r3, r1, #1
 80057aa:	e7e7      	b.n	800577c <_printf_float+0x198>
 80057ac:	2900      	cmp	r1, #0
 80057ae:	bfcc      	ite	gt
 80057b0:	2201      	movgt	r2, #1
 80057b2:	f1c1 0202 	rsble	r2, r1, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	e7e0      	b.n	800577c <_printf_float+0x198>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	055a      	lsls	r2, r3, #21
 80057be:	d407      	bmi.n	80057d0 <_printf_float+0x1ec>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	4642      	mov	r2, r8
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	d12b      	bne.n	8005826 <_printf_float+0x242>
 80057ce:	e764      	b.n	800569a <_printf_float+0xb6>
 80057d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057d4:	f240 80dc 	bls.w	8005990 <_printf_float+0x3ac>
 80057d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057dc:	2200      	movs	r2, #0
 80057de:	2300      	movs	r3, #0
 80057e0:	f7fb f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d033      	beq.n	8005850 <_printf_float+0x26c>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	4a35      	ldr	r2, [pc, #212]	@ (80058c4 <_printf_float+0x2e0>)
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f af51 	beq.w	800569a <_printf_float+0xb6>
 80057f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80057fc:	4543      	cmp	r3, r8
 80057fe:	db02      	blt.n	8005806 <_printf_float+0x222>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	07d8      	lsls	r0, r3, #31
 8005804:	d50f      	bpl.n	8005826 <_printf_float+0x242>
 8005806:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f af42 	beq.w	800569a <_printf_float+0xb6>
 8005816:	f04f 0900 	mov.w	r9, #0
 800581a:	f108 38ff 	add.w	r8, r8, #4294967295
 800581e:	f104 0a1a 	add.w	sl, r4, #26
 8005822:	45c8      	cmp	r8, r9
 8005824:	dc09      	bgt.n	800583a <_printf_float+0x256>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	079b      	lsls	r3, r3, #30
 800582a:	f100 8102 	bmi.w	8005a32 <_printf_float+0x44e>
 800582e:	68e0      	ldr	r0, [r4, #12]
 8005830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005832:	4298      	cmp	r0, r3
 8005834:	bfb8      	it	lt
 8005836:	4618      	movlt	r0, r3
 8005838:	e731      	b.n	800569e <_printf_float+0xba>
 800583a:	2301      	movs	r3, #1
 800583c:	4652      	mov	r2, sl
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f af28 	beq.w	800569a <_printf_float+0xb6>
 800584a:	f109 0901 	add.w	r9, r9, #1
 800584e:	e7e8      	b.n	8005822 <_printf_float+0x23e>
 8005850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005852:	2b00      	cmp	r3, #0
 8005854:	dc38      	bgt.n	80058c8 <_printf_float+0x2e4>
 8005856:	2301      	movs	r3, #1
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	4a19      	ldr	r2, [pc, #100]	@ (80058c4 <_printf_float+0x2e0>)
 800585e:	47b8      	blx	r7
 8005860:	3001      	adds	r0, #1
 8005862:	f43f af1a 	beq.w	800569a <_printf_float+0xb6>
 8005866:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800586a:	ea59 0303 	orrs.w	r3, r9, r3
 800586e:	d102      	bne.n	8005876 <_printf_float+0x292>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	07d9      	lsls	r1, r3, #31
 8005874:	d5d7      	bpl.n	8005826 <_printf_float+0x242>
 8005876:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f af0a 	beq.w	800569a <_printf_float+0xb6>
 8005886:	f04f 0a00 	mov.w	sl, #0
 800588a:	f104 0b1a 	add.w	fp, r4, #26
 800588e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005890:	425b      	negs	r3, r3
 8005892:	4553      	cmp	r3, sl
 8005894:	dc01      	bgt.n	800589a <_printf_float+0x2b6>
 8005896:	464b      	mov	r3, r9
 8005898:	e793      	b.n	80057c2 <_printf_float+0x1de>
 800589a:	2301      	movs	r3, #1
 800589c:	465a      	mov	r2, fp
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	f43f aef8 	beq.w	800569a <_printf_float+0xb6>
 80058aa:	f10a 0a01 	add.w	sl, sl, #1
 80058ae:	e7ee      	b.n	800588e <_printf_float+0x2aa>
 80058b0:	7fefffff 	.word	0x7fefffff
 80058b4:	080081d6 	.word	0x080081d6
 80058b8:	080081da 	.word	0x080081da
 80058bc:	080081de 	.word	0x080081de
 80058c0:	080081e2 	.word	0x080081e2
 80058c4:	080081e6 	.word	0x080081e6
 80058c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058ce:	4553      	cmp	r3, sl
 80058d0:	bfa8      	it	ge
 80058d2:	4653      	movge	r3, sl
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	4699      	mov	r9, r3
 80058d8:	dc36      	bgt.n	8005948 <_printf_float+0x364>
 80058da:	f04f 0b00 	mov.w	fp, #0
 80058de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058e2:	f104 021a 	add.w	r2, r4, #26
 80058e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ea:	eba3 0309 	sub.w	r3, r3, r9
 80058ee:	455b      	cmp	r3, fp
 80058f0:	dc31      	bgt.n	8005956 <_printf_float+0x372>
 80058f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058f4:	459a      	cmp	sl, r3
 80058f6:	dc3a      	bgt.n	800596e <_printf_float+0x38a>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	07da      	lsls	r2, r3, #31
 80058fc:	d437      	bmi.n	800596e <_printf_float+0x38a>
 80058fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005900:	ebaa 0903 	sub.w	r9, sl, r3
 8005904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005906:	ebaa 0303 	sub.w	r3, sl, r3
 800590a:	4599      	cmp	r9, r3
 800590c:	bfa8      	it	ge
 800590e:	4699      	movge	r9, r3
 8005910:	f1b9 0f00 	cmp.w	r9, #0
 8005914:	dc33      	bgt.n	800597e <_printf_float+0x39a>
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800591e:	f104 0b1a 	add.w	fp, r4, #26
 8005922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005924:	ebaa 0303 	sub.w	r3, sl, r3
 8005928:	eba3 0309 	sub.w	r3, r3, r9
 800592c:	4543      	cmp	r3, r8
 800592e:	f77f af7a 	ble.w	8005826 <_printf_float+0x242>
 8005932:	2301      	movs	r3, #1
 8005934:	465a      	mov	r2, fp
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	f43f aeac 	beq.w	800569a <_printf_float+0xb6>
 8005942:	f108 0801 	add.w	r8, r8, #1
 8005946:	e7ec      	b.n	8005922 <_printf_float+0x33e>
 8005948:	4642      	mov	r2, r8
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	d1c2      	bne.n	80058da <_printf_float+0x2f6>
 8005954:	e6a1      	b.n	800569a <_printf_float+0xb6>
 8005956:	2301      	movs	r3, #1
 8005958:	4631      	mov	r1, r6
 800595a:	4628      	mov	r0, r5
 800595c:	920a      	str	r2, [sp, #40]	@ 0x28
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f ae9a 	beq.w	800569a <_printf_float+0xb6>
 8005966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005968:	f10b 0b01 	add.w	fp, fp, #1
 800596c:	e7bb      	b.n	80058e6 <_printf_float+0x302>
 800596e:	4631      	mov	r1, r6
 8005970:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	d1c0      	bne.n	80058fe <_printf_float+0x31a>
 800597c:	e68d      	b.n	800569a <_printf_float+0xb6>
 800597e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005980:	464b      	mov	r3, r9
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	4442      	add	r2, r8
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	d1c3      	bne.n	8005916 <_printf_float+0x332>
 800598e:	e684      	b.n	800569a <_printf_float+0xb6>
 8005990:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005994:	f1ba 0f01 	cmp.w	sl, #1
 8005998:	dc01      	bgt.n	800599e <_printf_float+0x3ba>
 800599a:	07db      	lsls	r3, r3, #31
 800599c:	d536      	bpl.n	8005a0c <_printf_float+0x428>
 800599e:	2301      	movs	r3, #1
 80059a0:	4642      	mov	r2, r8
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	f43f ae76 	beq.w	800569a <_printf_float+0xb6>
 80059ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f ae6e 	beq.w	800569a <_printf_float+0xb6>
 80059be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059ca:	f7fa ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80059ce:	b9c0      	cbnz	r0, 8005a02 <_printf_float+0x41e>
 80059d0:	4653      	mov	r3, sl
 80059d2:	f108 0201 	add.w	r2, r8, #1
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	d10c      	bne.n	80059fa <_printf_float+0x416>
 80059e0:	e65b      	b.n	800569a <_printf_float+0xb6>
 80059e2:	2301      	movs	r3, #1
 80059e4:	465a      	mov	r2, fp
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	f43f ae54 	beq.w	800569a <_printf_float+0xb6>
 80059f2:	f108 0801 	add.w	r8, r8, #1
 80059f6:	45d0      	cmp	r8, sl
 80059f8:	dbf3      	blt.n	80059e2 <_printf_float+0x3fe>
 80059fa:	464b      	mov	r3, r9
 80059fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a00:	e6e0      	b.n	80057c4 <_printf_float+0x1e0>
 8005a02:	f04f 0800 	mov.w	r8, #0
 8005a06:	f104 0b1a 	add.w	fp, r4, #26
 8005a0a:	e7f4      	b.n	80059f6 <_printf_float+0x412>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4642      	mov	r2, r8
 8005a10:	e7e1      	b.n	80059d6 <_printf_float+0x3f2>
 8005a12:	2301      	movs	r3, #1
 8005a14:	464a      	mov	r2, r9
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f43f ae3c 	beq.w	800569a <_printf_float+0xb6>
 8005a22:	f108 0801 	add.w	r8, r8, #1
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a2a:	1a5b      	subs	r3, r3, r1
 8005a2c:	4543      	cmp	r3, r8
 8005a2e:	dcf0      	bgt.n	8005a12 <_printf_float+0x42e>
 8005a30:	e6fd      	b.n	800582e <_printf_float+0x24a>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	f104 0919 	add.w	r9, r4, #25
 8005a3a:	e7f4      	b.n	8005a26 <_printf_float+0x442>

08005a3c <_printf_common>:
 8005a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	4616      	mov	r6, r2
 8005a42:	4698      	mov	r8, r3
 8005a44:	688a      	ldr	r2, [r1, #8]
 8005a46:	690b      	ldr	r3, [r1, #16]
 8005a48:	4607      	mov	r7, r0
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	bfb8      	it	lt
 8005a4e:	4613      	movlt	r3, r2
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a56:	460c      	mov	r4, r1
 8005a58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a5c:	b10a      	cbz	r2, 8005a62 <_printf_common+0x26>
 8005a5e:	3301      	adds	r3, #1
 8005a60:	6033      	str	r3, [r6, #0]
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	0699      	lsls	r1, r3, #26
 8005a66:	bf42      	ittt	mi
 8005a68:	6833      	ldrmi	r3, [r6, #0]
 8005a6a:	3302      	addmi	r3, #2
 8005a6c:	6033      	strmi	r3, [r6, #0]
 8005a6e:	6825      	ldr	r5, [r4, #0]
 8005a70:	f015 0506 	ands.w	r5, r5, #6
 8005a74:	d106      	bne.n	8005a84 <_printf_common+0x48>
 8005a76:	f104 0a19 	add.w	sl, r4, #25
 8005a7a:	68e3      	ldr	r3, [r4, #12]
 8005a7c:	6832      	ldr	r2, [r6, #0]
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	dc2b      	bgt.n	8005adc <_printf_common+0xa0>
 8005a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a88:	6822      	ldr	r2, [r4, #0]
 8005a8a:	3b00      	subs	r3, #0
 8005a8c:	bf18      	it	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	0692      	lsls	r2, r2, #26
 8005a92:	d430      	bmi.n	8005af6 <_printf_common+0xba>
 8005a94:	4641      	mov	r1, r8
 8005a96:	4638      	mov	r0, r7
 8005a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a9c:	47c8      	blx	r9
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d023      	beq.n	8005aea <_printf_common+0xae>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	f003 0306 	and.w	r3, r3, #6
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	bf14      	ite	ne
 8005aae:	2500      	movne	r5, #0
 8005ab0:	6833      	ldreq	r3, [r6, #0]
 8005ab2:	f04f 0600 	mov.w	r6, #0
 8005ab6:	bf08      	it	eq
 8005ab8:	68e5      	ldreq	r5, [r4, #12]
 8005aba:	f104 041a 	add.w	r4, r4, #26
 8005abe:	bf08      	it	eq
 8005ac0:	1aed      	subeq	r5, r5, r3
 8005ac2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ac6:	bf08      	it	eq
 8005ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bfc4      	itt	gt
 8005ad0:	1a9b      	subgt	r3, r3, r2
 8005ad2:	18ed      	addgt	r5, r5, r3
 8005ad4:	42b5      	cmp	r5, r6
 8005ad6:	d11a      	bne.n	8005b0e <_printf_common+0xd2>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e008      	b.n	8005aee <_printf_common+0xb2>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4652      	mov	r2, sl
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c8      	blx	r9
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d103      	bne.n	8005af2 <_printf_common+0xb6>
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	3501      	adds	r5, #1
 8005af4:	e7c1      	b.n	8005a7a <_printf_common+0x3e>
 8005af6:	2030      	movs	r0, #48	@ 0x30
 8005af8:	18e1      	adds	r1, r4, r3
 8005afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b04:	4422      	add	r2, r4
 8005b06:	3302      	adds	r3, #2
 8005b08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b0c:	e7c2      	b.n	8005a94 <_printf_common+0x58>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4622      	mov	r2, r4
 8005b12:	4641      	mov	r1, r8
 8005b14:	4638      	mov	r0, r7
 8005b16:	47c8      	blx	r9
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d0e6      	beq.n	8005aea <_printf_common+0xae>
 8005b1c:	3601      	adds	r6, #1
 8005b1e:	e7d9      	b.n	8005ad4 <_printf_common+0x98>

08005b20 <_printf_i>:
 8005b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b24:	7e0f      	ldrb	r7, [r1, #24]
 8005b26:	4691      	mov	r9, r2
 8005b28:	2f78      	cmp	r7, #120	@ 0x78
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	469a      	mov	sl, r3
 8005b30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b36:	d807      	bhi.n	8005b48 <_printf_i+0x28>
 8005b38:	2f62      	cmp	r7, #98	@ 0x62
 8005b3a:	d80a      	bhi.n	8005b52 <_printf_i+0x32>
 8005b3c:	2f00      	cmp	r7, #0
 8005b3e:	f000 80d3 	beq.w	8005ce8 <_printf_i+0x1c8>
 8005b42:	2f58      	cmp	r7, #88	@ 0x58
 8005b44:	f000 80ba 	beq.w	8005cbc <_printf_i+0x19c>
 8005b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b50:	e03a      	b.n	8005bc8 <_printf_i+0xa8>
 8005b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b56:	2b15      	cmp	r3, #21
 8005b58:	d8f6      	bhi.n	8005b48 <_printf_i+0x28>
 8005b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b60 <_printf_i+0x40>)
 8005b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b60:	08005bb9 	.word	0x08005bb9
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005b49 	.word	0x08005b49
 8005b6c:	08005b49 	.word	0x08005b49
 8005b70:	08005b49 	.word	0x08005b49
 8005b74:	08005b49 	.word	0x08005b49
 8005b78:	08005bcd 	.word	0x08005bcd
 8005b7c:	08005b49 	.word	0x08005b49
 8005b80:	08005b49 	.word	0x08005b49
 8005b84:	08005b49 	.word	0x08005b49
 8005b88:	08005b49 	.word	0x08005b49
 8005b8c:	08005ccf 	.word	0x08005ccf
 8005b90:	08005bf7 	.word	0x08005bf7
 8005b94:	08005c89 	.word	0x08005c89
 8005b98:	08005b49 	.word	0x08005b49
 8005b9c:	08005b49 	.word	0x08005b49
 8005ba0:	08005cf1 	.word	0x08005cf1
 8005ba4:	08005b49 	.word	0x08005b49
 8005ba8:	08005bf7 	.word	0x08005bf7
 8005bac:	08005b49 	.word	0x08005b49
 8005bb0:	08005b49 	.word	0x08005b49
 8005bb4:	08005c91 	.word	0x08005c91
 8005bb8:	6833      	ldr	r3, [r6, #0]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6032      	str	r2, [r6, #0]
 8005bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e09e      	b.n	8005d0a <_printf_i+0x1ea>
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1d19      	adds	r1, r3, #4
 8005bd2:	6031      	str	r1, [r6, #0]
 8005bd4:	0606      	lsls	r6, r0, #24
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0xbc>
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	e003      	b.n	8005be4 <_printf_i+0xc4>
 8005bdc:	0645      	lsls	r5, r0, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0xb8>
 8005be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	da03      	bge.n	8005bf0 <_printf_i+0xd0>
 8005be8:	232d      	movs	r3, #45	@ 0x2d
 8005bea:	426d      	negs	r5, r5
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf0:	230a      	movs	r3, #10
 8005bf2:	4859      	ldr	r0, [pc, #356]	@ (8005d58 <_printf_i+0x238>)
 8005bf4:	e011      	b.n	8005c1a <_printf_i+0xfa>
 8005bf6:	6821      	ldr	r1, [r4, #0]
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	0608      	lsls	r0, r1, #24
 8005bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c00:	d402      	bmi.n	8005c08 <_printf_i+0xe8>
 8005c02:	0649      	lsls	r1, r1, #25
 8005c04:	bf48      	it	mi
 8005c06:	b2ad      	uxthmi	r5, r5
 8005c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	bf14      	ite	ne
 8005c0e:	230a      	movne	r3, #10
 8005c10:	2308      	moveq	r3, #8
 8005c12:	4851      	ldr	r0, [pc, #324]	@ (8005d58 <_printf_i+0x238>)
 8005c14:	2100      	movs	r1, #0
 8005c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c1a:	6866      	ldr	r6, [r4, #4]
 8005c1c:	2e00      	cmp	r6, #0
 8005c1e:	bfa8      	it	ge
 8005c20:	6821      	ldrge	r1, [r4, #0]
 8005c22:	60a6      	str	r6, [r4, #8]
 8005c24:	bfa4      	itt	ge
 8005c26:	f021 0104 	bicge.w	r1, r1, #4
 8005c2a:	6021      	strge	r1, [r4, #0]
 8005c2c:	b90d      	cbnz	r5, 8005c32 <_printf_i+0x112>
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	d04b      	beq.n	8005cca <_printf_i+0x1aa>
 8005c32:	4616      	mov	r6, r2
 8005c34:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c38:	fb03 5711 	mls	r7, r3, r1, r5
 8005c3c:	5dc7      	ldrb	r7, [r0, r7]
 8005c3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c42:	462f      	mov	r7, r5
 8005c44:	42bb      	cmp	r3, r7
 8005c46:	460d      	mov	r5, r1
 8005c48:	d9f4      	bls.n	8005c34 <_printf_i+0x114>
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d10b      	bne.n	8005c66 <_printf_i+0x146>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	07df      	lsls	r7, r3, #31
 8005c52:	d508      	bpl.n	8005c66 <_printf_i+0x146>
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	6861      	ldr	r1, [r4, #4]
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	bfde      	ittt	le
 8005c5c:	2330      	movle	r3, #48	@ 0x30
 8005c5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c66:	1b92      	subs	r2, r2, r6
 8005c68:	6122      	str	r2, [r4, #16]
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4640      	mov	r0, r8
 8005c70:	f8cd a000 	str.w	sl, [sp]
 8005c74:	aa03      	add	r2, sp, #12
 8005c76:	f7ff fee1 	bl	8005a3c <_printf_common>
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d14a      	bne.n	8005d14 <_printf_i+0x1f4>
 8005c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c82:	b004      	add	sp, #16
 8005c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	f043 0320 	orr.w	r3, r3, #32
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	2778      	movs	r7, #120	@ 0x78
 8005c92:	4832      	ldr	r0, [pc, #200]	@ (8005d5c <_printf_i+0x23c>)
 8005c94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	6831      	ldr	r1, [r6, #0]
 8005c9c:	061f      	lsls	r7, r3, #24
 8005c9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ca2:	d402      	bmi.n	8005caa <_printf_i+0x18a>
 8005ca4:	065f      	lsls	r7, r3, #25
 8005ca6:	bf48      	it	mi
 8005ca8:	b2ad      	uxthmi	r5, r5
 8005caa:	6031      	str	r1, [r6, #0]
 8005cac:	07d9      	lsls	r1, r3, #31
 8005cae:	bf44      	itt	mi
 8005cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb4:	6023      	strmi	r3, [r4, #0]
 8005cb6:	b11d      	cbz	r5, 8005cc0 <_printf_i+0x1a0>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	e7ab      	b.n	8005c14 <_printf_i+0xf4>
 8005cbc:	4826      	ldr	r0, [pc, #152]	@ (8005d58 <_printf_i+0x238>)
 8005cbe:	e7e9      	b.n	8005c94 <_printf_i+0x174>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	f023 0320 	bic.w	r3, r3, #32
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	e7f6      	b.n	8005cb8 <_printf_i+0x198>
 8005cca:	4616      	mov	r6, r2
 8005ccc:	e7bd      	b.n	8005c4a <_printf_i+0x12a>
 8005cce:	6833      	ldr	r3, [r6, #0]
 8005cd0:	6825      	ldr	r5, [r4, #0]
 8005cd2:	1d18      	adds	r0, r3, #4
 8005cd4:	6961      	ldr	r1, [r4, #20]
 8005cd6:	6030      	str	r0, [r6, #0]
 8005cd8:	062e      	lsls	r6, r5, #24
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	d501      	bpl.n	8005ce2 <_printf_i+0x1c2>
 8005cde:	6019      	str	r1, [r3, #0]
 8005ce0:	e002      	b.n	8005ce8 <_printf_i+0x1c8>
 8005ce2:	0668      	lsls	r0, r5, #25
 8005ce4:	d5fb      	bpl.n	8005cde <_printf_i+0x1be>
 8005ce6:	8019      	strh	r1, [r3, #0]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4616      	mov	r6, r2
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	e7bc      	b.n	8005c6a <_printf_i+0x14a>
 8005cf0:	6833      	ldr	r3, [r6, #0]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	6032      	str	r2, [r6, #0]
 8005cf8:	681e      	ldr	r6, [r3, #0]
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f000 f9d4 	bl	80060aa <memchr>
 8005d02:	b108      	cbz	r0, 8005d08 <_printf_i+0x1e8>
 8005d04:	1b80      	subs	r0, r0, r6
 8005d06:	6060      	str	r0, [r4, #4]
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	6123      	str	r3, [r4, #16]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d12:	e7aa      	b.n	8005c6a <_printf_i+0x14a>
 8005d14:	4632      	mov	r2, r6
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	47d0      	blx	sl
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d0ad      	beq.n	8005c7e <_printf_i+0x15e>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	079b      	lsls	r3, r3, #30
 8005d26:	d413      	bmi.n	8005d50 <_printf_i+0x230>
 8005d28:	68e0      	ldr	r0, [r4, #12]
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	4298      	cmp	r0, r3
 8005d2e:	bfb8      	it	lt
 8005d30:	4618      	movlt	r0, r3
 8005d32:	e7a6      	b.n	8005c82 <_printf_i+0x162>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4632      	mov	r2, r6
 8005d38:	4649      	mov	r1, r9
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	47d0      	blx	sl
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d09d      	beq.n	8005c7e <_printf_i+0x15e>
 8005d42:	3501      	adds	r5, #1
 8005d44:	68e3      	ldr	r3, [r4, #12]
 8005d46:	9903      	ldr	r1, [sp, #12]
 8005d48:	1a5b      	subs	r3, r3, r1
 8005d4a:	42ab      	cmp	r3, r5
 8005d4c:	dcf2      	bgt.n	8005d34 <_printf_i+0x214>
 8005d4e:	e7eb      	b.n	8005d28 <_printf_i+0x208>
 8005d50:	2500      	movs	r5, #0
 8005d52:	f104 0619 	add.w	r6, r4, #25
 8005d56:	e7f5      	b.n	8005d44 <_printf_i+0x224>
 8005d58:	080081e8 	.word	0x080081e8
 8005d5c:	080081f9 	.word	0x080081f9

08005d60 <std>:
 8005d60:	2300      	movs	r3, #0
 8005d62:	b510      	push	{r4, lr}
 8005d64:	4604      	mov	r4, r0
 8005d66:	e9c0 3300 	strd	r3, r3, [r0]
 8005d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d6e:	6083      	str	r3, [r0, #8]
 8005d70:	8181      	strh	r1, [r0, #12]
 8005d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d74:	81c2      	strh	r2, [r0, #14]
 8005d76:	6183      	str	r3, [r0, #24]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	305c      	adds	r0, #92	@ 0x5c
 8005d7e:	f000 f914 	bl	8005faa <memset>
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <std+0x58>)
 8005d84:	6224      	str	r4, [r4, #32]
 8005d86:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d88:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <std+0x5c>)
 8005d8a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <std+0x60>)
 8005d8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d90:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc4 <std+0x64>)
 8005d92:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d94:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <std+0x68>)
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d006      	beq.n	8005da8 <std+0x48>
 8005d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d9e:	4294      	cmp	r4, r2
 8005da0:	d002      	beq.n	8005da8 <std+0x48>
 8005da2:	33d0      	adds	r3, #208	@ 0xd0
 8005da4:	429c      	cmp	r4, r3
 8005da6:	d105      	bne.n	8005db4 <std+0x54>
 8005da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db0:	f000 b978 	b.w	80060a4 <__retarget_lock_init_recursive>
 8005db4:	bd10      	pop	{r4, pc}
 8005db6:	bf00      	nop
 8005db8:	08005f25 	.word	0x08005f25
 8005dbc:	08005f47 	.word	0x08005f47
 8005dc0:	08005f7f 	.word	0x08005f7f
 8005dc4:	08005fa3 	.word	0x08005fa3
 8005dc8:	20000404 	.word	0x20000404

08005dcc <stdio_exit_handler>:
 8005dcc:	4a02      	ldr	r2, [pc, #8]	@ (8005dd8 <stdio_exit_handler+0xc>)
 8005dce:	4903      	ldr	r1, [pc, #12]	@ (8005ddc <stdio_exit_handler+0x10>)
 8005dd0:	4803      	ldr	r0, [pc, #12]	@ (8005de0 <stdio_exit_handler+0x14>)
 8005dd2:	f000 b869 	b.w	8005ea8 <_fwalk_sglue>
 8005dd6:	bf00      	nop
 8005dd8:	20000014 	.word	0x20000014
 8005ddc:	08007a15 	.word	0x08007a15
 8005de0:	20000024 	.word	0x20000024

08005de4 <cleanup_stdio>:
 8005de4:	6841      	ldr	r1, [r0, #4]
 8005de6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <cleanup_stdio+0x34>)
 8005de8:	b510      	push	{r4, lr}
 8005dea:	4299      	cmp	r1, r3
 8005dec:	4604      	mov	r4, r0
 8005dee:	d001      	beq.n	8005df4 <cleanup_stdio+0x10>
 8005df0:	f001 fe10 	bl	8007a14 <_fflush_r>
 8005df4:	68a1      	ldr	r1, [r4, #8]
 8005df6:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <cleanup_stdio+0x38>)
 8005df8:	4299      	cmp	r1, r3
 8005dfa:	d002      	beq.n	8005e02 <cleanup_stdio+0x1e>
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f001 fe09 	bl	8007a14 <_fflush_r>
 8005e02:	68e1      	ldr	r1, [r4, #12]
 8005e04:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <cleanup_stdio+0x3c>)
 8005e06:	4299      	cmp	r1, r3
 8005e08:	d004      	beq.n	8005e14 <cleanup_stdio+0x30>
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e10:	f001 be00 	b.w	8007a14 <_fflush_r>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	bf00      	nop
 8005e18:	20000404 	.word	0x20000404
 8005e1c:	2000046c 	.word	0x2000046c
 8005e20:	200004d4 	.word	0x200004d4

08005e24 <global_stdio_init.part.0>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <global_stdio_init.part.0+0x30>)
 8005e28:	4c0b      	ldr	r4, [pc, #44]	@ (8005e58 <global_stdio_init.part.0+0x34>)
 8005e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e5c <global_stdio_init.part.0+0x38>)
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	2104      	movs	r1, #4
 8005e32:	2200      	movs	r2, #0
 8005e34:	f7ff ff94 	bl	8005d60 <std>
 8005e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	2109      	movs	r1, #9
 8005e40:	f7ff ff8e 	bl	8005d60 <std>
 8005e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e48:	2202      	movs	r2, #2
 8005e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4e:	2112      	movs	r1, #18
 8005e50:	f7ff bf86 	b.w	8005d60 <std>
 8005e54:	2000053c 	.word	0x2000053c
 8005e58:	20000404 	.word	0x20000404
 8005e5c:	08005dcd 	.word	0x08005dcd

08005e60 <__sfp_lock_acquire>:
 8005e60:	4801      	ldr	r0, [pc, #4]	@ (8005e68 <__sfp_lock_acquire+0x8>)
 8005e62:	f000 b920 	b.w	80060a6 <__retarget_lock_acquire_recursive>
 8005e66:	bf00      	nop
 8005e68:	20000545 	.word	0x20000545

08005e6c <__sfp_lock_release>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	@ (8005e74 <__sfp_lock_release+0x8>)
 8005e6e:	f000 b91b 	b.w	80060a8 <__retarget_lock_release_recursive>
 8005e72:	bf00      	nop
 8005e74:	20000545 	.word	0x20000545

08005e78 <__sinit>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	f7ff fff0 	bl	8005e60 <__sfp_lock_acquire>
 8005e80:	6a23      	ldr	r3, [r4, #32]
 8005e82:	b11b      	cbz	r3, 8005e8c <__sinit+0x14>
 8005e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e88:	f7ff bff0 	b.w	8005e6c <__sfp_lock_release>
 8005e8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ea0 <__sinit+0x28>)
 8005e8e:	6223      	str	r3, [r4, #32]
 8005e90:	4b04      	ldr	r3, [pc, #16]	@ (8005ea4 <__sinit+0x2c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f5      	bne.n	8005e84 <__sinit+0xc>
 8005e98:	f7ff ffc4 	bl	8005e24 <global_stdio_init.part.0>
 8005e9c:	e7f2      	b.n	8005e84 <__sinit+0xc>
 8005e9e:	bf00      	nop
 8005ea0:	08005de5 	.word	0x08005de5
 8005ea4:	2000053c 	.word	0x2000053c

08005ea8 <_fwalk_sglue>:
 8005ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	4607      	mov	r7, r0
 8005eae:	4688      	mov	r8, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8005ebc:	d505      	bpl.n	8005eca <_fwalk_sglue+0x22>
 8005ebe:	6824      	ldr	r4, [r4, #0]
 8005ec0:	2c00      	cmp	r4, #0
 8005ec2:	d1f7      	bne.n	8005eb4 <_fwalk_sglue+0xc>
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d907      	bls.n	8005ee0 <_fwalk_sglue+0x38>
 8005ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	d003      	beq.n	8005ee0 <_fwalk_sglue+0x38>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4638      	mov	r0, r7
 8005edc:	47c0      	blx	r8
 8005ede:	4306      	orrs	r6, r0
 8005ee0:	3568      	adds	r5, #104	@ 0x68
 8005ee2:	e7e9      	b.n	8005eb8 <_fwalk_sglue+0x10>

08005ee4 <siprintf>:
 8005ee4:	b40e      	push	{r1, r2, r3}
 8005ee6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005eea:	b500      	push	{lr}
 8005eec:	b09c      	sub	sp, #112	@ 0x70
 8005eee:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ef0:	9002      	str	r0, [sp, #8]
 8005ef2:	9006      	str	r0, [sp, #24]
 8005ef4:	9107      	str	r1, [sp, #28]
 8005ef6:	9104      	str	r1, [sp, #16]
 8005ef8:	4808      	ldr	r0, [pc, #32]	@ (8005f1c <siprintf+0x38>)
 8005efa:	4909      	ldr	r1, [pc, #36]	@ (8005f20 <siprintf+0x3c>)
 8005efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f00:	9105      	str	r1, [sp, #20]
 8005f02:	6800      	ldr	r0, [r0, #0]
 8005f04:	a902      	add	r1, sp, #8
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	f001 fc08 	bl	800771c <_svfiprintf_r>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	9b02      	ldr	r3, [sp, #8]
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	b01c      	add	sp, #112	@ 0x70
 8005f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f18:	b003      	add	sp, #12
 8005f1a:	4770      	bx	lr
 8005f1c:	20000020 	.word	0x20000020
 8005f20:	ffff0208 	.word	0xffff0208

08005f24 <__sread>:
 8005f24:	b510      	push	{r4, lr}
 8005f26:	460c      	mov	r4, r1
 8005f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2c:	f000 f86c 	bl	8006008 <_read_r>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	bfab      	itete	ge
 8005f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f36:	89a3      	ldrhlt	r3, [r4, #12]
 8005f38:	181b      	addge	r3, r3, r0
 8005f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f3e:	bfac      	ite	ge
 8005f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f42:	81a3      	strhlt	r3, [r4, #12]
 8005f44:	bd10      	pop	{r4, pc}

08005f46 <__swrite>:
 8005f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4a:	461f      	mov	r7, r3
 8005f4c:	898b      	ldrh	r3, [r1, #12]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	05db      	lsls	r3, r3, #23
 8005f52:	460c      	mov	r4, r1
 8005f54:	4616      	mov	r6, r2
 8005f56:	d505      	bpl.n	8005f64 <__swrite+0x1e>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f60:	f000 f840 	bl	8005fe4 <_lseek_r>
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	4632      	mov	r2, r6
 8005f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	4628      	mov	r0, r5
 8005f70:	463b      	mov	r3, r7
 8005f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7a:	f000 b857 	b.w	800602c <_write_r>

08005f7e <__sseek>:
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	460c      	mov	r4, r1
 8005f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f86:	f000 f82d 	bl	8005fe4 <_lseek_r>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	bf15      	itete	ne
 8005f90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f9a:	81a3      	strheq	r3, [r4, #12]
 8005f9c:	bf18      	it	ne
 8005f9e:	81a3      	strhne	r3, [r4, #12]
 8005fa0:	bd10      	pop	{r4, pc}

08005fa2 <__sclose>:
 8005fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa6:	f000 b80d 	b.w	8005fc4 <_close_r>

08005faa <memset>:
 8005faa:	4603      	mov	r3, r0
 8005fac:	4402      	add	r2, r0
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d100      	bne.n	8005fb4 <memset+0xa>
 8005fb2:	4770      	bx	lr
 8005fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb8:	e7f9      	b.n	8005fae <memset+0x4>
	...

08005fbc <_localeconv_r>:
 8005fbc:	4800      	ldr	r0, [pc, #0]	@ (8005fc0 <_localeconv_r+0x4>)
 8005fbe:	4770      	bx	lr
 8005fc0:	20000160 	.word	0x20000160

08005fc4 <_close_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	4d05      	ldr	r5, [pc, #20]	@ (8005fe0 <_close_r+0x1c>)
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	f7fc f80d 	bl	8001fee <_close>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_close_r+0x1a>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_close_r+0x1a>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20000540 	.word	0x20000540

08005fe4 <_lseek_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	2200      	movs	r2, #0
 8005fee:	4d05      	ldr	r5, [pc, #20]	@ (8006004 <_lseek_r+0x20>)
 8005ff0:	602a      	str	r2, [r5, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f7fc f81f 	bl	8002036 <_lseek>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_lseek_r+0x1e>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_lseek_r+0x1e>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20000540 	.word	0x20000540

08006008 <_read_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	4611      	mov	r1, r2
 8006010:	2200      	movs	r2, #0
 8006012:	4d05      	ldr	r5, [pc, #20]	@ (8006028 <_read_r+0x20>)
 8006014:	602a      	str	r2, [r5, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	f7fb ffb0 	bl	8001f7c <_read>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_read_r+0x1e>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_read_r+0x1e>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	20000540 	.word	0x20000540

0800602c <_write_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	4611      	mov	r1, r2
 8006034:	2200      	movs	r2, #0
 8006036:	4d05      	ldr	r5, [pc, #20]	@ (800604c <_write_r+0x20>)
 8006038:	602a      	str	r2, [r5, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	f7fb ffbb 	bl	8001fb6 <_write>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_write_r+0x1e>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_write_r+0x1e>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000540 	.word	0x20000540

08006050 <__errno>:
 8006050:	4b01      	ldr	r3, [pc, #4]	@ (8006058 <__errno+0x8>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000020 	.word	0x20000020

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	2600      	movs	r6, #0
 8006060:	4d0c      	ldr	r5, [pc, #48]	@ (8006094 <__libc_init_array+0x38>)
 8006062:	4c0d      	ldr	r4, [pc, #52]	@ (8006098 <__libc_init_array+0x3c>)
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	f002 f86e 	bl	800814c <_init>
 8006070:	2600      	movs	r6, #0
 8006072:	4d0a      	ldr	r5, [pc, #40]	@ (800609c <__libc_init_array+0x40>)
 8006074:	4c0a      	ldr	r4, [pc, #40]	@ (80060a0 <__libc_init_array+0x44>)
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	08008550 	.word	0x08008550
 8006098:	08008550 	.word	0x08008550
 800609c:	08008550 	.word	0x08008550
 80060a0:	08008554 	.word	0x08008554

080060a4 <__retarget_lock_init_recursive>:
 80060a4:	4770      	bx	lr

080060a6 <__retarget_lock_acquire_recursive>:
 80060a6:	4770      	bx	lr

080060a8 <__retarget_lock_release_recursive>:
 80060a8:	4770      	bx	lr

080060aa <memchr>:
 80060aa:	4603      	mov	r3, r0
 80060ac:	b510      	push	{r4, lr}
 80060ae:	b2c9      	uxtb	r1, r1
 80060b0:	4402      	add	r2, r0
 80060b2:	4293      	cmp	r3, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	d101      	bne.n	80060bc <memchr+0x12>
 80060b8:	2000      	movs	r0, #0
 80060ba:	e003      	b.n	80060c4 <memchr+0x1a>
 80060bc:	7804      	ldrb	r4, [r0, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	428c      	cmp	r4, r1
 80060c2:	d1f6      	bne.n	80060b2 <memchr+0x8>
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <quorem>:
 80060c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ca:	6903      	ldr	r3, [r0, #16]
 80060cc:	690c      	ldr	r4, [r1, #16]
 80060ce:	4607      	mov	r7, r0
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	db7e      	blt.n	80061d2 <quorem+0x10c>
 80060d4:	3c01      	subs	r4, #1
 80060d6:	00a3      	lsls	r3, r4, #2
 80060d8:	f100 0514 	add.w	r5, r0, #20
 80060dc:	f101 0814 	add.w	r8, r1, #20
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060f0:	3301      	adds	r3, #1
 80060f2:	429a      	cmp	r2, r3
 80060f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80060f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060fc:	d32e      	bcc.n	800615c <quorem+0x96>
 80060fe:	f04f 0a00 	mov.w	sl, #0
 8006102:	46c4      	mov	ip, r8
 8006104:	46ae      	mov	lr, r5
 8006106:	46d3      	mov	fp, sl
 8006108:	f85c 3b04 	ldr.w	r3, [ip], #4
 800610c:	b298      	uxth	r0, r3
 800610e:	fb06 a000 	mla	r0, r6, r0, sl
 8006112:	0c1b      	lsrs	r3, r3, #16
 8006114:	0c02      	lsrs	r2, r0, #16
 8006116:	fb06 2303 	mla	r3, r6, r3, r2
 800611a:	f8de 2000 	ldr.w	r2, [lr]
 800611e:	b280      	uxth	r0, r0
 8006120:	b292      	uxth	r2, r2
 8006122:	1a12      	subs	r2, r2, r0
 8006124:	445a      	add	r2, fp
 8006126:	f8de 0000 	ldr.w	r0, [lr]
 800612a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800612e:	b29b      	uxth	r3, r3
 8006130:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006134:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006138:	b292      	uxth	r2, r2
 800613a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800613e:	45e1      	cmp	r9, ip
 8006140:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006144:	f84e 2b04 	str.w	r2, [lr], #4
 8006148:	d2de      	bcs.n	8006108 <quorem+0x42>
 800614a:	9b00      	ldr	r3, [sp, #0]
 800614c:	58eb      	ldr	r3, [r5, r3]
 800614e:	b92b      	cbnz	r3, 800615c <quorem+0x96>
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	3b04      	subs	r3, #4
 8006154:	429d      	cmp	r5, r3
 8006156:	461a      	mov	r2, r3
 8006158:	d32f      	bcc.n	80061ba <quorem+0xf4>
 800615a:	613c      	str	r4, [r7, #16]
 800615c:	4638      	mov	r0, r7
 800615e:	f001 f979 	bl	8007454 <__mcmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	db25      	blt.n	80061b2 <quorem+0xec>
 8006166:	4629      	mov	r1, r5
 8006168:	2000      	movs	r0, #0
 800616a:	f858 2b04 	ldr.w	r2, [r8], #4
 800616e:	f8d1 c000 	ldr.w	ip, [r1]
 8006172:	fa1f fe82 	uxth.w	lr, r2
 8006176:	fa1f f38c 	uxth.w	r3, ip
 800617a:	eba3 030e 	sub.w	r3, r3, lr
 800617e:	4403      	add	r3, r0
 8006180:	0c12      	lsrs	r2, r2, #16
 8006182:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006186:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800618a:	b29b      	uxth	r3, r3
 800618c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006190:	45c1      	cmp	r9, r8
 8006192:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006196:	f841 3b04 	str.w	r3, [r1], #4
 800619a:	d2e6      	bcs.n	800616a <quorem+0xa4>
 800619c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061a4:	b922      	cbnz	r2, 80061b0 <quorem+0xea>
 80061a6:	3b04      	subs	r3, #4
 80061a8:	429d      	cmp	r5, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	d30b      	bcc.n	80061c6 <quorem+0x100>
 80061ae:	613c      	str	r4, [r7, #16]
 80061b0:	3601      	adds	r6, #1
 80061b2:	4630      	mov	r0, r6
 80061b4:	b003      	add	sp, #12
 80061b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	3b04      	subs	r3, #4
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d1cb      	bne.n	800615a <quorem+0x94>
 80061c2:	3c01      	subs	r4, #1
 80061c4:	e7c6      	b.n	8006154 <quorem+0x8e>
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d1ef      	bne.n	80061ae <quorem+0xe8>
 80061ce:	3c01      	subs	r4, #1
 80061d0:	e7ea      	b.n	80061a8 <quorem+0xe2>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e7ee      	b.n	80061b4 <quorem+0xee>
	...

080061d8 <_dtoa_r>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	4614      	mov	r4, r2
 80061de:	461d      	mov	r5, r3
 80061e0:	69c7      	ldr	r7, [r0, #28]
 80061e2:	b097      	sub	sp, #92	@ 0x5c
 80061e4:	4683      	mov	fp, r0
 80061e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061ec:	b97f      	cbnz	r7, 800620e <_dtoa_r+0x36>
 80061ee:	2010      	movs	r0, #16
 80061f0:	f000 fe02 	bl	8006df8 <malloc>
 80061f4:	4602      	mov	r2, r0
 80061f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80061fa:	b920      	cbnz	r0, 8006206 <_dtoa_r+0x2e>
 80061fc:	21ef      	movs	r1, #239	@ 0xef
 80061fe:	4ba8      	ldr	r3, [pc, #672]	@ (80064a0 <_dtoa_r+0x2c8>)
 8006200:	48a8      	ldr	r0, [pc, #672]	@ (80064a4 <_dtoa_r+0x2cc>)
 8006202:	f001 fc67 	bl	8007ad4 <__assert_func>
 8006206:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800620a:	6007      	str	r7, [r0, #0]
 800620c:	60c7      	str	r7, [r0, #12]
 800620e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	b159      	cbz	r1, 800622e <_dtoa_r+0x56>
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	2301      	movs	r3, #1
 800621a:	4093      	lsls	r3, r2
 800621c:	604a      	str	r2, [r1, #4]
 800621e:	608b      	str	r3, [r1, #8]
 8006220:	4658      	mov	r0, fp
 8006222:	f000 fedf 	bl	8006fe4 <_Bfree>
 8006226:	2200      	movs	r2, #0
 8006228:	f8db 301c 	ldr.w	r3, [fp, #28]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	1e2b      	subs	r3, r5, #0
 8006230:	bfaf      	iteee	ge
 8006232:	2300      	movge	r3, #0
 8006234:	2201      	movlt	r2, #1
 8006236:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800623a:	9303      	strlt	r3, [sp, #12]
 800623c:	bfa8      	it	ge
 800623e:	6033      	strge	r3, [r6, #0]
 8006240:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006244:	4b98      	ldr	r3, [pc, #608]	@ (80064a8 <_dtoa_r+0x2d0>)
 8006246:	bfb8      	it	lt
 8006248:	6032      	strlt	r2, [r6, #0]
 800624a:	ea33 0308 	bics.w	r3, r3, r8
 800624e:	d112      	bne.n	8006276 <_dtoa_r+0x9e>
 8006250:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006254:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800625c:	4323      	orrs	r3, r4
 800625e:	f000 8550 	beq.w	8006d02 <_dtoa_r+0xb2a>
 8006262:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006264:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80064ac <_dtoa_r+0x2d4>
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8552 	beq.w	8006d12 <_dtoa_r+0xb3a>
 800626e:	f10a 0303 	add.w	r3, sl, #3
 8006272:	f000 bd4c 	b.w	8006d0e <_dtoa_r+0xb36>
 8006276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800627a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800627e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006282:	2200      	movs	r2, #0
 8006284:	2300      	movs	r3, #0
 8006286:	f7fa fb8f 	bl	80009a8 <__aeabi_dcmpeq>
 800628a:	4607      	mov	r7, r0
 800628c:	b158      	cbz	r0, 80062a6 <_dtoa_r+0xce>
 800628e:	2301      	movs	r3, #1
 8006290:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006296:	b113      	cbz	r3, 800629e <_dtoa_r+0xc6>
 8006298:	4b85      	ldr	r3, [pc, #532]	@ (80064b0 <_dtoa_r+0x2d8>)
 800629a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80064b4 <_dtoa_r+0x2dc>
 80062a2:	f000 bd36 	b.w	8006d12 <_dtoa_r+0xb3a>
 80062a6:	ab14      	add	r3, sp, #80	@ 0x50
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	ab15      	add	r3, sp, #84	@ 0x54
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4658      	mov	r0, fp
 80062b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062b4:	f001 f97e 	bl	80075b4 <__d2b>
 80062b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80062bc:	4681      	mov	r9, r0
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d077      	beq.n	80063b2 <_dtoa_r+0x1da>
 80062c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80062da:	4619      	mov	r1, r3
 80062dc:	2200      	movs	r2, #0
 80062de:	4b76      	ldr	r3, [pc, #472]	@ (80064b8 <_dtoa_r+0x2e0>)
 80062e0:	f7f9 ff42 	bl	8000168 <__aeabi_dsub>
 80062e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006488 <_dtoa_r+0x2b0>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7fa f8f5 	bl	80004d8 <__aeabi_dmul>
 80062ee:	a368      	add	r3, pc, #416	@ (adr r3, 8006490 <_dtoa_r+0x2b8>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7f9 ff3a 	bl	800016c <__adddf3>
 80062f8:	4604      	mov	r4, r0
 80062fa:	4630      	mov	r0, r6
 80062fc:	460d      	mov	r5, r1
 80062fe:	f7fa f881 	bl	8000404 <__aeabi_i2d>
 8006302:	a365      	add	r3, pc, #404	@ (adr r3, 8006498 <_dtoa_r+0x2c0>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7fa f8e6 	bl	80004d8 <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4620      	mov	r0, r4
 8006312:	4629      	mov	r1, r5
 8006314:	f7f9 ff2a 	bl	800016c <__adddf3>
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	f7fa fb8c 	bl	8000a38 <__aeabi_d2iz>
 8006320:	2200      	movs	r2, #0
 8006322:	4607      	mov	r7, r0
 8006324:	2300      	movs	r3, #0
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7fa fb47 	bl	80009bc <__aeabi_dcmplt>
 800632e:	b140      	cbz	r0, 8006342 <_dtoa_r+0x16a>
 8006330:	4638      	mov	r0, r7
 8006332:	f7fa f867 	bl	8000404 <__aeabi_i2d>
 8006336:	4622      	mov	r2, r4
 8006338:	462b      	mov	r3, r5
 800633a:	f7fa fb35 	bl	80009a8 <__aeabi_dcmpeq>
 800633e:	b900      	cbnz	r0, 8006342 <_dtoa_r+0x16a>
 8006340:	3f01      	subs	r7, #1
 8006342:	2f16      	cmp	r7, #22
 8006344:	d853      	bhi.n	80063ee <_dtoa_r+0x216>
 8006346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800634a:	4b5c      	ldr	r3, [pc, #368]	@ (80064bc <_dtoa_r+0x2e4>)
 800634c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa fb32 	bl	80009bc <__aeabi_dcmplt>
 8006358:	2800      	cmp	r0, #0
 800635a:	d04a      	beq.n	80063f2 <_dtoa_r+0x21a>
 800635c:	2300      	movs	r3, #0
 800635e:	3f01      	subs	r7, #1
 8006360:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006362:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006364:	1b9b      	subs	r3, r3, r6
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	bf46      	itte	mi
 800636a:	f1c3 0801 	rsbmi	r8, r3, #1
 800636e:	2300      	movmi	r3, #0
 8006370:	f04f 0800 	movpl.w	r8, #0
 8006374:	9209      	str	r2, [sp, #36]	@ 0x24
 8006376:	bf48      	it	mi
 8006378:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800637a:	2f00      	cmp	r7, #0
 800637c:	db3b      	blt.n	80063f6 <_dtoa_r+0x21e>
 800637e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006380:	970e      	str	r7, [sp, #56]	@ 0x38
 8006382:	443b      	add	r3, r7
 8006384:	9309      	str	r3, [sp, #36]	@ 0x24
 8006386:	2300      	movs	r3, #0
 8006388:	930a      	str	r3, [sp, #40]	@ 0x28
 800638a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800638c:	2b09      	cmp	r3, #9
 800638e:	d866      	bhi.n	800645e <_dtoa_r+0x286>
 8006390:	2b05      	cmp	r3, #5
 8006392:	bfc4      	itt	gt
 8006394:	3b04      	subgt	r3, #4
 8006396:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006398:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800639a:	bfc8      	it	gt
 800639c:	2400      	movgt	r4, #0
 800639e:	f1a3 0302 	sub.w	r3, r3, #2
 80063a2:	bfd8      	it	le
 80063a4:	2401      	movle	r4, #1
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d864      	bhi.n	8006474 <_dtoa_r+0x29c>
 80063aa:	e8df f003 	tbb	[pc, r3]
 80063ae:	382b      	.short	0x382b
 80063b0:	5636      	.short	0x5636
 80063b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063b6:	441e      	add	r6, r3
 80063b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063bc:	2b20      	cmp	r3, #32
 80063be:	bfc1      	itttt	gt
 80063c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80063c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063d0:	bfd6      	itet	le
 80063d2:	f1c3 0320 	rsble	r3, r3, #32
 80063d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80063da:	fa04 f003 	lslle.w	r0, r4, r3
 80063de:	f7fa f801 	bl	80003e4 <__aeabi_ui2d>
 80063e2:	2201      	movs	r2, #1
 80063e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063e8:	3e01      	subs	r6, #1
 80063ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80063ec:	e775      	b.n	80062da <_dtoa_r+0x102>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e7b6      	b.n	8006360 <_dtoa_r+0x188>
 80063f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063f4:	e7b5      	b.n	8006362 <_dtoa_r+0x18a>
 80063f6:	427b      	negs	r3, r7
 80063f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063fa:	2300      	movs	r3, #0
 80063fc:	eba8 0807 	sub.w	r8, r8, r7
 8006400:	930e      	str	r3, [sp, #56]	@ 0x38
 8006402:	e7c2      	b.n	800638a <_dtoa_r+0x1b2>
 8006404:	2300      	movs	r3, #0
 8006406:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006408:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800640a:	2b00      	cmp	r3, #0
 800640c:	dc35      	bgt.n	800647a <_dtoa_r+0x2a2>
 800640e:	2301      	movs	r3, #1
 8006410:	461a      	mov	r2, r3
 8006412:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006416:	9221      	str	r2, [sp, #132]	@ 0x84
 8006418:	e00b      	b.n	8006432 <_dtoa_r+0x25a>
 800641a:	2301      	movs	r3, #1
 800641c:	e7f3      	b.n	8006406 <_dtoa_r+0x22e>
 800641e:	2300      	movs	r3, #0
 8006420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006422:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	9308      	str	r3, [sp, #32]
 8006428:	3301      	adds	r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	bfb8      	it	lt
 8006430:	2301      	movlt	r3, #1
 8006432:	2100      	movs	r1, #0
 8006434:	2204      	movs	r2, #4
 8006436:	f8db 001c 	ldr.w	r0, [fp, #28]
 800643a:	f102 0514 	add.w	r5, r2, #20
 800643e:	429d      	cmp	r5, r3
 8006440:	d91f      	bls.n	8006482 <_dtoa_r+0x2aa>
 8006442:	6041      	str	r1, [r0, #4]
 8006444:	4658      	mov	r0, fp
 8006446:	f000 fd8d 	bl	8006f64 <_Balloc>
 800644a:	4682      	mov	sl, r0
 800644c:	2800      	cmp	r0, #0
 800644e:	d139      	bne.n	80064c4 <_dtoa_r+0x2ec>
 8006450:	4602      	mov	r2, r0
 8006452:	f240 11af 	movw	r1, #431	@ 0x1af
 8006456:	4b1a      	ldr	r3, [pc, #104]	@ (80064c0 <_dtoa_r+0x2e8>)
 8006458:	e6d2      	b.n	8006200 <_dtoa_r+0x28>
 800645a:	2301      	movs	r3, #1
 800645c:	e7e0      	b.n	8006420 <_dtoa_r+0x248>
 800645e:	2401      	movs	r4, #1
 8006460:	2300      	movs	r3, #0
 8006462:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006464:	9320      	str	r3, [sp, #128]	@ 0x80
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	2200      	movs	r2, #0
 800646c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006470:	2312      	movs	r3, #18
 8006472:	e7d0      	b.n	8006416 <_dtoa_r+0x23e>
 8006474:	2301      	movs	r3, #1
 8006476:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006478:	e7f5      	b.n	8006466 <_dtoa_r+0x28e>
 800647a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800647c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006480:	e7d7      	b.n	8006432 <_dtoa_r+0x25a>
 8006482:	3101      	adds	r1, #1
 8006484:	0052      	lsls	r2, r2, #1
 8006486:	e7d8      	b.n	800643a <_dtoa_r+0x262>
 8006488:	636f4361 	.word	0x636f4361
 800648c:	3fd287a7 	.word	0x3fd287a7
 8006490:	8b60c8b3 	.word	0x8b60c8b3
 8006494:	3fc68a28 	.word	0x3fc68a28
 8006498:	509f79fb 	.word	0x509f79fb
 800649c:	3fd34413 	.word	0x3fd34413
 80064a0:	08008217 	.word	0x08008217
 80064a4:	0800822e 	.word	0x0800822e
 80064a8:	7ff00000 	.word	0x7ff00000
 80064ac:	08008213 	.word	0x08008213
 80064b0:	080081e7 	.word	0x080081e7
 80064b4:	080081e6 	.word	0x080081e6
 80064b8:	3ff80000 	.word	0x3ff80000
 80064bc:	08008328 	.word	0x08008328
 80064c0:	08008286 	.word	0x08008286
 80064c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064c8:	6018      	str	r0, [r3, #0]
 80064ca:	9b07      	ldr	r3, [sp, #28]
 80064cc:	2b0e      	cmp	r3, #14
 80064ce:	f200 80a4 	bhi.w	800661a <_dtoa_r+0x442>
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	f000 80a1 	beq.w	800661a <_dtoa_r+0x442>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	dd33      	ble.n	8006544 <_dtoa_r+0x36c>
 80064dc:	4b86      	ldr	r3, [pc, #536]	@ (80066f8 <_dtoa_r+0x520>)
 80064de:	f007 020f 	and.w	r2, r7, #15
 80064e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064e6:	05f8      	lsls	r0, r7, #23
 80064e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064f4:	d516      	bpl.n	8006524 <_dtoa_r+0x34c>
 80064f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064fa:	4b80      	ldr	r3, [pc, #512]	@ (80066fc <_dtoa_r+0x524>)
 80064fc:	2603      	movs	r6, #3
 80064fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006502:	f7fa f913 	bl	800072c <__aeabi_ddiv>
 8006506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800650a:	f004 040f 	and.w	r4, r4, #15
 800650e:	4d7b      	ldr	r5, [pc, #492]	@ (80066fc <_dtoa_r+0x524>)
 8006510:	b954      	cbnz	r4, 8006528 <_dtoa_r+0x350>
 8006512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651a:	f7fa f907 	bl	800072c <__aeabi_ddiv>
 800651e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006522:	e028      	b.n	8006576 <_dtoa_r+0x39e>
 8006524:	2602      	movs	r6, #2
 8006526:	e7f2      	b.n	800650e <_dtoa_r+0x336>
 8006528:	07e1      	lsls	r1, r4, #31
 800652a:	d508      	bpl.n	800653e <_dtoa_r+0x366>
 800652c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006534:	f7f9 ffd0 	bl	80004d8 <__aeabi_dmul>
 8006538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800653c:	3601      	adds	r6, #1
 800653e:	1064      	asrs	r4, r4, #1
 8006540:	3508      	adds	r5, #8
 8006542:	e7e5      	b.n	8006510 <_dtoa_r+0x338>
 8006544:	f000 80d2 	beq.w	80066ec <_dtoa_r+0x514>
 8006548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800654c:	427c      	negs	r4, r7
 800654e:	4b6a      	ldr	r3, [pc, #424]	@ (80066f8 <_dtoa_r+0x520>)
 8006550:	f004 020f 	and.w	r2, r4, #15
 8006554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 ffbc 	bl	80004d8 <__aeabi_dmul>
 8006560:	2602      	movs	r6, #2
 8006562:	2300      	movs	r3, #0
 8006564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006568:	4d64      	ldr	r5, [pc, #400]	@ (80066fc <_dtoa_r+0x524>)
 800656a:	1124      	asrs	r4, r4, #4
 800656c:	2c00      	cmp	r4, #0
 800656e:	f040 80b2 	bne.w	80066d6 <_dtoa_r+0x4fe>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1d3      	bne.n	800651e <_dtoa_r+0x346>
 8006576:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800657a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80b7 	beq.w	80066f0 <_dtoa_r+0x518>
 8006582:	2200      	movs	r2, #0
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	4b5d      	ldr	r3, [pc, #372]	@ (8006700 <_dtoa_r+0x528>)
 800658a:	f7fa fa17 	bl	80009bc <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	f000 80ae 	beq.w	80066f0 <_dtoa_r+0x518>
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80aa 	beq.w	80066f0 <_dtoa_r+0x518>
 800659c:	9b08      	ldr	r3, [sp, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd37      	ble.n	8006612 <_dtoa_r+0x43a>
 80065a2:	1e7b      	subs	r3, r7, #1
 80065a4:	4620      	mov	r0, r4
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	2200      	movs	r2, #0
 80065aa:	4629      	mov	r1, r5
 80065ac:	4b55      	ldr	r3, [pc, #340]	@ (8006704 <_dtoa_r+0x52c>)
 80065ae:	f7f9 ff93 	bl	80004d8 <__aeabi_dmul>
 80065b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b6:	9c08      	ldr	r4, [sp, #32]
 80065b8:	3601      	adds	r6, #1
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7f9 ff22 	bl	8000404 <__aeabi_i2d>
 80065c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c4:	f7f9 ff88 	bl	80004d8 <__aeabi_dmul>
 80065c8:	2200      	movs	r2, #0
 80065ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006708 <_dtoa_r+0x530>)
 80065cc:	f7f9 fdce 	bl	800016c <__adddf3>
 80065d0:	4605      	mov	r5, r0
 80065d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065d6:	2c00      	cmp	r4, #0
 80065d8:	f040 809a 	bne.w	8006710 <_dtoa_r+0x538>
 80065dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b4a      	ldr	r3, [pc, #296]	@ (800670c <_dtoa_r+0x534>)
 80065e4:	f7f9 fdc0 	bl	8000168 <__aeabi_dsub>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4633      	mov	r3, r6
 80065f4:	f7fa fa00 	bl	80009f8 <__aeabi_dcmpgt>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	f040 828e 	bne.w	8006b1a <_dtoa_r+0x942>
 80065fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006602:	462a      	mov	r2, r5
 8006604:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006608:	f7fa f9d8 	bl	80009bc <__aeabi_dcmplt>
 800660c:	2800      	cmp	r0, #0
 800660e:	f040 8127 	bne.w	8006860 <_dtoa_r+0x688>
 8006612:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800661a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800661c:	2b00      	cmp	r3, #0
 800661e:	f2c0 8163 	blt.w	80068e8 <_dtoa_r+0x710>
 8006622:	2f0e      	cmp	r7, #14
 8006624:	f300 8160 	bgt.w	80068e8 <_dtoa_r+0x710>
 8006628:	4b33      	ldr	r3, [pc, #204]	@ (80066f8 <_dtoa_r+0x520>)
 800662a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800662e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006632:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006636:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006638:	2b00      	cmp	r3, #0
 800663a:	da03      	bge.n	8006644 <_dtoa_r+0x46c>
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f340 8100 	ble.w	8006844 <_dtoa_r+0x66c>
 8006644:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006648:	4656      	mov	r6, sl
 800664a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa f86b 	bl	800072c <__aeabi_ddiv>
 8006656:	f7fa f9ef 	bl	8000a38 <__aeabi_d2iz>
 800665a:	4680      	mov	r8, r0
 800665c:	f7f9 fed2 	bl	8000404 <__aeabi_i2d>
 8006660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006664:	f7f9 ff38 	bl	80004d8 <__aeabi_dmul>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7f9 fd7a 	bl	8000168 <__aeabi_dsub>
 8006674:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006678:	9d07      	ldr	r5, [sp, #28]
 800667a:	f806 4b01 	strb.w	r4, [r6], #1
 800667e:	eba6 040a 	sub.w	r4, r6, sl
 8006682:	42a5      	cmp	r5, r4
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	f040 8116 	bne.w	80068b8 <_dtoa_r+0x6e0>
 800668c:	f7f9 fd6e 	bl	800016c <__adddf3>
 8006690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	f7fa f9ae 	bl	80009f8 <__aeabi_dcmpgt>
 800669c:	2800      	cmp	r0, #0
 800669e:	f040 80f8 	bne.w	8006892 <_dtoa_r+0x6ba>
 80066a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7fa f97d 	bl	80009a8 <__aeabi_dcmpeq>
 80066ae:	b118      	cbz	r0, 80066b8 <_dtoa_r+0x4e0>
 80066b0:	f018 0f01 	tst.w	r8, #1
 80066b4:	f040 80ed 	bne.w	8006892 <_dtoa_r+0x6ba>
 80066b8:	4649      	mov	r1, r9
 80066ba:	4658      	mov	r0, fp
 80066bc:	f000 fc92 	bl	8006fe4 <_Bfree>
 80066c0:	2300      	movs	r3, #0
 80066c2:	7033      	strb	r3, [r6, #0]
 80066c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066c6:	3701      	adds	r7, #1
 80066c8:	601f      	str	r7, [r3, #0]
 80066ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8320 	beq.w	8006d12 <_dtoa_r+0xb3a>
 80066d2:	601e      	str	r6, [r3, #0]
 80066d4:	e31d      	b.n	8006d12 <_dtoa_r+0xb3a>
 80066d6:	07e2      	lsls	r2, r4, #31
 80066d8:	d505      	bpl.n	80066e6 <_dtoa_r+0x50e>
 80066da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066de:	f7f9 fefb 	bl	80004d8 <__aeabi_dmul>
 80066e2:	2301      	movs	r3, #1
 80066e4:	3601      	adds	r6, #1
 80066e6:	1064      	asrs	r4, r4, #1
 80066e8:	3508      	adds	r5, #8
 80066ea:	e73f      	b.n	800656c <_dtoa_r+0x394>
 80066ec:	2602      	movs	r6, #2
 80066ee:	e742      	b.n	8006576 <_dtoa_r+0x39e>
 80066f0:	9c07      	ldr	r4, [sp, #28]
 80066f2:	9704      	str	r7, [sp, #16]
 80066f4:	e761      	b.n	80065ba <_dtoa_r+0x3e2>
 80066f6:	bf00      	nop
 80066f8:	08008328 	.word	0x08008328
 80066fc:	08008300 	.word	0x08008300
 8006700:	3ff00000 	.word	0x3ff00000
 8006704:	40240000 	.word	0x40240000
 8006708:	401c0000 	.word	0x401c0000
 800670c:	40140000 	.word	0x40140000
 8006710:	4b70      	ldr	r3, [pc, #448]	@ (80068d4 <_dtoa_r+0x6fc>)
 8006712:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006718:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800671c:	4454      	add	r4, sl
 800671e:	2900      	cmp	r1, #0
 8006720:	d045      	beq.n	80067ae <_dtoa_r+0x5d6>
 8006722:	2000      	movs	r0, #0
 8006724:	496c      	ldr	r1, [pc, #432]	@ (80068d8 <_dtoa_r+0x700>)
 8006726:	f7fa f801 	bl	800072c <__aeabi_ddiv>
 800672a:	4633      	mov	r3, r6
 800672c:	462a      	mov	r2, r5
 800672e:	f7f9 fd1b 	bl	8000168 <__aeabi_dsub>
 8006732:	4656      	mov	r6, sl
 8006734:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673c:	f7fa f97c 	bl	8000a38 <__aeabi_d2iz>
 8006740:	4605      	mov	r5, r0
 8006742:	f7f9 fe5f 	bl	8000404 <__aeabi_i2d>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674e:	f7f9 fd0b 	bl	8000168 <__aeabi_dsub>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	3530      	adds	r5, #48	@ 0x30
 8006758:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800675c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006760:	f806 5b01 	strb.w	r5, [r6], #1
 8006764:	f7fa f92a 	bl	80009bc <__aeabi_dcmplt>
 8006768:	2800      	cmp	r0, #0
 800676a:	d163      	bne.n	8006834 <_dtoa_r+0x65c>
 800676c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006770:	2000      	movs	r0, #0
 8006772:	495a      	ldr	r1, [pc, #360]	@ (80068dc <_dtoa_r+0x704>)
 8006774:	f7f9 fcf8 	bl	8000168 <__aeabi_dsub>
 8006778:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800677c:	f7fa f91e 	bl	80009bc <__aeabi_dcmplt>
 8006780:	2800      	cmp	r0, #0
 8006782:	f040 8087 	bne.w	8006894 <_dtoa_r+0x6bc>
 8006786:	42a6      	cmp	r6, r4
 8006788:	f43f af43 	beq.w	8006612 <_dtoa_r+0x43a>
 800678c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006790:	2200      	movs	r2, #0
 8006792:	4b53      	ldr	r3, [pc, #332]	@ (80068e0 <_dtoa_r+0x708>)
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800679e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a2:	4b4f      	ldr	r3, [pc, #316]	@ (80068e0 <_dtoa_r+0x708>)
 80067a4:	f7f9 fe98 	bl	80004d8 <__aeabi_dmul>
 80067a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ac:	e7c4      	b.n	8006738 <_dtoa_r+0x560>
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	f7f9 fe91 	bl	80004d8 <__aeabi_dmul>
 80067b6:	4656      	mov	r6, sl
 80067b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c2:	f7fa f939 	bl	8000a38 <__aeabi_d2iz>
 80067c6:	4605      	mov	r5, r0
 80067c8:	f7f9 fe1c 	bl	8000404 <__aeabi_i2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d4:	f7f9 fcc8 	bl	8000168 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	3530      	adds	r5, #48	@ 0x30
 80067de:	f806 5b01 	strb.w	r5, [r6], #1
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	d124      	bne.n	8006838 <_dtoa_r+0x660>
 80067ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067f2:	4b39      	ldr	r3, [pc, #228]	@ (80068d8 <_dtoa_r+0x700>)
 80067f4:	f7f9 fcba 	bl	800016c <__adddf3>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006800:	f7fa f8fa 	bl	80009f8 <__aeabi_dcmpgt>
 8006804:	2800      	cmp	r0, #0
 8006806:	d145      	bne.n	8006894 <_dtoa_r+0x6bc>
 8006808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800680c:	2000      	movs	r0, #0
 800680e:	4932      	ldr	r1, [pc, #200]	@ (80068d8 <_dtoa_r+0x700>)
 8006810:	f7f9 fcaa 	bl	8000168 <__aeabi_dsub>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800681c:	f7fa f8ce 	bl	80009bc <__aeabi_dcmplt>
 8006820:	2800      	cmp	r0, #0
 8006822:	f43f aef6 	beq.w	8006612 <_dtoa_r+0x43a>
 8006826:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006828:	1e73      	subs	r3, r6, #1
 800682a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800682c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006830:	2b30      	cmp	r3, #48	@ 0x30
 8006832:	d0f8      	beq.n	8006826 <_dtoa_r+0x64e>
 8006834:	9f04      	ldr	r7, [sp, #16]
 8006836:	e73f      	b.n	80066b8 <_dtoa_r+0x4e0>
 8006838:	4b29      	ldr	r3, [pc, #164]	@ (80068e0 <_dtoa_r+0x708>)
 800683a:	f7f9 fe4d 	bl	80004d8 <__aeabi_dmul>
 800683e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006842:	e7bc      	b.n	80067be <_dtoa_r+0x5e6>
 8006844:	d10c      	bne.n	8006860 <_dtoa_r+0x688>
 8006846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800684a:	2200      	movs	r2, #0
 800684c:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <_dtoa_r+0x70c>)
 800684e:	f7f9 fe43 	bl	80004d8 <__aeabi_dmul>
 8006852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006856:	f7fa f8c5 	bl	80009e4 <__aeabi_dcmpge>
 800685a:	2800      	cmp	r0, #0
 800685c:	f000 815b 	beq.w	8006b16 <_dtoa_r+0x93e>
 8006860:	2400      	movs	r4, #0
 8006862:	4625      	mov	r5, r4
 8006864:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006866:	4656      	mov	r6, sl
 8006868:	43db      	mvns	r3, r3
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	2700      	movs	r7, #0
 800686e:	4621      	mov	r1, r4
 8006870:	4658      	mov	r0, fp
 8006872:	f000 fbb7 	bl	8006fe4 <_Bfree>
 8006876:	2d00      	cmp	r5, #0
 8006878:	d0dc      	beq.n	8006834 <_dtoa_r+0x65c>
 800687a:	b12f      	cbz	r7, 8006888 <_dtoa_r+0x6b0>
 800687c:	42af      	cmp	r7, r5
 800687e:	d003      	beq.n	8006888 <_dtoa_r+0x6b0>
 8006880:	4639      	mov	r1, r7
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fbae 	bl	8006fe4 <_Bfree>
 8006888:	4629      	mov	r1, r5
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fbaa 	bl	8006fe4 <_Bfree>
 8006890:	e7d0      	b.n	8006834 <_dtoa_r+0x65c>
 8006892:	9704      	str	r7, [sp, #16]
 8006894:	4633      	mov	r3, r6
 8006896:	461e      	mov	r6, r3
 8006898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800689c:	2a39      	cmp	r2, #57	@ 0x39
 800689e:	d107      	bne.n	80068b0 <_dtoa_r+0x6d8>
 80068a0:	459a      	cmp	sl, r3
 80068a2:	d1f8      	bne.n	8006896 <_dtoa_r+0x6be>
 80068a4:	9a04      	ldr	r2, [sp, #16]
 80068a6:	3201      	adds	r2, #1
 80068a8:	9204      	str	r2, [sp, #16]
 80068aa:	2230      	movs	r2, #48	@ 0x30
 80068ac:	f88a 2000 	strb.w	r2, [sl]
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	3201      	adds	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e7bd      	b.n	8006834 <_dtoa_r+0x65c>
 80068b8:	2200      	movs	r2, #0
 80068ba:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <_dtoa_r+0x708>)
 80068bc:	f7f9 fe0c 	bl	80004d8 <__aeabi_dmul>
 80068c0:	2200      	movs	r2, #0
 80068c2:	2300      	movs	r3, #0
 80068c4:	4604      	mov	r4, r0
 80068c6:	460d      	mov	r5, r1
 80068c8:	f7fa f86e 	bl	80009a8 <__aeabi_dcmpeq>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f43f aebc 	beq.w	800664a <_dtoa_r+0x472>
 80068d2:	e6f1      	b.n	80066b8 <_dtoa_r+0x4e0>
 80068d4:	08008328 	.word	0x08008328
 80068d8:	3fe00000 	.word	0x3fe00000
 80068dc:	3ff00000 	.word	0x3ff00000
 80068e0:	40240000 	.word	0x40240000
 80068e4:	40140000 	.word	0x40140000
 80068e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	f000 80db 	beq.w	8006aa6 <_dtoa_r+0x8ce>
 80068f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068f2:	2a01      	cmp	r2, #1
 80068f4:	f300 80bf 	bgt.w	8006a76 <_dtoa_r+0x89e>
 80068f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	f000 80b7 	beq.w	8006a6e <_dtoa_r+0x896>
 8006900:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006904:	4646      	mov	r6, r8
 8006906:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800690a:	2101      	movs	r1, #1
 800690c:	441a      	add	r2, r3
 800690e:	4658      	mov	r0, fp
 8006910:	4498      	add	r8, r3
 8006912:	9209      	str	r2, [sp, #36]	@ 0x24
 8006914:	f000 fc1a 	bl	800714c <__i2b>
 8006918:	4605      	mov	r5, r0
 800691a:	b15e      	cbz	r6, 8006934 <_dtoa_r+0x75c>
 800691c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	dd08      	ble.n	8006934 <_dtoa_r+0x75c>
 8006922:	42b3      	cmp	r3, r6
 8006924:	bfa8      	it	ge
 8006926:	4633      	movge	r3, r6
 8006928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800692a:	eba8 0803 	sub.w	r8, r8, r3
 800692e:	1af6      	subs	r6, r6, r3
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	9309      	str	r3, [sp, #36]	@ 0x24
 8006934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006936:	b1f3      	cbz	r3, 8006976 <_dtoa_r+0x79e>
 8006938:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80b7 	beq.w	8006aae <_dtoa_r+0x8d6>
 8006940:	b18c      	cbz	r4, 8006966 <_dtoa_r+0x78e>
 8006942:	4629      	mov	r1, r5
 8006944:	4622      	mov	r2, r4
 8006946:	4658      	mov	r0, fp
 8006948:	f000 fcbe 	bl	80072c8 <__pow5mult>
 800694c:	464a      	mov	r2, r9
 800694e:	4601      	mov	r1, r0
 8006950:	4605      	mov	r5, r0
 8006952:	4658      	mov	r0, fp
 8006954:	f000 fc10 	bl	8007178 <__multiply>
 8006958:	4649      	mov	r1, r9
 800695a:	9004      	str	r0, [sp, #16]
 800695c:	4658      	mov	r0, fp
 800695e:	f000 fb41 	bl	8006fe4 <_Bfree>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	4699      	mov	r9, r3
 8006966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006968:	1b1a      	subs	r2, r3, r4
 800696a:	d004      	beq.n	8006976 <_dtoa_r+0x79e>
 800696c:	4649      	mov	r1, r9
 800696e:	4658      	mov	r0, fp
 8006970:	f000 fcaa 	bl	80072c8 <__pow5mult>
 8006974:	4681      	mov	r9, r0
 8006976:	2101      	movs	r1, #1
 8006978:	4658      	mov	r0, fp
 800697a:	f000 fbe7 	bl	800714c <__i2b>
 800697e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006980:	4604      	mov	r4, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 81c9 	beq.w	8006d1a <_dtoa_r+0xb42>
 8006988:	461a      	mov	r2, r3
 800698a:	4601      	mov	r1, r0
 800698c:	4658      	mov	r0, fp
 800698e:	f000 fc9b 	bl	80072c8 <__pow5mult>
 8006992:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006994:	4604      	mov	r4, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	f300 808f 	bgt.w	8006aba <_dtoa_r+0x8e2>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 8087 	bne.w	8006ab2 <_dtoa_r+0x8da>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 8083 	bne.w	8006ab6 <_dtoa_r+0x8de>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069b6:	0d1b      	lsrs	r3, r3, #20
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	b12b      	cbz	r3, 80069c8 <_dtoa_r+0x7f0>
 80069bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	3301      	adds	r3, #1
 80069c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c6:	2301      	movs	r3, #1
 80069c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 81aa 	beq.w	8006d26 <_dtoa_r+0xb4e>
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d8:	6918      	ldr	r0, [r3, #16]
 80069da:	f000 fb6b 	bl	80070b4 <__hi0bits>
 80069de:	f1c0 0020 	rsb	r0, r0, #32
 80069e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e4:	4418      	add	r0, r3
 80069e6:	f010 001f 	ands.w	r0, r0, #31
 80069ea:	d071      	beq.n	8006ad0 <_dtoa_r+0x8f8>
 80069ec:	f1c0 0320 	rsb	r3, r0, #32
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	dd65      	ble.n	8006ac0 <_dtoa_r+0x8e8>
 80069f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f6:	f1c0 001c 	rsb	r0, r0, #28
 80069fa:	4403      	add	r3, r0
 80069fc:	4480      	add	r8, r0
 80069fe:	4406      	add	r6, r0
 8006a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a02:	f1b8 0f00 	cmp.w	r8, #0
 8006a06:	dd05      	ble.n	8006a14 <_dtoa_r+0x83c>
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4642      	mov	r2, r8
 8006a0c:	4658      	mov	r0, fp
 8006a0e:	f000 fcb5 	bl	800737c <__lshift>
 8006a12:	4681      	mov	r9, r0
 8006a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dd05      	ble.n	8006a26 <_dtoa_r+0x84e>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f000 fcac 	bl	800737c <__lshift>
 8006a24:	4604      	mov	r4, r0
 8006a26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d053      	beq.n	8006ad4 <_dtoa_r+0x8fc>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4648      	mov	r0, r9
 8006a30:	f000 fd10 	bl	8007454 <__mcmp>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	da4d      	bge.n	8006ad4 <_dtoa_r+0x8fc>
 8006a38:	1e7b      	subs	r3, r7, #1
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	220a      	movs	r2, #10
 8006a40:	2300      	movs	r3, #0
 8006a42:	4658      	mov	r0, fp
 8006a44:	f000 faf0 	bl	8007028 <__multadd>
 8006a48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a4a:	4681      	mov	r9, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 816c 	beq.w	8006d2a <_dtoa_r+0xb52>
 8006a52:	2300      	movs	r3, #0
 8006a54:	4629      	mov	r1, r5
 8006a56:	220a      	movs	r2, #10
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f000 fae5 	bl	8007028 <__multadd>
 8006a5e:	9b08      	ldr	r3, [sp, #32]
 8006a60:	4605      	mov	r5, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dc61      	bgt.n	8006b2a <_dtoa_r+0x952>
 8006a66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	dc3b      	bgt.n	8006ae4 <_dtoa_r+0x90c>
 8006a6c:	e05d      	b.n	8006b2a <_dtoa_r+0x952>
 8006a6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a70:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a74:	e746      	b.n	8006904 <_dtoa_r+0x72c>
 8006a76:	9b07      	ldr	r3, [sp, #28]
 8006a78:	1e5c      	subs	r4, r3, #1
 8006a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	bfbf      	itttt	lt
 8006a80:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a82:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a84:	1ae3      	sublt	r3, r4, r3
 8006a86:	18d2      	addlt	r2, r2, r3
 8006a88:	bfa8      	it	ge
 8006a8a:	1b1c      	subge	r4, r3, r4
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	bfbe      	ittt	lt
 8006a90:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a92:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a94:	2400      	movlt	r4, #0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfb5      	itete	lt
 8006a9a:	eba8 0603 	sublt.w	r6, r8, r3
 8006a9e:	4646      	movge	r6, r8
 8006aa0:	2300      	movlt	r3, #0
 8006aa2:	9b07      	ldrge	r3, [sp, #28]
 8006aa4:	e730      	b.n	8006908 <_dtoa_r+0x730>
 8006aa6:	4646      	mov	r6, r8
 8006aa8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aaa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006aac:	e735      	b.n	800691a <_dtoa_r+0x742>
 8006aae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ab0:	e75c      	b.n	800696c <_dtoa_r+0x794>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e788      	b.n	80069c8 <_dtoa_r+0x7f0>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	e786      	b.n	80069c8 <_dtoa_r+0x7f0>
 8006aba:	2300      	movs	r3, #0
 8006abc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006abe:	e788      	b.n	80069d2 <_dtoa_r+0x7fa>
 8006ac0:	d09f      	beq.n	8006a02 <_dtoa_r+0x82a>
 8006ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac4:	331c      	adds	r3, #28
 8006ac6:	441a      	add	r2, r3
 8006ac8:	4498      	add	r8, r3
 8006aca:	441e      	add	r6, r3
 8006acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ace:	e798      	b.n	8006a02 <_dtoa_r+0x82a>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	e7f6      	b.n	8006ac2 <_dtoa_r+0x8ea>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	9704      	str	r7, [sp, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc20      	bgt.n	8006b1e <_dtoa_r+0x946>
 8006adc:	9308      	str	r3, [sp, #32]
 8006ade:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	dd1e      	ble.n	8006b22 <_dtoa_r+0x94a>
 8006ae4:	9b08      	ldr	r3, [sp, #32]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f47f aebc 	bne.w	8006864 <_dtoa_r+0x68c>
 8006aec:	4621      	mov	r1, r4
 8006aee:	2205      	movs	r2, #5
 8006af0:	4658      	mov	r0, fp
 8006af2:	f000 fa99 	bl	8007028 <__multadd>
 8006af6:	4601      	mov	r1, r0
 8006af8:	4604      	mov	r4, r0
 8006afa:	4648      	mov	r0, r9
 8006afc:	f000 fcaa 	bl	8007454 <__mcmp>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f77f aeaf 	ble.w	8006864 <_dtoa_r+0x68c>
 8006b06:	2331      	movs	r3, #49	@ 0x31
 8006b08:	4656      	mov	r6, sl
 8006b0a:	f806 3b01 	strb.w	r3, [r6], #1
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	3301      	adds	r3, #1
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	e6aa      	b.n	800686c <_dtoa_r+0x694>
 8006b16:	9c07      	ldr	r4, [sp, #28]
 8006b18:	9704      	str	r7, [sp, #16]
 8006b1a:	4625      	mov	r5, r4
 8006b1c:	e7f3      	b.n	8006b06 <_dtoa_r+0x92e>
 8006b1e:	9b07      	ldr	r3, [sp, #28]
 8006b20:	9308      	str	r3, [sp, #32]
 8006b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8104 	beq.w	8006d32 <_dtoa_r+0xb5a>
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	dd05      	ble.n	8006b3a <_dtoa_r+0x962>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4632      	mov	r2, r6
 8006b32:	4658      	mov	r0, fp
 8006b34:	f000 fc22 	bl	800737c <__lshift>
 8006b38:	4605      	mov	r5, r0
 8006b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d05a      	beq.n	8006bf6 <_dtoa_r+0xa1e>
 8006b40:	4658      	mov	r0, fp
 8006b42:	6869      	ldr	r1, [r5, #4]
 8006b44:	f000 fa0e 	bl	8006f64 <_Balloc>
 8006b48:	4606      	mov	r6, r0
 8006b4a:	b928      	cbnz	r0, 8006b58 <_dtoa_r+0x980>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b52:	4b83      	ldr	r3, [pc, #524]	@ (8006d60 <_dtoa_r+0xb88>)
 8006b54:	f7ff bb54 	b.w	8006200 <_dtoa_r+0x28>
 8006b58:	692a      	ldr	r2, [r5, #16]
 8006b5a:	f105 010c 	add.w	r1, r5, #12
 8006b5e:	3202      	adds	r2, #2
 8006b60:	0092      	lsls	r2, r2, #2
 8006b62:	300c      	adds	r0, #12
 8006b64:	f000 ffa8 	bl	8007ab8 <memcpy>
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4658      	mov	r0, fp
 8006b6e:	f000 fc05 	bl	800737c <__lshift>
 8006b72:	462f      	mov	r7, r5
 8006b74:	4605      	mov	r5, r0
 8006b76:	f10a 0301 	add.w	r3, sl, #1
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	4453      	add	r3, sl
 8006b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b8a:	9b07      	ldr	r3, [sp, #28]
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	4648      	mov	r0, r9
 8006b92:	9302      	str	r3, [sp, #8]
 8006b94:	f7ff fa97 	bl	80060c6 <quorem>
 8006b98:	4639      	mov	r1, r7
 8006b9a:	9008      	str	r0, [sp, #32]
 8006b9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ba0:	4648      	mov	r0, r9
 8006ba2:	f000 fc57 	bl	8007454 <__mcmp>
 8006ba6:	462a      	mov	r2, r5
 8006ba8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006baa:	4621      	mov	r1, r4
 8006bac:	4658      	mov	r0, fp
 8006bae:	f000 fc6d 	bl	800748c <__mdiff>
 8006bb2:	68c2      	ldr	r2, [r0, #12]
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	bb02      	cbnz	r2, 8006bfa <_dtoa_r+0xa22>
 8006bb8:	4601      	mov	r1, r0
 8006bba:	4648      	mov	r0, r9
 8006bbc:	f000 fc4a 	bl	8007454 <__mcmp>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4658      	mov	r0, fp
 8006bc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bc8:	f000 fa0c 	bl	8006fe4 <_Bfree>
 8006bcc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bd0:	9e07      	ldr	r6, [sp, #28]
 8006bd2:	ea43 0102 	orr.w	r1, r3, r2
 8006bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd8:	4319      	orrs	r1, r3
 8006bda:	d110      	bne.n	8006bfe <_dtoa_r+0xa26>
 8006bdc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006be0:	d029      	beq.n	8006c36 <_dtoa_r+0xa5e>
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd02      	ble.n	8006bee <_dtoa_r+0xa16>
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	f883 8000 	strb.w	r8, [r3]
 8006bf4:	e63b      	b.n	800686e <_dtoa_r+0x696>
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	e7bb      	b.n	8006b72 <_dtoa_r+0x99a>
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	e7e1      	b.n	8006bc2 <_dtoa_r+0x9ea>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	db04      	blt.n	8006c0e <_dtoa_r+0xa36>
 8006c04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006c06:	430b      	orrs	r3, r1
 8006c08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	d120      	bne.n	8006c50 <_dtoa_r+0xa78>
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	dded      	ble.n	8006bee <_dtoa_r+0xa16>
 8006c12:	4649      	mov	r1, r9
 8006c14:	2201      	movs	r2, #1
 8006c16:	4658      	mov	r0, fp
 8006c18:	f000 fbb0 	bl	800737c <__lshift>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4681      	mov	r9, r0
 8006c20:	f000 fc18 	bl	8007454 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	dc03      	bgt.n	8006c30 <_dtoa_r+0xa58>
 8006c28:	d1e1      	bne.n	8006bee <_dtoa_r+0xa16>
 8006c2a:	f018 0f01 	tst.w	r8, #1
 8006c2e:	d0de      	beq.n	8006bee <_dtoa_r+0xa16>
 8006c30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c34:	d1d8      	bne.n	8006be8 <_dtoa_r+0xa10>
 8006c36:	2339      	movs	r3, #57	@ 0x39
 8006c38:	9a02      	ldr	r2, [sp, #8]
 8006c3a:	7013      	strb	r3, [r2, #0]
 8006c3c:	4633      	mov	r3, r6
 8006c3e:	461e      	mov	r6, r3
 8006c40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	2a39      	cmp	r2, #57	@ 0x39
 8006c48:	d052      	beq.n	8006cf0 <_dtoa_r+0xb18>
 8006c4a:	3201      	adds	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e60e      	b.n	800686e <_dtoa_r+0x696>
 8006c50:	2a00      	cmp	r2, #0
 8006c52:	dd07      	ble.n	8006c64 <_dtoa_r+0xa8c>
 8006c54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c58:	d0ed      	beq.n	8006c36 <_dtoa_r+0xa5e>
 8006c5a:	9a02      	ldr	r2, [sp, #8]
 8006c5c:	f108 0301 	add.w	r3, r8, #1
 8006c60:	7013      	strb	r3, [r2, #0]
 8006c62:	e604      	b.n	800686e <_dtoa_r+0x696>
 8006c64:	9b07      	ldr	r3, [sp, #28]
 8006c66:	9a07      	ldr	r2, [sp, #28]
 8006c68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d028      	beq.n	8006cc4 <_dtoa_r+0xaec>
 8006c72:	4649      	mov	r1, r9
 8006c74:	2300      	movs	r3, #0
 8006c76:	220a      	movs	r2, #10
 8006c78:	4658      	mov	r0, fp
 8006c7a:	f000 f9d5 	bl	8007028 <__multadd>
 8006c7e:	42af      	cmp	r7, r5
 8006c80:	4681      	mov	r9, r0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	f04f 020a 	mov.w	r2, #10
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	4658      	mov	r0, fp
 8006c8e:	d107      	bne.n	8006ca0 <_dtoa_r+0xac8>
 8006c90:	f000 f9ca 	bl	8007028 <__multadd>
 8006c94:	4607      	mov	r7, r0
 8006c96:	4605      	mov	r5, r0
 8006c98:	9b07      	ldr	r3, [sp, #28]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9307      	str	r3, [sp, #28]
 8006c9e:	e774      	b.n	8006b8a <_dtoa_r+0x9b2>
 8006ca0:	f000 f9c2 	bl	8007028 <__multadd>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	220a      	movs	r2, #10
 8006cac:	4658      	mov	r0, fp
 8006cae:	f000 f9bb 	bl	8007028 <__multadd>
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	e7f0      	b.n	8006c98 <_dtoa_r+0xac0>
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	2700      	movs	r7, #0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bfcc      	ite	gt
 8006cbe:	461e      	movgt	r6, r3
 8006cc0:	2601      	movle	r6, #1
 8006cc2:	4456      	add	r6, sl
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4658      	mov	r0, fp
 8006cca:	f000 fb57 	bl	800737c <__lshift>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	f000 fbbf 	bl	8007454 <__mcmp>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	dcb0      	bgt.n	8006c3c <_dtoa_r+0xa64>
 8006cda:	d102      	bne.n	8006ce2 <_dtoa_r+0xb0a>
 8006cdc:	f018 0f01 	tst.w	r8, #1
 8006ce0:	d1ac      	bne.n	8006c3c <_dtoa_r+0xa64>
 8006ce2:	4633      	mov	r3, r6
 8006ce4:	461e      	mov	r6, r3
 8006ce6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cea:	2a30      	cmp	r2, #48	@ 0x30
 8006cec:	d0fa      	beq.n	8006ce4 <_dtoa_r+0xb0c>
 8006cee:	e5be      	b.n	800686e <_dtoa_r+0x696>
 8006cf0:	459a      	cmp	sl, r3
 8006cf2:	d1a4      	bne.n	8006c3e <_dtoa_r+0xa66>
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	2331      	movs	r3, #49	@ 0x31
 8006cfc:	f88a 3000 	strb.w	r3, [sl]
 8006d00:	e5b5      	b.n	800686e <_dtoa_r+0x696>
 8006d02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d64 <_dtoa_r+0xb8c>
 8006d08:	b11b      	cbz	r3, 8006d12 <_dtoa_r+0xb3a>
 8006d0a:	f10a 0308 	add.w	r3, sl, #8
 8006d0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	4650      	mov	r0, sl
 8006d14:	b017      	add	sp, #92	@ 0x5c
 8006d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f77f ae3d 	ble.w	800699c <_dtoa_r+0x7c4>
 8006d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d26:	2001      	movs	r0, #1
 8006d28:	e65b      	b.n	80069e2 <_dtoa_r+0x80a>
 8006d2a:	9b08      	ldr	r3, [sp, #32]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f77f aed6 	ble.w	8006ade <_dtoa_r+0x906>
 8006d32:	4656      	mov	r6, sl
 8006d34:	4621      	mov	r1, r4
 8006d36:	4648      	mov	r0, r9
 8006d38:	f7ff f9c5 	bl	80060c6 <quorem>
 8006d3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	f806 8b01 	strb.w	r8, [r6], #1
 8006d46:	eba6 020a 	sub.w	r2, r6, sl
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	ddb3      	ble.n	8006cb6 <_dtoa_r+0xade>
 8006d4e:	4649      	mov	r1, r9
 8006d50:	2300      	movs	r3, #0
 8006d52:	220a      	movs	r2, #10
 8006d54:	4658      	mov	r0, fp
 8006d56:	f000 f967 	bl	8007028 <__multadd>
 8006d5a:	4681      	mov	r9, r0
 8006d5c:	e7ea      	b.n	8006d34 <_dtoa_r+0xb5c>
 8006d5e:	bf00      	nop
 8006d60:	08008286 	.word	0x08008286
 8006d64:	0800820a 	.word	0x0800820a

08006d68 <_free_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d040      	beq.n	8006df2 <_free_r+0x8a>
 8006d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d74:	1f0c      	subs	r4, r1, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfb8      	it	lt
 8006d7a:	18e4      	addlt	r4, r4, r3
 8006d7c:	f000 f8e6 	bl	8006f4c <__malloc_lock>
 8006d80:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <_free_r+0x8c>)
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	b933      	cbnz	r3, 8006d94 <_free_r+0x2c>
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	6014      	str	r4, [r2, #0]
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d90:	f000 b8e2 	b.w	8006f58 <__malloc_unlock>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d908      	bls.n	8006daa <_free_r+0x42>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	1821      	adds	r1, r4, r0
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	bf01      	itttt	eq
 8006da0:	6819      	ldreq	r1, [r3, #0]
 8006da2:	685b      	ldreq	r3, [r3, #4]
 8006da4:	1809      	addeq	r1, r1, r0
 8006da6:	6021      	streq	r1, [r4, #0]
 8006da8:	e7ed      	b.n	8006d86 <_free_r+0x1e>
 8006daa:	461a      	mov	r2, r3
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	b10b      	cbz	r3, 8006db4 <_free_r+0x4c>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d9fa      	bls.n	8006daa <_free_r+0x42>
 8006db4:	6811      	ldr	r1, [r2, #0]
 8006db6:	1850      	adds	r0, r2, r1
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d10b      	bne.n	8006dd4 <_free_r+0x6c>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	4401      	add	r1, r0
 8006dc0:	1850      	adds	r0, r2, r1
 8006dc2:	4283      	cmp	r3, r0
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	d1e0      	bne.n	8006d8a <_free_r+0x22>
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	4408      	add	r0, r1
 8006dce:	6010      	str	r0, [r2, #0]
 8006dd0:	6053      	str	r3, [r2, #4]
 8006dd2:	e7da      	b.n	8006d8a <_free_r+0x22>
 8006dd4:	d902      	bls.n	8006ddc <_free_r+0x74>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	e7d6      	b.n	8006d8a <_free_r+0x22>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	1821      	adds	r1, r4, r0
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf01      	itttt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	1809      	addeq	r1, r1, r0
 8006dea:	6021      	streq	r1, [r4, #0]
 8006dec:	6063      	str	r3, [r4, #4]
 8006dee:	6054      	str	r4, [r2, #4]
 8006df0:	e7cb      	b.n	8006d8a <_free_r+0x22>
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	2000054c 	.word	0x2000054c

08006df8 <malloc>:
 8006df8:	4b02      	ldr	r3, [pc, #8]	@ (8006e04 <malloc+0xc>)
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	f000 b825 	b.w	8006e4c <_malloc_r>
 8006e02:	bf00      	nop
 8006e04:	20000020 	.word	0x20000020

08006e08 <sbrk_aligned>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8006e48 <sbrk_aligned+0x40>)
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6831      	ldr	r1, [r6, #0]
 8006e10:	4605      	mov	r5, r0
 8006e12:	b911      	cbnz	r1, 8006e1a <sbrk_aligned+0x12>
 8006e14:	f000 fe40 	bl	8007a98 <_sbrk_r>
 8006e18:	6030      	str	r0, [r6, #0]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 fe3b 	bl	8007a98 <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d103      	bne.n	8006e2e <sbrk_aligned+0x26>
 8006e26:	f04f 34ff 	mov.w	r4, #4294967295
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	1cc4      	adds	r4, r0, #3
 8006e30:	f024 0403 	bic.w	r4, r4, #3
 8006e34:	42a0      	cmp	r0, r4
 8006e36:	d0f8      	beq.n	8006e2a <sbrk_aligned+0x22>
 8006e38:	1a21      	subs	r1, r4, r0
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f000 fe2c 	bl	8007a98 <_sbrk_r>
 8006e40:	3001      	adds	r0, #1
 8006e42:	d1f2      	bne.n	8006e2a <sbrk_aligned+0x22>
 8006e44:	e7ef      	b.n	8006e26 <sbrk_aligned+0x1e>
 8006e46:	bf00      	nop
 8006e48:	20000548 	.word	0x20000548

08006e4c <_malloc_r>:
 8006e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e50:	1ccd      	adds	r5, r1, #3
 8006e52:	f025 0503 	bic.w	r5, r5, #3
 8006e56:	3508      	adds	r5, #8
 8006e58:	2d0c      	cmp	r5, #12
 8006e5a:	bf38      	it	cc
 8006e5c:	250c      	movcc	r5, #12
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	4606      	mov	r6, r0
 8006e62:	db01      	blt.n	8006e68 <_malloc_r+0x1c>
 8006e64:	42a9      	cmp	r1, r5
 8006e66:	d904      	bls.n	8006e72 <_malloc_r+0x26>
 8006e68:	230c      	movs	r3, #12
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f48 <_malloc_r+0xfc>
 8006e76:	f000 f869 	bl	8006f4c <__malloc_lock>
 8006e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7e:	461c      	mov	r4, r3
 8006e80:	bb44      	cbnz	r4, 8006ed4 <_malloc_r+0x88>
 8006e82:	4629      	mov	r1, r5
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7ff ffbf 	bl	8006e08 <sbrk_aligned>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	d158      	bne.n	8006f42 <_malloc_r+0xf6>
 8006e90:	f8d8 4000 	ldr.w	r4, [r8]
 8006e94:	4627      	mov	r7, r4
 8006e96:	2f00      	cmp	r7, #0
 8006e98:	d143      	bne.n	8006f22 <_malloc_r+0xd6>
 8006e9a:	2c00      	cmp	r4, #0
 8006e9c:	d04b      	beq.n	8006f36 <_malloc_r+0xea>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	eb04 0903 	add.w	r9, r4, r3
 8006ea8:	f000 fdf6 	bl	8007a98 <_sbrk_r>
 8006eac:	4581      	cmp	r9, r0
 8006eae:	d142      	bne.n	8006f36 <_malloc_r+0xea>
 8006eb0:	6821      	ldr	r1, [r4, #0]
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	1a6d      	subs	r5, r5, r1
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7ff ffa6 	bl	8006e08 <sbrk_aligned>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d03a      	beq.n	8006f36 <_malloc_r+0xea>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	442b      	add	r3, r5
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	bb62      	cbnz	r2, 8006f28 <_malloc_r+0xdc>
 8006ece:	f8c8 7000 	str.w	r7, [r8]
 8006ed2:	e00f      	b.n	8006ef4 <_malloc_r+0xa8>
 8006ed4:	6822      	ldr	r2, [r4, #0]
 8006ed6:	1b52      	subs	r2, r2, r5
 8006ed8:	d420      	bmi.n	8006f1c <_malloc_r+0xd0>
 8006eda:	2a0b      	cmp	r2, #11
 8006edc:	d917      	bls.n	8006f0e <_malloc_r+0xc2>
 8006ede:	1961      	adds	r1, r4, r5
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	6025      	str	r5, [r4, #0]
 8006ee4:	bf18      	it	ne
 8006ee6:	6059      	strne	r1, [r3, #4]
 8006ee8:	6863      	ldr	r3, [r4, #4]
 8006eea:	bf08      	it	eq
 8006eec:	f8c8 1000 	streq.w	r1, [r8]
 8006ef0:	5162      	str	r2, [r4, r5]
 8006ef2:	604b      	str	r3, [r1, #4]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 f82f 	bl	8006f58 <__malloc_unlock>
 8006efa:	f104 000b 	add.w	r0, r4, #11
 8006efe:	1d23      	adds	r3, r4, #4
 8006f00:	f020 0007 	bic.w	r0, r0, #7
 8006f04:	1ac2      	subs	r2, r0, r3
 8006f06:	bf1c      	itt	ne
 8006f08:	1a1b      	subne	r3, r3, r0
 8006f0a:	50a3      	strne	r3, [r4, r2]
 8006f0c:	e7af      	b.n	8006e6e <_malloc_r+0x22>
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	bf0c      	ite	eq
 8006f14:	f8c8 2000 	streq.w	r2, [r8]
 8006f18:	605a      	strne	r2, [r3, #4]
 8006f1a:	e7eb      	b.n	8006ef4 <_malloc_r+0xa8>
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	6864      	ldr	r4, [r4, #4]
 8006f20:	e7ae      	b.n	8006e80 <_malloc_r+0x34>
 8006f22:	463c      	mov	r4, r7
 8006f24:	687f      	ldr	r7, [r7, #4]
 8006f26:	e7b6      	b.n	8006e96 <_malloc_r+0x4a>
 8006f28:	461a      	mov	r2, r3
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	42a3      	cmp	r3, r4
 8006f2e:	d1fb      	bne.n	8006f28 <_malloc_r+0xdc>
 8006f30:	2300      	movs	r3, #0
 8006f32:	6053      	str	r3, [r2, #4]
 8006f34:	e7de      	b.n	8006ef4 <_malloc_r+0xa8>
 8006f36:	230c      	movs	r3, #12
 8006f38:	4630      	mov	r0, r6
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	f000 f80c 	bl	8006f58 <__malloc_unlock>
 8006f40:	e794      	b.n	8006e6c <_malloc_r+0x20>
 8006f42:	6005      	str	r5, [r0, #0]
 8006f44:	e7d6      	b.n	8006ef4 <_malloc_r+0xa8>
 8006f46:	bf00      	nop
 8006f48:	2000054c 	.word	0x2000054c

08006f4c <__malloc_lock>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__malloc_lock+0x8>)
 8006f4e:	f7ff b8aa 	b.w	80060a6 <__retarget_lock_acquire_recursive>
 8006f52:	bf00      	nop
 8006f54:	20000544 	.word	0x20000544

08006f58 <__malloc_unlock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_unlock+0x8>)
 8006f5a:	f7ff b8a5 	b.w	80060a8 <__retarget_lock_release_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20000544 	.word	0x20000544

08006f64 <_Balloc>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	69c6      	ldr	r6, [r0, #28]
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	b976      	cbnz	r6, 8006f8c <_Balloc+0x28>
 8006f6e:	2010      	movs	r0, #16
 8006f70:	f7ff ff42 	bl	8006df8 <malloc>
 8006f74:	4602      	mov	r2, r0
 8006f76:	61e0      	str	r0, [r4, #28]
 8006f78:	b920      	cbnz	r0, 8006f84 <_Balloc+0x20>
 8006f7a:	216b      	movs	r1, #107	@ 0x6b
 8006f7c:	4b17      	ldr	r3, [pc, #92]	@ (8006fdc <_Balloc+0x78>)
 8006f7e:	4818      	ldr	r0, [pc, #96]	@ (8006fe0 <_Balloc+0x7c>)
 8006f80:	f000 fda8 	bl	8007ad4 <__assert_func>
 8006f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f88:	6006      	str	r6, [r0, #0]
 8006f8a:	60c6      	str	r6, [r0, #12]
 8006f8c:	69e6      	ldr	r6, [r4, #28]
 8006f8e:	68f3      	ldr	r3, [r6, #12]
 8006f90:	b183      	cbz	r3, 8006fb4 <_Balloc+0x50>
 8006f92:	69e3      	ldr	r3, [r4, #28]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f9a:	b9b8      	cbnz	r0, 8006fcc <_Balloc+0x68>
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	fa01 f605 	lsl.w	r6, r1, r5
 8006fa2:	1d72      	adds	r2, r6, #5
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	f000 fdb2 	bl	8007b10 <_calloc_r>
 8006fac:	b160      	cbz	r0, 8006fc8 <_Balloc+0x64>
 8006fae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fb2:	e00e      	b.n	8006fd2 <_Balloc+0x6e>
 8006fb4:	2221      	movs	r2, #33	@ 0x21
 8006fb6:	2104      	movs	r1, #4
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fda9 	bl	8007b10 <_calloc_r>
 8006fbe:	69e3      	ldr	r3, [r4, #28]
 8006fc0:	60f0      	str	r0, [r6, #12]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e4      	bne.n	8006f92 <_Balloc+0x2e>
 8006fc8:	2000      	movs	r0, #0
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	6802      	ldr	r2, [r0, #0]
 8006fce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fd8:	e7f7      	b.n	8006fca <_Balloc+0x66>
 8006fda:	bf00      	nop
 8006fdc:	08008217 	.word	0x08008217
 8006fe0:	08008297 	.word	0x08008297

08006fe4 <_Bfree>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	69c6      	ldr	r6, [r0, #28]
 8006fe8:	4605      	mov	r5, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	b976      	cbnz	r6, 800700c <_Bfree+0x28>
 8006fee:	2010      	movs	r0, #16
 8006ff0:	f7ff ff02 	bl	8006df8 <malloc>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	61e8      	str	r0, [r5, #28]
 8006ff8:	b920      	cbnz	r0, 8007004 <_Bfree+0x20>
 8006ffa:	218f      	movs	r1, #143	@ 0x8f
 8006ffc:	4b08      	ldr	r3, [pc, #32]	@ (8007020 <_Bfree+0x3c>)
 8006ffe:	4809      	ldr	r0, [pc, #36]	@ (8007024 <_Bfree+0x40>)
 8007000:	f000 fd68 	bl	8007ad4 <__assert_func>
 8007004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007008:	6006      	str	r6, [r0, #0]
 800700a:	60c6      	str	r6, [r0, #12]
 800700c:	b13c      	cbz	r4, 800701e <_Bfree+0x3a>
 800700e:	69eb      	ldr	r3, [r5, #28]
 8007010:	6862      	ldr	r2, [r4, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007018:	6021      	str	r1, [r4, #0]
 800701a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	08008217 	.word	0x08008217
 8007024:	08008297 	.word	0x08008297

08007028 <__multadd>:
 8007028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702c:	4607      	mov	r7, r0
 800702e:	460c      	mov	r4, r1
 8007030:	461e      	mov	r6, r3
 8007032:	2000      	movs	r0, #0
 8007034:	690d      	ldr	r5, [r1, #16]
 8007036:	f101 0c14 	add.w	ip, r1, #20
 800703a:	f8dc 3000 	ldr.w	r3, [ip]
 800703e:	3001      	adds	r0, #1
 8007040:	b299      	uxth	r1, r3
 8007042:	fb02 6101 	mla	r1, r2, r1, r6
 8007046:	0c1e      	lsrs	r6, r3, #16
 8007048:	0c0b      	lsrs	r3, r1, #16
 800704a:	fb02 3306 	mla	r3, r2, r6, r3
 800704e:	b289      	uxth	r1, r1
 8007050:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007054:	4285      	cmp	r5, r0
 8007056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800705a:	f84c 1b04 	str.w	r1, [ip], #4
 800705e:	dcec      	bgt.n	800703a <__multadd+0x12>
 8007060:	b30e      	cbz	r6, 80070a6 <__multadd+0x7e>
 8007062:	68a3      	ldr	r3, [r4, #8]
 8007064:	42ab      	cmp	r3, r5
 8007066:	dc19      	bgt.n	800709c <__multadd+0x74>
 8007068:	6861      	ldr	r1, [r4, #4]
 800706a:	4638      	mov	r0, r7
 800706c:	3101      	adds	r1, #1
 800706e:	f7ff ff79 	bl	8006f64 <_Balloc>
 8007072:	4680      	mov	r8, r0
 8007074:	b928      	cbnz	r0, 8007082 <__multadd+0x5a>
 8007076:	4602      	mov	r2, r0
 8007078:	21ba      	movs	r1, #186	@ 0xba
 800707a:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <__multadd+0x84>)
 800707c:	480c      	ldr	r0, [pc, #48]	@ (80070b0 <__multadd+0x88>)
 800707e:	f000 fd29 	bl	8007ad4 <__assert_func>
 8007082:	6922      	ldr	r2, [r4, #16]
 8007084:	f104 010c 	add.w	r1, r4, #12
 8007088:	3202      	adds	r2, #2
 800708a:	0092      	lsls	r2, r2, #2
 800708c:	300c      	adds	r0, #12
 800708e:	f000 fd13 	bl	8007ab8 <memcpy>
 8007092:	4621      	mov	r1, r4
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ffa5 	bl	8006fe4 <_Bfree>
 800709a:	4644      	mov	r4, r8
 800709c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070a0:	3501      	adds	r5, #1
 80070a2:	615e      	str	r6, [r3, #20]
 80070a4:	6125      	str	r5, [r4, #16]
 80070a6:	4620      	mov	r0, r4
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ac:	08008286 	.word	0x08008286
 80070b0:	08008297 	.word	0x08008297

080070b4 <__hi0bits>:
 80070b4:	4603      	mov	r3, r0
 80070b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070ba:	bf3a      	itte	cc
 80070bc:	0403      	lslcc	r3, r0, #16
 80070be:	2010      	movcc	r0, #16
 80070c0:	2000      	movcs	r0, #0
 80070c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070c6:	bf3c      	itt	cc
 80070c8:	021b      	lslcc	r3, r3, #8
 80070ca:	3008      	addcc	r0, #8
 80070cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d0:	bf3c      	itt	cc
 80070d2:	011b      	lslcc	r3, r3, #4
 80070d4:	3004      	addcc	r0, #4
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070da:	bf3c      	itt	cc
 80070dc:	009b      	lslcc	r3, r3, #2
 80070de:	3002      	addcc	r0, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db05      	blt.n	80070f0 <__hi0bits+0x3c>
 80070e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070e8:	f100 0001 	add.w	r0, r0, #1
 80070ec:	bf08      	it	eq
 80070ee:	2020      	moveq	r0, #32
 80070f0:	4770      	bx	lr

080070f2 <__lo0bits>:
 80070f2:	6803      	ldr	r3, [r0, #0]
 80070f4:	4602      	mov	r2, r0
 80070f6:	f013 0007 	ands.w	r0, r3, #7
 80070fa:	d00b      	beq.n	8007114 <__lo0bits+0x22>
 80070fc:	07d9      	lsls	r1, r3, #31
 80070fe:	d421      	bmi.n	8007144 <__lo0bits+0x52>
 8007100:	0798      	lsls	r0, r3, #30
 8007102:	bf49      	itett	mi
 8007104:	085b      	lsrmi	r3, r3, #1
 8007106:	089b      	lsrpl	r3, r3, #2
 8007108:	2001      	movmi	r0, #1
 800710a:	6013      	strmi	r3, [r2, #0]
 800710c:	bf5c      	itt	pl
 800710e:	2002      	movpl	r0, #2
 8007110:	6013      	strpl	r3, [r2, #0]
 8007112:	4770      	bx	lr
 8007114:	b299      	uxth	r1, r3
 8007116:	b909      	cbnz	r1, 800711c <__lo0bits+0x2a>
 8007118:	2010      	movs	r0, #16
 800711a:	0c1b      	lsrs	r3, r3, #16
 800711c:	b2d9      	uxtb	r1, r3
 800711e:	b909      	cbnz	r1, 8007124 <__lo0bits+0x32>
 8007120:	3008      	adds	r0, #8
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	0719      	lsls	r1, r3, #28
 8007126:	bf04      	itt	eq
 8007128:	091b      	lsreq	r3, r3, #4
 800712a:	3004      	addeq	r0, #4
 800712c:	0799      	lsls	r1, r3, #30
 800712e:	bf04      	itt	eq
 8007130:	089b      	lsreq	r3, r3, #2
 8007132:	3002      	addeq	r0, #2
 8007134:	07d9      	lsls	r1, r3, #31
 8007136:	d403      	bmi.n	8007140 <__lo0bits+0x4e>
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	f100 0001 	add.w	r0, r0, #1
 800713e:	d003      	beq.n	8007148 <__lo0bits+0x56>
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	4770      	bx	lr
 8007144:	2000      	movs	r0, #0
 8007146:	4770      	bx	lr
 8007148:	2020      	movs	r0, #32
 800714a:	4770      	bx	lr

0800714c <__i2b>:
 800714c:	b510      	push	{r4, lr}
 800714e:	460c      	mov	r4, r1
 8007150:	2101      	movs	r1, #1
 8007152:	f7ff ff07 	bl	8006f64 <_Balloc>
 8007156:	4602      	mov	r2, r0
 8007158:	b928      	cbnz	r0, 8007166 <__i2b+0x1a>
 800715a:	f240 1145 	movw	r1, #325	@ 0x145
 800715e:	4b04      	ldr	r3, [pc, #16]	@ (8007170 <__i2b+0x24>)
 8007160:	4804      	ldr	r0, [pc, #16]	@ (8007174 <__i2b+0x28>)
 8007162:	f000 fcb7 	bl	8007ad4 <__assert_func>
 8007166:	2301      	movs	r3, #1
 8007168:	6144      	str	r4, [r0, #20]
 800716a:	6103      	str	r3, [r0, #16]
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop
 8007170:	08008286 	.word	0x08008286
 8007174:	08008297 	.word	0x08008297

08007178 <__multiply>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	4614      	mov	r4, r2
 800717e:	690a      	ldr	r2, [r1, #16]
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	460f      	mov	r7, r1
 8007184:	429a      	cmp	r2, r3
 8007186:	bfa2      	ittt	ge
 8007188:	4623      	movge	r3, r4
 800718a:	460c      	movge	r4, r1
 800718c:	461f      	movge	r7, r3
 800718e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007192:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007196:	68a3      	ldr	r3, [r4, #8]
 8007198:	6861      	ldr	r1, [r4, #4]
 800719a:	eb0a 0609 	add.w	r6, sl, r9
 800719e:	42b3      	cmp	r3, r6
 80071a0:	b085      	sub	sp, #20
 80071a2:	bfb8      	it	lt
 80071a4:	3101      	addlt	r1, #1
 80071a6:	f7ff fedd 	bl	8006f64 <_Balloc>
 80071aa:	b930      	cbnz	r0, 80071ba <__multiply+0x42>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071b2:	4b43      	ldr	r3, [pc, #268]	@ (80072c0 <__multiply+0x148>)
 80071b4:	4843      	ldr	r0, [pc, #268]	@ (80072c4 <__multiply+0x14c>)
 80071b6:	f000 fc8d 	bl	8007ad4 <__assert_func>
 80071ba:	f100 0514 	add.w	r5, r0, #20
 80071be:	462b      	mov	r3, r5
 80071c0:	2200      	movs	r2, #0
 80071c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071c6:	4543      	cmp	r3, r8
 80071c8:	d321      	bcc.n	800720e <__multiply+0x96>
 80071ca:	f107 0114 	add.w	r1, r7, #20
 80071ce:	f104 0214 	add.w	r2, r4, #20
 80071d2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071d6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	1b13      	subs	r3, r2, r4
 80071de:	3b15      	subs	r3, #21
 80071e0:	f023 0303 	bic.w	r3, r3, #3
 80071e4:	3304      	adds	r3, #4
 80071e6:	f104 0715 	add.w	r7, r4, #21
 80071ea:	42ba      	cmp	r2, r7
 80071ec:	bf38      	it	cc
 80071ee:	2304      	movcc	r3, #4
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	9103      	str	r1, [sp, #12]
 80071f6:	428b      	cmp	r3, r1
 80071f8:	d80c      	bhi.n	8007214 <__multiply+0x9c>
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	dd03      	ble.n	8007206 <__multiply+0x8e>
 80071fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007202:	2b00      	cmp	r3, #0
 8007204:	d05a      	beq.n	80072bc <__multiply+0x144>
 8007206:	6106      	str	r6, [r0, #16]
 8007208:	b005      	add	sp, #20
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	f843 2b04 	str.w	r2, [r3], #4
 8007212:	e7d8      	b.n	80071c6 <__multiply+0x4e>
 8007214:	f8b1 a000 	ldrh.w	sl, [r1]
 8007218:	f1ba 0f00 	cmp.w	sl, #0
 800721c:	d023      	beq.n	8007266 <__multiply+0xee>
 800721e:	46a9      	mov	r9, r5
 8007220:	f04f 0c00 	mov.w	ip, #0
 8007224:	f104 0e14 	add.w	lr, r4, #20
 8007228:	f85e 7b04 	ldr.w	r7, [lr], #4
 800722c:	f8d9 3000 	ldr.w	r3, [r9]
 8007230:	fa1f fb87 	uxth.w	fp, r7
 8007234:	b29b      	uxth	r3, r3
 8007236:	fb0a 330b 	mla	r3, sl, fp, r3
 800723a:	4463      	add	r3, ip
 800723c:	f8d9 c000 	ldr.w	ip, [r9]
 8007240:	0c3f      	lsrs	r7, r7, #16
 8007242:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007246:	fb0a c707 	mla	r7, sl, r7, ip
 800724a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800724e:	b29b      	uxth	r3, r3
 8007250:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007254:	4572      	cmp	r2, lr
 8007256:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800725a:	f849 3b04 	str.w	r3, [r9], #4
 800725e:	d8e3      	bhi.n	8007228 <__multiply+0xb0>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	f845 c003 	str.w	ip, [r5, r3]
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	3104      	adds	r1, #4
 800726a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800726e:	f1b9 0f00 	cmp.w	r9, #0
 8007272:	d021      	beq.n	80072b8 <__multiply+0x140>
 8007274:	46ae      	mov	lr, r5
 8007276:	f04f 0a00 	mov.w	sl, #0
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	f104 0c14 	add.w	ip, r4, #20
 8007280:	f8bc b000 	ldrh.w	fp, [ip]
 8007284:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007288:	b29b      	uxth	r3, r3
 800728a:	fb09 770b 	mla	r7, r9, fp, r7
 800728e:	4457      	add	r7, sl
 8007290:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007294:	f84e 3b04 	str.w	r3, [lr], #4
 8007298:	f85c 3b04 	ldr.w	r3, [ip], #4
 800729c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a0:	f8be 3000 	ldrh.w	r3, [lr]
 80072a4:	4562      	cmp	r2, ip
 80072a6:	fb09 330a 	mla	r3, r9, sl, r3
 80072aa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072b2:	d8e5      	bhi.n	8007280 <__multiply+0x108>
 80072b4:	9f01      	ldr	r7, [sp, #4]
 80072b6:	51eb      	str	r3, [r5, r7]
 80072b8:	3504      	adds	r5, #4
 80072ba:	e79a      	b.n	80071f2 <__multiply+0x7a>
 80072bc:	3e01      	subs	r6, #1
 80072be:	e79c      	b.n	80071fa <__multiply+0x82>
 80072c0:	08008286 	.word	0x08008286
 80072c4:	08008297 	.word	0x08008297

080072c8 <__pow5mult>:
 80072c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072cc:	4615      	mov	r5, r2
 80072ce:	f012 0203 	ands.w	r2, r2, #3
 80072d2:	4607      	mov	r7, r0
 80072d4:	460e      	mov	r6, r1
 80072d6:	d007      	beq.n	80072e8 <__pow5mult+0x20>
 80072d8:	4c25      	ldr	r4, [pc, #148]	@ (8007370 <__pow5mult+0xa8>)
 80072da:	3a01      	subs	r2, #1
 80072dc:	2300      	movs	r3, #0
 80072de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072e2:	f7ff fea1 	bl	8007028 <__multadd>
 80072e6:	4606      	mov	r6, r0
 80072e8:	10ad      	asrs	r5, r5, #2
 80072ea:	d03d      	beq.n	8007368 <__pow5mult+0xa0>
 80072ec:	69fc      	ldr	r4, [r7, #28]
 80072ee:	b97c      	cbnz	r4, 8007310 <__pow5mult+0x48>
 80072f0:	2010      	movs	r0, #16
 80072f2:	f7ff fd81 	bl	8006df8 <malloc>
 80072f6:	4602      	mov	r2, r0
 80072f8:	61f8      	str	r0, [r7, #28]
 80072fa:	b928      	cbnz	r0, 8007308 <__pow5mult+0x40>
 80072fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007300:	4b1c      	ldr	r3, [pc, #112]	@ (8007374 <__pow5mult+0xac>)
 8007302:	481d      	ldr	r0, [pc, #116]	@ (8007378 <__pow5mult+0xb0>)
 8007304:	f000 fbe6 	bl	8007ad4 <__assert_func>
 8007308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800730c:	6004      	str	r4, [r0, #0]
 800730e:	60c4      	str	r4, [r0, #12]
 8007310:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007318:	b94c      	cbnz	r4, 800732e <__pow5mult+0x66>
 800731a:	f240 2171 	movw	r1, #625	@ 0x271
 800731e:	4638      	mov	r0, r7
 8007320:	f7ff ff14 	bl	800714c <__i2b>
 8007324:	2300      	movs	r3, #0
 8007326:	4604      	mov	r4, r0
 8007328:	f8c8 0008 	str.w	r0, [r8, #8]
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	f04f 0900 	mov.w	r9, #0
 8007332:	07eb      	lsls	r3, r5, #31
 8007334:	d50a      	bpl.n	800734c <__pow5mult+0x84>
 8007336:	4631      	mov	r1, r6
 8007338:	4622      	mov	r2, r4
 800733a:	4638      	mov	r0, r7
 800733c:	f7ff ff1c 	bl	8007178 <__multiply>
 8007340:	4680      	mov	r8, r0
 8007342:	4631      	mov	r1, r6
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff fe4d 	bl	8006fe4 <_Bfree>
 800734a:	4646      	mov	r6, r8
 800734c:	106d      	asrs	r5, r5, #1
 800734e:	d00b      	beq.n	8007368 <__pow5mult+0xa0>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	b938      	cbnz	r0, 8007364 <__pow5mult+0x9c>
 8007354:	4622      	mov	r2, r4
 8007356:	4621      	mov	r1, r4
 8007358:	4638      	mov	r0, r7
 800735a:	f7ff ff0d 	bl	8007178 <__multiply>
 800735e:	6020      	str	r0, [r4, #0]
 8007360:	f8c0 9000 	str.w	r9, [r0]
 8007364:	4604      	mov	r4, r0
 8007366:	e7e4      	b.n	8007332 <__pow5mult+0x6a>
 8007368:	4630      	mov	r0, r6
 800736a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736e:	bf00      	nop
 8007370:	080082f0 	.word	0x080082f0
 8007374:	08008217 	.word	0x08008217
 8007378:	08008297 	.word	0x08008297

0800737c <__lshift>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	460c      	mov	r4, r1
 8007382:	4607      	mov	r7, r0
 8007384:	4691      	mov	r9, r2
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	6849      	ldr	r1, [r1, #4]
 800738a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007394:	f108 0601 	add.w	r6, r8, #1
 8007398:	42b3      	cmp	r3, r6
 800739a:	db0b      	blt.n	80073b4 <__lshift+0x38>
 800739c:	4638      	mov	r0, r7
 800739e:	f7ff fde1 	bl	8006f64 <_Balloc>
 80073a2:	4605      	mov	r5, r0
 80073a4:	b948      	cbnz	r0, 80073ba <__lshift+0x3e>
 80073a6:	4602      	mov	r2, r0
 80073a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073ac:	4b27      	ldr	r3, [pc, #156]	@ (800744c <__lshift+0xd0>)
 80073ae:	4828      	ldr	r0, [pc, #160]	@ (8007450 <__lshift+0xd4>)
 80073b0:	f000 fb90 	bl	8007ad4 <__assert_func>
 80073b4:	3101      	adds	r1, #1
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	e7ee      	b.n	8007398 <__lshift+0x1c>
 80073ba:	2300      	movs	r3, #0
 80073bc:	f100 0114 	add.w	r1, r0, #20
 80073c0:	f100 0210 	add.w	r2, r0, #16
 80073c4:	4618      	mov	r0, r3
 80073c6:	4553      	cmp	r3, sl
 80073c8:	db33      	blt.n	8007432 <__lshift+0xb6>
 80073ca:	6920      	ldr	r0, [r4, #16]
 80073cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073d0:	f104 0314 	add.w	r3, r4, #20
 80073d4:	f019 091f 	ands.w	r9, r9, #31
 80073d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073e0:	d02b      	beq.n	800743a <__lshift+0xbe>
 80073e2:	468a      	mov	sl, r1
 80073e4:	2200      	movs	r2, #0
 80073e6:	f1c9 0e20 	rsb	lr, r9, #32
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	fa00 f009 	lsl.w	r0, r0, r9
 80073f0:	4310      	orrs	r0, r2
 80073f2:	f84a 0b04 	str.w	r0, [sl], #4
 80073f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fa:	459c      	cmp	ip, r3
 80073fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007400:	d8f3      	bhi.n	80073ea <__lshift+0x6e>
 8007402:	ebac 0304 	sub.w	r3, ip, r4
 8007406:	3b15      	subs	r3, #21
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	3304      	adds	r3, #4
 800740e:	f104 0015 	add.w	r0, r4, #21
 8007412:	4584      	cmp	ip, r0
 8007414:	bf38      	it	cc
 8007416:	2304      	movcc	r3, #4
 8007418:	50ca      	str	r2, [r1, r3]
 800741a:	b10a      	cbz	r2, 8007420 <__lshift+0xa4>
 800741c:	f108 0602 	add.w	r6, r8, #2
 8007420:	3e01      	subs	r6, #1
 8007422:	4638      	mov	r0, r7
 8007424:	4621      	mov	r1, r4
 8007426:	612e      	str	r6, [r5, #16]
 8007428:	f7ff fddc 	bl	8006fe4 <_Bfree>
 800742c:	4628      	mov	r0, r5
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	f842 0f04 	str.w	r0, [r2, #4]!
 8007436:	3301      	adds	r3, #1
 8007438:	e7c5      	b.n	80073c6 <__lshift+0x4a>
 800743a:	3904      	subs	r1, #4
 800743c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007440:	459c      	cmp	ip, r3
 8007442:	f841 2f04 	str.w	r2, [r1, #4]!
 8007446:	d8f9      	bhi.n	800743c <__lshift+0xc0>
 8007448:	e7ea      	b.n	8007420 <__lshift+0xa4>
 800744a:	bf00      	nop
 800744c:	08008286 	.word	0x08008286
 8007450:	08008297 	.word	0x08008297

08007454 <__mcmp>:
 8007454:	4603      	mov	r3, r0
 8007456:	690a      	ldr	r2, [r1, #16]
 8007458:	6900      	ldr	r0, [r0, #16]
 800745a:	b530      	push	{r4, r5, lr}
 800745c:	1a80      	subs	r0, r0, r2
 800745e:	d10e      	bne.n	800747e <__mcmp+0x2a>
 8007460:	3314      	adds	r3, #20
 8007462:	3114      	adds	r1, #20
 8007464:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800746c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007474:	4295      	cmp	r5, r2
 8007476:	d003      	beq.n	8007480 <__mcmp+0x2c>
 8007478:	d205      	bcs.n	8007486 <__mcmp+0x32>
 800747a:	f04f 30ff 	mov.w	r0, #4294967295
 800747e:	bd30      	pop	{r4, r5, pc}
 8007480:	42a3      	cmp	r3, r4
 8007482:	d3f3      	bcc.n	800746c <__mcmp+0x18>
 8007484:	e7fb      	b.n	800747e <__mcmp+0x2a>
 8007486:	2001      	movs	r0, #1
 8007488:	e7f9      	b.n	800747e <__mcmp+0x2a>
	...

0800748c <__mdiff>:
 800748c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4689      	mov	r9, r1
 8007492:	4606      	mov	r6, r0
 8007494:	4611      	mov	r1, r2
 8007496:	4648      	mov	r0, r9
 8007498:	4614      	mov	r4, r2
 800749a:	f7ff ffdb 	bl	8007454 <__mcmp>
 800749e:	1e05      	subs	r5, r0, #0
 80074a0:	d112      	bne.n	80074c8 <__mdiff+0x3c>
 80074a2:	4629      	mov	r1, r5
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fd5d 	bl	8006f64 <_Balloc>
 80074aa:	4602      	mov	r2, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__mdiff+0x2e>
 80074ae:	f240 2137 	movw	r1, #567	@ 0x237
 80074b2:	4b3e      	ldr	r3, [pc, #248]	@ (80075ac <__mdiff+0x120>)
 80074b4:	483e      	ldr	r0, [pc, #248]	@ (80075b0 <__mdiff+0x124>)
 80074b6:	f000 fb0d 	bl	8007ad4 <__assert_func>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074c0:	4610      	mov	r0, r2
 80074c2:	b003      	add	sp, #12
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c8:	bfbc      	itt	lt
 80074ca:	464b      	movlt	r3, r9
 80074cc:	46a1      	movlt	r9, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074d4:	bfba      	itte	lt
 80074d6:	461c      	movlt	r4, r3
 80074d8:	2501      	movlt	r5, #1
 80074da:	2500      	movge	r5, #0
 80074dc:	f7ff fd42 	bl	8006f64 <_Balloc>
 80074e0:	4602      	mov	r2, r0
 80074e2:	b918      	cbnz	r0, 80074ec <__mdiff+0x60>
 80074e4:	f240 2145 	movw	r1, #581	@ 0x245
 80074e8:	4b30      	ldr	r3, [pc, #192]	@ (80075ac <__mdiff+0x120>)
 80074ea:	e7e3      	b.n	80074b4 <__mdiff+0x28>
 80074ec:	f100 0b14 	add.w	fp, r0, #20
 80074f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074f4:	f109 0310 	add.w	r3, r9, #16
 80074f8:	60c5      	str	r5, [r0, #12]
 80074fa:	f04f 0c00 	mov.w	ip, #0
 80074fe:	f109 0514 	add.w	r5, r9, #20
 8007502:	46d9      	mov	r9, fp
 8007504:	6926      	ldr	r6, [r4, #16]
 8007506:	f104 0e14 	add.w	lr, r4, #20
 800750a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800750e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	9b01      	ldr	r3, [sp, #4]
 8007516:	f85e 0b04 	ldr.w	r0, [lr], #4
 800751a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800751e:	b281      	uxth	r1, r0
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	fa1f f38a 	uxth.w	r3, sl
 8007526:	1a5b      	subs	r3, r3, r1
 8007528:	0c00      	lsrs	r0, r0, #16
 800752a:	4463      	add	r3, ip
 800752c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007530:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800753a:	4576      	cmp	r6, lr
 800753c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007540:	f849 3b04 	str.w	r3, [r9], #4
 8007544:	d8e6      	bhi.n	8007514 <__mdiff+0x88>
 8007546:	1b33      	subs	r3, r6, r4
 8007548:	3b15      	subs	r3, #21
 800754a:	f023 0303 	bic.w	r3, r3, #3
 800754e:	3415      	adds	r4, #21
 8007550:	3304      	adds	r3, #4
 8007552:	42a6      	cmp	r6, r4
 8007554:	bf38      	it	cc
 8007556:	2304      	movcc	r3, #4
 8007558:	441d      	add	r5, r3
 800755a:	445b      	add	r3, fp
 800755c:	461e      	mov	r6, r3
 800755e:	462c      	mov	r4, r5
 8007560:	4544      	cmp	r4, r8
 8007562:	d30e      	bcc.n	8007582 <__mdiff+0xf6>
 8007564:	f108 0103 	add.w	r1, r8, #3
 8007568:	1b49      	subs	r1, r1, r5
 800756a:	f021 0103 	bic.w	r1, r1, #3
 800756e:	3d03      	subs	r5, #3
 8007570:	45a8      	cmp	r8, r5
 8007572:	bf38      	it	cc
 8007574:	2100      	movcc	r1, #0
 8007576:	440b      	add	r3, r1
 8007578:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800757c:	b199      	cbz	r1, 80075a6 <__mdiff+0x11a>
 800757e:	6117      	str	r7, [r2, #16]
 8007580:	e79e      	b.n	80074c0 <__mdiff+0x34>
 8007582:	46e6      	mov	lr, ip
 8007584:	f854 1b04 	ldr.w	r1, [r4], #4
 8007588:	fa1f fc81 	uxth.w	ip, r1
 800758c:	44f4      	add	ip, lr
 800758e:	0c08      	lsrs	r0, r1, #16
 8007590:	4471      	add	r1, lr
 8007592:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007596:	b289      	uxth	r1, r1
 8007598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800759c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075a0:	f846 1b04 	str.w	r1, [r6], #4
 80075a4:	e7dc      	b.n	8007560 <__mdiff+0xd4>
 80075a6:	3f01      	subs	r7, #1
 80075a8:	e7e6      	b.n	8007578 <__mdiff+0xec>
 80075aa:	bf00      	nop
 80075ac:	08008286 	.word	0x08008286
 80075b0:	08008297 	.word	0x08008297

080075b4 <__d2b>:
 80075b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075b8:	2101      	movs	r1, #1
 80075ba:	4690      	mov	r8, r2
 80075bc:	4699      	mov	r9, r3
 80075be:	9e08      	ldr	r6, [sp, #32]
 80075c0:	f7ff fcd0 	bl	8006f64 <_Balloc>
 80075c4:	4604      	mov	r4, r0
 80075c6:	b930      	cbnz	r0, 80075d6 <__d2b+0x22>
 80075c8:	4602      	mov	r2, r0
 80075ca:	f240 310f 	movw	r1, #783	@ 0x30f
 80075ce:	4b23      	ldr	r3, [pc, #140]	@ (800765c <__d2b+0xa8>)
 80075d0:	4823      	ldr	r0, [pc, #140]	@ (8007660 <__d2b+0xac>)
 80075d2:	f000 fa7f 	bl	8007ad4 <__assert_func>
 80075d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075de:	b10d      	cbz	r5, 80075e4 <__d2b+0x30>
 80075e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	f1b8 0300 	subs.w	r3, r8, #0
 80075ea:	d024      	beq.n	8007636 <__d2b+0x82>
 80075ec:	4668      	mov	r0, sp
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	f7ff fd7f 	bl	80070f2 <__lo0bits>
 80075f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075f8:	b1d8      	cbz	r0, 8007632 <__d2b+0x7e>
 80075fa:	f1c0 0320 	rsb	r3, r0, #32
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	430b      	orrs	r3, r1
 8007604:	40c2      	lsrs	r2, r0
 8007606:	6163      	str	r3, [r4, #20]
 8007608:	9201      	str	r2, [sp, #4]
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf0c      	ite	eq
 8007610:	2201      	moveq	r2, #1
 8007612:	2202      	movne	r2, #2
 8007614:	61a3      	str	r3, [r4, #24]
 8007616:	6122      	str	r2, [r4, #16]
 8007618:	b1ad      	cbz	r5, 8007646 <__d2b+0x92>
 800761a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800761e:	4405      	add	r5, r0
 8007620:	6035      	str	r5, [r6, #0]
 8007622:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	6018      	str	r0, [r3, #0]
 800762a:	4620      	mov	r0, r4
 800762c:	b002      	add	sp, #8
 800762e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007632:	6161      	str	r1, [r4, #20]
 8007634:	e7e9      	b.n	800760a <__d2b+0x56>
 8007636:	a801      	add	r0, sp, #4
 8007638:	f7ff fd5b 	bl	80070f2 <__lo0bits>
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	6163      	str	r3, [r4, #20]
 8007642:	3020      	adds	r0, #32
 8007644:	e7e7      	b.n	8007616 <__d2b+0x62>
 8007646:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800764a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800764e:	6030      	str	r0, [r6, #0]
 8007650:	6918      	ldr	r0, [r3, #16]
 8007652:	f7ff fd2f 	bl	80070b4 <__hi0bits>
 8007656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800765a:	e7e4      	b.n	8007626 <__d2b+0x72>
 800765c:	08008286 	.word	0x08008286
 8007660:	08008297 	.word	0x08008297

08007664 <__ssputs_r>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	461f      	mov	r7, r3
 800766a:	688e      	ldr	r6, [r1, #8]
 800766c:	4682      	mov	sl, r0
 800766e:	42be      	cmp	r6, r7
 8007670:	460c      	mov	r4, r1
 8007672:	4690      	mov	r8, r2
 8007674:	680b      	ldr	r3, [r1, #0]
 8007676:	d82d      	bhi.n	80076d4 <__ssputs_r+0x70>
 8007678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800767c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007680:	d026      	beq.n	80076d0 <__ssputs_r+0x6c>
 8007682:	6965      	ldr	r5, [r4, #20]
 8007684:	6909      	ldr	r1, [r1, #16]
 8007686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800768a:	eba3 0901 	sub.w	r9, r3, r1
 800768e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007692:	1c7b      	adds	r3, r7, #1
 8007694:	444b      	add	r3, r9
 8007696:	106d      	asrs	r5, r5, #1
 8007698:	429d      	cmp	r5, r3
 800769a:	bf38      	it	cc
 800769c:	461d      	movcc	r5, r3
 800769e:	0553      	lsls	r3, r2, #21
 80076a0:	d527      	bpl.n	80076f2 <__ssputs_r+0x8e>
 80076a2:	4629      	mov	r1, r5
 80076a4:	f7ff fbd2 	bl	8006e4c <_malloc_r>
 80076a8:	4606      	mov	r6, r0
 80076aa:	b360      	cbz	r0, 8007706 <__ssputs_r+0xa2>
 80076ac:	464a      	mov	r2, r9
 80076ae:	6921      	ldr	r1, [r4, #16]
 80076b0:	f000 fa02 	bl	8007ab8 <memcpy>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	6126      	str	r6, [r4, #16]
 80076c2:	444e      	add	r6, r9
 80076c4:	6026      	str	r6, [r4, #0]
 80076c6:	463e      	mov	r6, r7
 80076c8:	6165      	str	r5, [r4, #20]
 80076ca:	eba5 0509 	sub.w	r5, r5, r9
 80076ce:	60a5      	str	r5, [r4, #8]
 80076d0:	42be      	cmp	r6, r7
 80076d2:	d900      	bls.n	80076d6 <__ssputs_r+0x72>
 80076d4:	463e      	mov	r6, r7
 80076d6:	4632      	mov	r2, r6
 80076d8:	4641      	mov	r1, r8
 80076da:	6820      	ldr	r0, [r4, #0]
 80076dc:	f000 f9c2 	bl	8007a64 <memmove>
 80076e0:	2000      	movs	r0, #0
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	1b9b      	subs	r3, r3, r6
 80076e6:	60a3      	str	r3, [r4, #8]
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	4433      	add	r3, r6
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	462a      	mov	r2, r5
 80076f4:	f000 fa32 	bl	8007b5c <_realloc_r>
 80076f8:	4606      	mov	r6, r0
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d1e0      	bne.n	80076c0 <__ssputs_r+0x5c>
 80076fe:	4650      	mov	r0, sl
 8007700:	6921      	ldr	r1, [r4, #16]
 8007702:	f7ff fb31 	bl	8006d68 <_free_r>
 8007706:	230c      	movs	r3, #12
 8007708:	f8ca 3000 	str.w	r3, [sl]
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f04f 30ff 	mov.w	r0, #4294967295
 8007712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	e7e9      	b.n	80076ee <__ssputs_r+0x8a>
	...

0800771c <_svfiprintf_r>:
 800771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007720:	4698      	mov	r8, r3
 8007722:	898b      	ldrh	r3, [r1, #12]
 8007724:	4607      	mov	r7, r0
 8007726:	061b      	lsls	r3, r3, #24
 8007728:	460d      	mov	r5, r1
 800772a:	4614      	mov	r4, r2
 800772c:	b09d      	sub	sp, #116	@ 0x74
 800772e:	d510      	bpl.n	8007752 <_svfiprintf_r+0x36>
 8007730:	690b      	ldr	r3, [r1, #16]
 8007732:	b973      	cbnz	r3, 8007752 <_svfiprintf_r+0x36>
 8007734:	2140      	movs	r1, #64	@ 0x40
 8007736:	f7ff fb89 	bl	8006e4c <_malloc_r>
 800773a:	6028      	str	r0, [r5, #0]
 800773c:	6128      	str	r0, [r5, #16]
 800773e:	b930      	cbnz	r0, 800774e <_svfiprintf_r+0x32>
 8007740:	230c      	movs	r3, #12
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	f04f 30ff 	mov.w	r0, #4294967295
 8007748:	b01d      	add	sp, #116	@ 0x74
 800774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774e:	2340      	movs	r3, #64	@ 0x40
 8007750:	616b      	str	r3, [r5, #20]
 8007752:	2300      	movs	r3, #0
 8007754:	9309      	str	r3, [sp, #36]	@ 0x24
 8007756:	2320      	movs	r3, #32
 8007758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800775c:	2330      	movs	r3, #48	@ 0x30
 800775e:	f04f 0901 	mov.w	r9, #1
 8007762:	f8cd 800c 	str.w	r8, [sp, #12]
 8007766:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007900 <_svfiprintf_r+0x1e4>
 800776a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800776e:	4623      	mov	r3, r4
 8007770:	469a      	mov	sl, r3
 8007772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007776:	b10a      	cbz	r2, 800777c <_svfiprintf_r+0x60>
 8007778:	2a25      	cmp	r2, #37	@ 0x25
 800777a:	d1f9      	bne.n	8007770 <_svfiprintf_r+0x54>
 800777c:	ebba 0b04 	subs.w	fp, sl, r4
 8007780:	d00b      	beq.n	800779a <_svfiprintf_r+0x7e>
 8007782:	465b      	mov	r3, fp
 8007784:	4622      	mov	r2, r4
 8007786:	4629      	mov	r1, r5
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ff6b 	bl	8007664 <__ssputs_r>
 800778e:	3001      	adds	r0, #1
 8007790:	f000 80a7 	beq.w	80078e2 <_svfiprintf_r+0x1c6>
 8007794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007796:	445a      	add	r2, fp
 8007798:	9209      	str	r2, [sp, #36]	@ 0x24
 800779a:	f89a 3000 	ldrb.w	r3, [sl]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 809f 	beq.w	80078e2 <_svfiprintf_r+0x1c6>
 80077a4:	2300      	movs	r3, #0
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295
 80077aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ae:	f10a 0a01 	add.w	sl, sl, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9307      	str	r3, [sp, #28]
 80077b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80077bc:	4654      	mov	r4, sl
 80077be:	2205      	movs	r2, #5
 80077c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c4:	484e      	ldr	r0, [pc, #312]	@ (8007900 <_svfiprintf_r+0x1e4>)
 80077c6:	f7fe fc70 	bl	80060aa <memchr>
 80077ca:	9a04      	ldr	r2, [sp, #16]
 80077cc:	b9d8      	cbnz	r0, 8007806 <_svfiprintf_r+0xea>
 80077ce:	06d0      	lsls	r0, r2, #27
 80077d0:	bf44      	itt	mi
 80077d2:	2320      	movmi	r3, #32
 80077d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d8:	0711      	lsls	r1, r2, #28
 80077da:	bf44      	itt	mi
 80077dc:	232b      	movmi	r3, #43	@ 0x2b
 80077de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077e2:	f89a 3000 	ldrb.w	r3, [sl]
 80077e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e8:	d015      	beq.n	8007816 <_svfiprintf_r+0xfa>
 80077ea:	4654      	mov	r4, sl
 80077ec:	2000      	movs	r0, #0
 80077ee:	f04f 0c0a 	mov.w	ip, #10
 80077f2:	9a07      	ldr	r2, [sp, #28]
 80077f4:	4621      	mov	r1, r4
 80077f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077fa:	3b30      	subs	r3, #48	@ 0x30
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d94b      	bls.n	8007898 <_svfiprintf_r+0x17c>
 8007800:	b1b0      	cbz	r0, 8007830 <_svfiprintf_r+0x114>
 8007802:	9207      	str	r2, [sp, #28]
 8007804:	e014      	b.n	8007830 <_svfiprintf_r+0x114>
 8007806:	eba0 0308 	sub.w	r3, r0, r8
 800780a:	fa09 f303 	lsl.w	r3, r9, r3
 800780e:	4313      	orrs	r3, r2
 8007810:	46a2      	mov	sl, r4
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	e7d2      	b.n	80077bc <_svfiprintf_r+0xa0>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	1d19      	adds	r1, r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9103      	str	r1, [sp, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfbb      	ittet	lt
 8007822:	425b      	neglt	r3, r3
 8007824:	f042 0202 	orrlt.w	r2, r2, #2
 8007828:	9307      	strge	r3, [sp, #28]
 800782a:	9307      	strlt	r3, [sp, #28]
 800782c:	bfb8      	it	lt
 800782e:	9204      	strlt	r2, [sp, #16]
 8007830:	7823      	ldrb	r3, [r4, #0]
 8007832:	2b2e      	cmp	r3, #46	@ 0x2e
 8007834:	d10a      	bne.n	800784c <_svfiprintf_r+0x130>
 8007836:	7863      	ldrb	r3, [r4, #1]
 8007838:	2b2a      	cmp	r3, #42	@ 0x2a
 800783a:	d132      	bne.n	80078a2 <_svfiprintf_r+0x186>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	3402      	adds	r4, #2
 8007840:	1d1a      	adds	r2, r3, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	9203      	str	r2, [sp, #12]
 8007846:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007904 <_svfiprintf_r+0x1e8>
 8007850:	2203      	movs	r2, #3
 8007852:	4650      	mov	r0, sl
 8007854:	7821      	ldrb	r1, [r4, #0]
 8007856:	f7fe fc28 	bl	80060aa <memchr>
 800785a:	b138      	cbz	r0, 800786c <_svfiprintf_r+0x150>
 800785c:	2240      	movs	r2, #64	@ 0x40
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	eba0 000a 	sub.w	r0, r0, sl
 8007864:	4082      	lsls	r2, r0
 8007866:	4313      	orrs	r3, r2
 8007868:	3401      	adds	r4, #1
 800786a:	9304      	str	r3, [sp, #16]
 800786c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007870:	2206      	movs	r2, #6
 8007872:	4825      	ldr	r0, [pc, #148]	@ (8007908 <_svfiprintf_r+0x1ec>)
 8007874:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007878:	f7fe fc17 	bl	80060aa <memchr>
 800787c:	2800      	cmp	r0, #0
 800787e:	d036      	beq.n	80078ee <_svfiprintf_r+0x1d2>
 8007880:	4b22      	ldr	r3, [pc, #136]	@ (800790c <_svfiprintf_r+0x1f0>)
 8007882:	bb1b      	cbnz	r3, 80078cc <_svfiprintf_r+0x1b0>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	3307      	adds	r3, #7
 8007888:	f023 0307 	bic.w	r3, r3, #7
 800788c:	3308      	adds	r3, #8
 800788e:	9303      	str	r3, [sp, #12]
 8007890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007892:	4433      	add	r3, r6
 8007894:	9309      	str	r3, [sp, #36]	@ 0x24
 8007896:	e76a      	b.n	800776e <_svfiprintf_r+0x52>
 8007898:	460c      	mov	r4, r1
 800789a:	2001      	movs	r0, #1
 800789c:	fb0c 3202 	mla	r2, ip, r2, r3
 80078a0:	e7a8      	b.n	80077f4 <_svfiprintf_r+0xd8>
 80078a2:	2300      	movs	r3, #0
 80078a4:	f04f 0c0a 	mov.w	ip, #10
 80078a8:	4619      	mov	r1, r3
 80078aa:	3401      	adds	r4, #1
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	4620      	mov	r0, r4
 80078b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b4:	3a30      	subs	r2, #48	@ 0x30
 80078b6:	2a09      	cmp	r2, #9
 80078b8:	d903      	bls.n	80078c2 <_svfiprintf_r+0x1a6>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0c6      	beq.n	800784c <_svfiprintf_r+0x130>
 80078be:	9105      	str	r1, [sp, #20]
 80078c0:	e7c4      	b.n	800784c <_svfiprintf_r+0x130>
 80078c2:	4604      	mov	r4, r0
 80078c4:	2301      	movs	r3, #1
 80078c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ca:	e7f0      	b.n	80078ae <_svfiprintf_r+0x192>
 80078cc:	ab03      	add	r3, sp, #12
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	462a      	mov	r2, r5
 80078d2:	4638      	mov	r0, r7
 80078d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007910 <_svfiprintf_r+0x1f4>)
 80078d6:	a904      	add	r1, sp, #16
 80078d8:	f7fd fe84 	bl	80055e4 <_printf_float>
 80078dc:	1c42      	adds	r2, r0, #1
 80078de:	4606      	mov	r6, r0
 80078e0:	d1d6      	bne.n	8007890 <_svfiprintf_r+0x174>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	065b      	lsls	r3, r3, #25
 80078e6:	f53f af2d 	bmi.w	8007744 <_svfiprintf_r+0x28>
 80078ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078ec:	e72c      	b.n	8007748 <_svfiprintf_r+0x2c>
 80078ee:	ab03      	add	r3, sp, #12
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	462a      	mov	r2, r5
 80078f4:	4638      	mov	r0, r7
 80078f6:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <_svfiprintf_r+0x1f4>)
 80078f8:	a904      	add	r1, sp, #16
 80078fa:	f7fe f911 	bl	8005b20 <_printf_i>
 80078fe:	e7ed      	b.n	80078dc <_svfiprintf_r+0x1c0>
 8007900:	080083f0 	.word	0x080083f0
 8007904:	080083f6 	.word	0x080083f6
 8007908:	080083fa 	.word	0x080083fa
 800790c:	080055e5 	.word	0x080055e5
 8007910:	08007665 	.word	0x08007665

08007914 <__sflush_r>:
 8007914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	0716      	lsls	r6, r2, #28
 800791c:	4605      	mov	r5, r0
 800791e:	460c      	mov	r4, r1
 8007920:	d454      	bmi.n	80079cc <__sflush_r+0xb8>
 8007922:	684b      	ldr	r3, [r1, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	dc02      	bgt.n	800792e <__sflush_r+0x1a>
 8007928:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	dd48      	ble.n	80079c0 <__sflush_r+0xac>
 800792e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007930:	2e00      	cmp	r6, #0
 8007932:	d045      	beq.n	80079c0 <__sflush_r+0xac>
 8007934:	2300      	movs	r3, #0
 8007936:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800793a:	682f      	ldr	r7, [r5, #0]
 800793c:	6a21      	ldr	r1, [r4, #32]
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	d030      	beq.n	80079a4 <__sflush_r+0x90>
 8007942:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	0759      	lsls	r1, r3, #29
 8007948:	d505      	bpl.n	8007956 <__sflush_r+0x42>
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	1ad2      	subs	r2, r2, r3
 800794e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007950:	b10b      	cbz	r3, 8007956 <__sflush_r+0x42>
 8007952:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007954:	1ad2      	subs	r2, r2, r3
 8007956:	2300      	movs	r3, #0
 8007958:	4628      	mov	r0, r5
 800795a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	47b0      	blx	r6
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	d106      	bne.n	8007974 <__sflush_r+0x60>
 8007966:	6829      	ldr	r1, [r5, #0]
 8007968:	291d      	cmp	r1, #29
 800796a:	d82b      	bhi.n	80079c4 <__sflush_r+0xb0>
 800796c:	4a28      	ldr	r2, [pc, #160]	@ (8007a10 <__sflush_r+0xfc>)
 800796e:	410a      	asrs	r2, r1
 8007970:	07d6      	lsls	r6, r2, #31
 8007972:	d427      	bmi.n	80079c4 <__sflush_r+0xb0>
 8007974:	2200      	movs	r2, #0
 8007976:	6062      	str	r2, [r4, #4]
 8007978:	6922      	ldr	r2, [r4, #16]
 800797a:	04d9      	lsls	r1, r3, #19
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	d504      	bpl.n	800798a <__sflush_r+0x76>
 8007980:	1c42      	adds	r2, r0, #1
 8007982:	d101      	bne.n	8007988 <__sflush_r+0x74>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b903      	cbnz	r3, 800798a <__sflush_r+0x76>
 8007988:	6560      	str	r0, [r4, #84]	@ 0x54
 800798a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800798c:	602f      	str	r7, [r5, #0]
 800798e:	b1b9      	cbz	r1, 80079c0 <__sflush_r+0xac>
 8007990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007994:	4299      	cmp	r1, r3
 8007996:	d002      	beq.n	800799e <__sflush_r+0x8a>
 8007998:	4628      	mov	r0, r5
 800799a:	f7ff f9e5 	bl	8006d68 <_free_r>
 800799e:	2300      	movs	r3, #0
 80079a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079a2:	e00d      	b.n	80079c0 <__sflush_r+0xac>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b0      	blx	r6
 80079aa:	4602      	mov	r2, r0
 80079ac:	1c50      	adds	r0, r2, #1
 80079ae:	d1c9      	bne.n	8007944 <__sflush_r+0x30>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0c6      	beq.n	8007944 <__sflush_r+0x30>
 80079b6:	2b1d      	cmp	r3, #29
 80079b8:	d001      	beq.n	80079be <__sflush_r+0xaa>
 80079ba:	2b16      	cmp	r3, #22
 80079bc:	d11d      	bne.n	80079fa <__sflush_r+0xe6>
 80079be:	602f      	str	r7, [r5, #0]
 80079c0:	2000      	movs	r0, #0
 80079c2:	e021      	b.n	8007a08 <__sflush_r+0xf4>
 80079c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c8:	b21b      	sxth	r3, r3
 80079ca:	e01a      	b.n	8007a02 <__sflush_r+0xee>
 80079cc:	690f      	ldr	r7, [r1, #16]
 80079ce:	2f00      	cmp	r7, #0
 80079d0:	d0f6      	beq.n	80079c0 <__sflush_r+0xac>
 80079d2:	0793      	lsls	r3, r2, #30
 80079d4:	bf18      	it	ne
 80079d6:	2300      	movne	r3, #0
 80079d8:	680e      	ldr	r6, [r1, #0]
 80079da:	bf08      	it	eq
 80079dc:	694b      	ldreq	r3, [r1, #20]
 80079de:	1bf6      	subs	r6, r6, r7
 80079e0:	600f      	str	r7, [r1, #0]
 80079e2:	608b      	str	r3, [r1, #8]
 80079e4:	2e00      	cmp	r6, #0
 80079e6:	ddeb      	ble.n	80079c0 <__sflush_r+0xac>
 80079e8:	4633      	mov	r3, r6
 80079ea:	463a      	mov	r2, r7
 80079ec:	4628      	mov	r0, r5
 80079ee:	6a21      	ldr	r1, [r4, #32]
 80079f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079f4:	47e0      	blx	ip
 80079f6:	2800      	cmp	r0, #0
 80079f8:	dc07      	bgt.n	8007a0a <__sflush_r+0xf6>
 80079fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a02:	f04f 30ff 	mov.w	r0, #4294967295
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a0a:	4407      	add	r7, r0
 8007a0c:	1a36      	subs	r6, r6, r0
 8007a0e:	e7e9      	b.n	80079e4 <__sflush_r+0xd0>
 8007a10:	dfbffffe 	.word	0xdfbffffe

08007a14 <_fflush_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	690b      	ldr	r3, [r1, #16]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	b913      	cbnz	r3, 8007a24 <_fflush_r+0x10>
 8007a1e:	2500      	movs	r5, #0
 8007a20:	4628      	mov	r0, r5
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	b118      	cbz	r0, 8007a2e <_fflush_r+0x1a>
 8007a26:	6a03      	ldr	r3, [r0, #32]
 8007a28:	b90b      	cbnz	r3, 8007a2e <_fflush_r+0x1a>
 8007a2a:	f7fe fa25 	bl	8005e78 <__sinit>
 8007a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f3      	beq.n	8007a1e <_fflush_r+0xa>
 8007a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a38:	07d0      	lsls	r0, r2, #31
 8007a3a:	d404      	bmi.n	8007a46 <_fflush_r+0x32>
 8007a3c:	0599      	lsls	r1, r3, #22
 8007a3e:	d402      	bmi.n	8007a46 <_fflush_r+0x32>
 8007a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a42:	f7fe fb30 	bl	80060a6 <__retarget_lock_acquire_recursive>
 8007a46:	4628      	mov	r0, r5
 8007a48:	4621      	mov	r1, r4
 8007a4a:	f7ff ff63 	bl	8007914 <__sflush_r>
 8007a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a50:	4605      	mov	r5, r0
 8007a52:	07da      	lsls	r2, r3, #31
 8007a54:	d4e4      	bmi.n	8007a20 <_fflush_r+0xc>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	059b      	lsls	r3, r3, #22
 8007a5a:	d4e1      	bmi.n	8007a20 <_fflush_r+0xc>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a5e:	f7fe fb23 	bl	80060a8 <__retarget_lock_release_recursive>
 8007a62:	e7dd      	b.n	8007a20 <_fflush_r+0xc>

08007a64 <memmove>:
 8007a64:	4288      	cmp	r0, r1
 8007a66:	b510      	push	{r4, lr}
 8007a68:	eb01 0402 	add.w	r4, r1, r2
 8007a6c:	d902      	bls.n	8007a74 <memmove+0x10>
 8007a6e:	4284      	cmp	r4, r0
 8007a70:	4623      	mov	r3, r4
 8007a72:	d807      	bhi.n	8007a84 <memmove+0x20>
 8007a74:	1e43      	subs	r3, r0, #1
 8007a76:	42a1      	cmp	r1, r4
 8007a78:	d008      	beq.n	8007a8c <memmove+0x28>
 8007a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a82:	e7f8      	b.n	8007a76 <memmove+0x12>
 8007a84:	4601      	mov	r1, r0
 8007a86:	4402      	add	r2, r0
 8007a88:	428a      	cmp	r2, r1
 8007a8a:	d100      	bne.n	8007a8e <memmove+0x2a>
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a96:	e7f7      	b.n	8007a88 <memmove+0x24>

08007a98 <_sbrk_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	4d05      	ldr	r5, [pc, #20]	@ (8007ab4 <_sbrk_r+0x1c>)
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7fa fad4 	bl	8002050 <_sbrk>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_sbrk_r+0x1a>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_sbrk_r+0x1a>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20000540 	.word	0x20000540

08007ab8 <memcpy>:
 8007ab8:	440a      	add	r2, r1
 8007aba:	4291      	cmp	r1, r2
 8007abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac0:	d100      	bne.n	8007ac4 <memcpy+0xc>
 8007ac2:	4770      	bx	lr
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aca:	4291      	cmp	r1, r2
 8007acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad0:	d1f9      	bne.n	8007ac6 <memcpy+0xe>
 8007ad2:	bd10      	pop	{r4, pc}

08007ad4 <__assert_func>:
 8007ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ad6:	4614      	mov	r4, r2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4b09      	ldr	r3, [pc, #36]	@ (8007b00 <__assert_func+0x2c>)
 8007adc:	4605      	mov	r5, r0
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68d8      	ldr	r0, [r3, #12]
 8007ae2:	b954      	cbnz	r4, 8007afa <__assert_func+0x26>
 8007ae4:	4b07      	ldr	r3, [pc, #28]	@ (8007b04 <__assert_func+0x30>)
 8007ae6:	461c      	mov	r4, r3
 8007ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007aec:	9100      	str	r1, [sp, #0]
 8007aee:	462b      	mov	r3, r5
 8007af0:	4905      	ldr	r1, [pc, #20]	@ (8007b08 <__assert_func+0x34>)
 8007af2:	f000 f86f 	bl	8007bd4 <fiprintf>
 8007af6:	f000 f87f 	bl	8007bf8 <abort>
 8007afa:	4b04      	ldr	r3, [pc, #16]	@ (8007b0c <__assert_func+0x38>)
 8007afc:	e7f4      	b.n	8007ae8 <__assert_func+0x14>
 8007afe:	bf00      	nop
 8007b00:	20000020 	.word	0x20000020
 8007b04:	08008446 	.word	0x08008446
 8007b08:	08008418 	.word	0x08008418
 8007b0c:	0800840b 	.word	0x0800840b

08007b10 <_calloc_r>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	fba1 5402 	umull	r5, r4, r1, r2
 8007b16:	b93c      	cbnz	r4, 8007b28 <_calloc_r+0x18>
 8007b18:	4629      	mov	r1, r5
 8007b1a:	f7ff f997 	bl	8006e4c <_malloc_r>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	b928      	cbnz	r0, 8007b2e <_calloc_r+0x1e>
 8007b22:	2600      	movs	r6, #0
 8007b24:	4630      	mov	r0, r6
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	220c      	movs	r2, #12
 8007b2a:	6002      	str	r2, [r0, #0]
 8007b2c:	e7f9      	b.n	8007b22 <_calloc_r+0x12>
 8007b2e:	462a      	mov	r2, r5
 8007b30:	4621      	mov	r1, r4
 8007b32:	f7fe fa3a 	bl	8005faa <memset>
 8007b36:	e7f5      	b.n	8007b24 <_calloc_r+0x14>

08007b38 <__ascii_mbtowc>:
 8007b38:	b082      	sub	sp, #8
 8007b3a:	b901      	cbnz	r1, 8007b3e <__ascii_mbtowc+0x6>
 8007b3c:	a901      	add	r1, sp, #4
 8007b3e:	b142      	cbz	r2, 8007b52 <__ascii_mbtowc+0x1a>
 8007b40:	b14b      	cbz	r3, 8007b56 <__ascii_mbtowc+0x1e>
 8007b42:	7813      	ldrb	r3, [r2, #0]
 8007b44:	600b      	str	r3, [r1, #0]
 8007b46:	7812      	ldrb	r2, [r2, #0]
 8007b48:	1e10      	subs	r0, r2, #0
 8007b4a:	bf18      	it	ne
 8007b4c:	2001      	movne	r0, #1
 8007b4e:	b002      	add	sp, #8
 8007b50:	4770      	bx	lr
 8007b52:	4610      	mov	r0, r2
 8007b54:	e7fb      	b.n	8007b4e <__ascii_mbtowc+0x16>
 8007b56:	f06f 0001 	mvn.w	r0, #1
 8007b5a:	e7f8      	b.n	8007b4e <__ascii_mbtowc+0x16>

08007b5c <_realloc_r>:
 8007b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b60:	4680      	mov	r8, r0
 8007b62:	4615      	mov	r5, r2
 8007b64:	460c      	mov	r4, r1
 8007b66:	b921      	cbnz	r1, 8007b72 <_realloc_r+0x16>
 8007b68:	4611      	mov	r1, r2
 8007b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6e:	f7ff b96d 	b.w	8006e4c <_malloc_r>
 8007b72:	b92a      	cbnz	r2, 8007b80 <_realloc_r+0x24>
 8007b74:	f7ff f8f8 	bl	8006d68 <_free_r>
 8007b78:	2400      	movs	r4, #0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b80:	f000 f841 	bl	8007c06 <_malloc_usable_size_r>
 8007b84:	4285      	cmp	r5, r0
 8007b86:	4606      	mov	r6, r0
 8007b88:	d802      	bhi.n	8007b90 <_realloc_r+0x34>
 8007b8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b8e:	d8f4      	bhi.n	8007b7a <_realloc_r+0x1e>
 8007b90:	4629      	mov	r1, r5
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7ff f95a 	bl	8006e4c <_malloc_r>
 8007b98:	4607      	mov	r7, r0
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d0ec      	beq.n	8007b78 <_realloc_r+0x1c>
 8007b9e:	42b5      	cmp	r5, r6
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	bf28      	it	cs
 8007ba6:	4632      	movcs	r2, r6
 8007ba8:	f7ff ff86 	bl	8007ab8 <memcpy>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4640      	mov	r0, r8
 8007bb0:	f7ff f8da 	bl	8006d68 <_free_r>
 8007bb4:	463c      	mov	r4, r7
 8007bb6:	e7e0      	b.n	8007b7a <_realloc_r+0x1e>

08007bb8 <__ascii_wctomb>:
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4608      	mov	r0, r1
 8007bbc:	b141      	cbz	r1, 8007bd0 <__ascii_wctomb+0x18>
 8007bbe:	2aff      	cmp	r2, #255	@ 0xff
 8007bc0:	d904      	bls.n	8007bcc <__ascii_wctomb+0x14>
 8007bc2:	228a      	movs	r2, #138	@ 0x8a
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	4770      	bx	lr
 8007bcc:	2001      	movs	r0, #1
 8007bce:	700a      	strb	r2, [r1, #0]
 8007bd0:	4770      	bx	lr
	...

08007bd4 <fiprintf>:
 8007bd4:	b40e      	push	{r1, r2, r3}
 8007bd6:	b503      	push	{r0, r1, lr}
 8007bd8:	4601      	mov	r1, r0
 8007bda:	ab03      	add	r3, sp, #12
 8007bdc:	4805      	ldr	r0, [pc, #20]	@ (8007bf4 <fiprintf+0x20>)
 8007bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be2:	6800      	ldr	r0, [r0, #0]
 8007be4:	9301      	str	r3, [sp, #4]
 8007be6:	f000 f83d 	bl	8007c64 <_vfiprintf_r>
 8007bea:	b002      	add	sp, #8
 8007bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf0:	b003      	add	sp, #12
 8007bf2:	4770      	bx	lr
 8007bf4:	20000020 	.word	0x20000020

08007bf8 <abort>:
 8007bf8:	2006      	movs	r0, #6
 8007bfa:	b508      	push	{r3, lr}
 8007bfc:	f000 fa06 	bl	800800c <raise>
 8007c00:	2001      	movs	r0, #1
 8007c02:	f7fa f9b0 	bl	8001f66 <_exit>

08007c06 <_malloc_usable_size_r>:
 8007c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c0a:	1f18      	subs	r0, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bfbc      	itt	lt
 8007c10:	580b      	ldrlt	r3, [r1, r0]
 8007c12:	18c0      	addlt	r0, r0, r3
 8007c14:	4770      	bx	lr

08007c16 <__sfputc_r>:
 8007c16:	6893      	ldr	r3, [r2, #8]
 8007c18:	b410      	push	{r4}
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	6093      	str	r3, [r2, #8]
 8007c20:	da07      	bge.n	8007c32 <__sfputc_r+0x1c>
 8007c22:	6994      	ldr	r4, [r2, #24]
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	db01      	blt.n	8007c2c <__sfputc_r+0x16>
 8007c28:	290a      	cmp	r1, #10
 8007c2a:	d102      	bne.n	8007c32 <__sfputc_r+0x1c>
 8007c2c:	bc10      	pop	{r4}
 8007c2e:	f000 b931 	b.w	8007e94 <__swbuf_r>
 8007c32:	6813      	ldr	r3, [r2, #0]
 8007c34:	1c58      	adds	r0, r3, #1
 8007c36:	6010      	str	r0, [r2, #0]
 8007c38:	7019      	strb	r1, [r3, #0]
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	bc10      	pop	{r4}
 8007c3e:	4770      	bx	lr

08007c40 <__sfputs_r>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	4606      	mov	r6, r0
 8007c44:	460f      	mov	r7, r1
 8007c46:	4614      	mov	r4, r2
 8007c48:	18d5      	adds	r5, r2, r3
 8007c4a:	42ac      	cmp	r4, r5
 8007c4c:	d101      	bne.n	8007c52 <__sfputs_r+0x12>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e007      	b.n	8007c62 <__sfputs_r+0x22>
 8007c52:	463a      	mov	r2, r7
 8007c54:	4630      	mov	r0, r6
 8007c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c5a:	f7ff ffdc 	bl	8007c16 <__sfputc_r>
 8007c5e:	1c43      	adds	r3, r0, #1
 8007c60:	d1f3      	bne.n	8007c4a <__sfputs_r+0xa>
 8007c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c64 <_vfiprintf_r>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	460d      	mov	r5, r1
 8007c6a:	4614      	mov	r4, r2
 8007c6c:	4698      	mov	r8, r3
 8007c6e:	4606      	mov	r6, r0
 8007c70:	b09d      	sub	sp, #116	@ 0x74
 8007c72:	b118      	cbz	r0, 8007c7c <_vfiprintf_r+0x18>
 8007c74:	6a03      	ldr	r3, [r0, #32]
 8007c76:	b90b      	cbnz	r3, 8007c7c <_vfiprintf_r+0x18>
 8007c78:	f7fe f8fe 	bl	8005e78 <__sinit>
 8007c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c7e:	07d9      	lsls	r1, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_vfiprintf_r+0x2a>
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_vfiprintf_r+0x2a>
 8007c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c8a:	f7fe fa0c 	bl	80060a6 <__retarget_lock_acquire_recursive>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	071b      	lsls	r3, r3, #28
 8007c92:	d501      	bpl.n	8007c98 <_vfiprintf_r+0x34>
 8007c94:	692b      	ldr	r3, [r5, #16]
 8007c96:	b99b      	cbnz	r3, 8007cc0 <_vfiprintf_r+0x5c>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 f938 	bl	8007f10 <__swsetup_r>
 8007ca0:	b170      	cbz	r0, 8007cc0 <_vfiprintf_r+0x5c>
 8007ca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ca4:	07dc      	lsls	r4, r3, #31
 8007ca6:	d504      	bpl.n	8007cb2 <_vfiprintf_r+0x4e>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	b01d      	add	sp, #116	@ 0x74
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	0598      	lsls	r0, r3, #22
 8007cb6:	d4f7      	bmi.n	8007ca8 <_vfiprintf_r+0x44>
 8007cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cba:	f7fe f9f5 	bl	80060a8 <__retarget_lock_release_recursive>
 8007cbe:	e7f3      	b.n	8007ca8 <_vfiprintf_r+0x44>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc4:	2320      	movs	r3, #32
 8007cc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cca:	2330      	movs	r3, #48	@ 0x30
 8007ccc:	f04f 0901 	mov.w	r9, #1
 8007cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cd4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e80 <_vfiprintf_r+0x21c>
 8007cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cdc:	4623      	mov	r3, r4
 8007cde:	469a      	mov	sl, r3
 8007ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ce4:	b10a      	cbz	r2, 8007cea <_vfiprintf_r+0x86>
 8007ce6:	2a25      	cmp	r2, #37	@ 0x25
 8007ce8:	d1f9      	bne.n	8007cde <_vfiprintf_r+0x7a>
 8007cea:	ebba 0b04 	subs.w	fp, sl, r4
 8007cee:	d00b      	beq.n	8007d08 <_vfiprintf_r+0xa4>
 8007cf0:	465b      	mov	r3, fp
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7ff ffa2 	bl	8007c40 <__sfputs_r>
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	f000 80a7 	beq.w	8007e50 <_vfiprintf_r+0x1ec>
 8007d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d04:	445a      	add	r2, fp
 8007d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d08:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 809f 	beq.w	8007e50 <_vfiprintf_r+0x1ec>
 8007d12:	2300      	movs	r3, #0
 8007d14:	f04f 32ff 	mov.w	r2, #4294967295
 8007d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d1c:	f10a 0a01 	add.w	sl, sl, #1
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	9307      	str	r3, [sp, #28]
 8007d24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d28:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d2a:	4654      	mov	r4, sl
 8007d2c:	2205      	movs	r2, #5
 8007d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d32:	4853      	ldr	r0, [pc, #332]	@ (8007e80 <_vfiprintf_r+0x21c>)
 8007d34:	f7fe f9b9 	bl	80060aa <memchr>
 8007d38:	9a04      	ldr	r2, [sp, #16]
 8007d3a:	b9d8      	cbnz	r0, 8007d74 <_vfiprintf_r+0x110>
 8007d3c:	06d1      	lsls	r1, r2, #27
 8007d3e:	bf44      	itt	mi
 8007d40:	2320      	movmi	r3, #32
 8007d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d46:	0713      	lsls	r3, r2, #28
 8007d48:	bf44      	itt	mi
 8007d4a:	232b      	movmi	r3, #43	@ 0x2b
 8007d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d50:	f89a 3000 	ldrb.w	r3, [sl]
 8007d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d56:	d015      	beq.n	8007d84 <_vfiprintf_r+0x120>
 8007d58:	4654      	mov	r4, sl
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f04f 0c0a 	mov.w	ip, #10
 8007d60:	9a07      	ldr	r2, [sp, #28]
 8007d62:	4621      	mov	r1, r4
 8007d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d68:	3b30      	subs	r3, #48	@ 0x30
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d94b      	bls.n	8007e06 <_vfiprintf_r+0x1a2>
 8007d6e:	b1b0      	cbz	r0, 8007d9e <_vfiprintf_r+0x13a>
 8007d70:	9207      	str	r2, [sp, #28]
 8007d72:	e014      	b.n	8007d9e <_vfiprintf_r+0x13a>
 8007d74:	eba0 0308 	sub.w	r3, r0, r8
 8007d78:	fa09 f303 	lsl.w	r3, r9, r3
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	46a2      	mov	sl, r4
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	e7d2      	b.n	8007d2a <_vfiprintf_r+0xc6>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	1d19      	adds	r1, r3, #4
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	9103      	str	r1, [sp, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	bfbb      	ittet	lt
 8007d90:	425b      	neglt	r3, r3
 8007d92:	f042 0202 	orrlt.w	r2, r2, #2
 8007d96:	9307      	strge	r3, [sp, #28]
 8007d98:	9307      	strlt	r3, [sp, #28]
 8007d9a:	bfb8      	it	lt
 8007d9c:	9204      	strlt	r2, [sp, #16]
 8007d9e:	7823      	ldrb	r3, [r4, #0]
 8007da0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007da2:	d10a      	bne.n	8007dba <_vfiprintf_r+0x156>
 8007da4:	7863      	ldrb	r3, [r4, #1]
 8007da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da8:	d132      	bne.n	8007e10 <_vfiprintf_r+0x1ac>
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	3402      	adds	r4, #2
 8007dae:	1d1a      	adds	r2, r3, #4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	9203      	str	r2, [sp, #12]
 8007db4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e84 <_vfiprintf_r+0x220>
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	7821      	ldrb	r1, [r4, #0]
 8007dc4:	f7fe f971 	bl	80060aa <memchr>
 8007dc8:	b138      	cbz	r0, 8007dda <_vfiprintf_r+0x176>
 8007dca:	2240      	movs	r2, #64	@ 0x40
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	eba0 000a 	sub.w	r0, r0, sl
 8007dd2:	4082      	lsls	r2, r0
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	3401      	adds	r4, #1
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dde:	2206      	movs	r2, #6
 8007de0:	4829      	ldr	r0, [pc, #164]	@ (8007e88 <_vfiprintf_r+0x224>)
 8007de2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007de6:	f7fe f960 	bl	80060aa <memchr>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d03f      	beq.n	8007e6e <_vfiprintf_r+0x20a>
 8007dee:	4b27      	ldr	r3, [pc, #156]	@ (8007e8c <_vfiprintf_r+0x228>)
 8007df0:	bb1b      	cbnz	r3, 8007e3a <_vfiprintf_r+0x1d6>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	3307      	adds	r3, #7
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	9303      	str	r3, [sp, #12]
 8007dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e00:	443b      	add	r3, r7
 8007e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e04:	e76a      	b.n	8007cdc <_vfiprintf_r+0x78>
 8007e06:	460c      	mov	r4, r1
 8007e08:	2001      	movs	r0, #1
 8007e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e0e:	e7a8      	b.n	8007d62 <_vfiprintf_r+0xfe>
 8007e10:	2300      	movs	r3, #0
 8007e12:	f04f 0c0a 	mov.w	ip, #10
 8007e16:	4619      	mov	r1, r3
 8007e18:	3401      	adds	r4, #1
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e22:	3a30      	subs	r2, #48	@ 0x30
 8007e24:	2a09      	cmp	r2, #9
 8007e26:	d903      	bls.n	8007e30 <_vfiprintf_r+0x1cc>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0c6      	beq.n	8007dba <_vfiprintf_r+0x156>
 8007e2c:	9105      	str	r1, [sp, #20]
 8007e2e:	e7c4      	b.n	8007dba <_vfiprintf_r+0x156>
 8007e30:	4604      	mov	r4, r0
 8007e32:	2301      	movs	r3, #1
 8007e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e38:	e7f0      	b.n	8007e1c <_vfiprintf_r+0x1b8>
 8007e3a:	ab03      	add	r3, sp, #12
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	462a      	mov	r2, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	4b13      	ldr	r3, [pc, #76]	@ (8007e90 <_vfiprintf_r+0x22c>)
 8007e44:	a904      	add	r1, sp, #16
 8007e46:	f7fd fbcd 	bl	80055e4 <_printf_float>
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	1c78      	adds	r0, r7, #1
 8007e4e:	d1d6      	bne.n	8007dfe <_vfiprintf_r+0x19a>
 8007e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e52:	07d9      	lsls	r1, r3, #31
 8007e54:	d405      	bmi.n	8007e62 <_vfiprintf_r+0x1fe>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	059a      	lsls	r2, r3, #22
 8007e5a:	d402      	bmi.n	8007e62 <_vfiprintf_r+0x1fe>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e5e:	f7fe f923 	bl	80060a8 <__retarget_lock_release_recursive>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	065b      	lsls	r3, r3, #25
 8007e66:	f53f af1f 	bmi.w	8007ca8 <_vfiprintf_r+0x44>
 8007e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e6c:	e71e      	b.n	8007cac <_vfiprintf_r+0x48>
 8007e6e:	ab03      	add	r3, sp, #12
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	462a      	mov	r2, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <_vfiprintf_r+0x22c>)
 8007e78:	a904      	add	r1, sp, #16
 8007e7a:	f7fd fe51 	bl	8005b20 <_printf_i>
 8007e7e:	e7e4      	b.n	8007e4a <_vfiprintf_r+0x1e6>
 8007e80:	080083f0 	.word	0x080083f0
 8007e84:	080083f6 	.word	0x080083f6
 8007e88:	080083fa 	.word	0x080083fa
 8007e8c:	080055e5 	.word	0x080055e5
 8007e90:	08007c41 	.word	0x08007c41

08007e94 <__swbuf_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	460e      	mov	r6, r1
 8007e98:	4614      	mov	r4, r2
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	b118      	cbz	r0, 8007ea6 <__swbuf_r+0x12>
 8007e9e:	6a03      	ldr	r3, [r0, #32]
 8007ea0:	b90b      	cbnz	r3, 8007ea6 <__swbuf_r+0x12>
 8007ea2:	f7fd ffe9 	bl	8005e78 <__sinit>
 8007ea6:	69a3      	ldr	r3, [r4, #24]
 8007ea8:	60a3      	str	r3, [r4, #8]
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	071a      	lsls	r2, r3, #28
 8007eae:	d501      	bpl.n	8007eb4 <__swbuf_r+0x20>
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	b943      	cbnz	r3, 8007ec6 <__swbuf_r+0x32>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f82a 	bl	8007f10 <__swsetup_r>
 8007ebc:	b118      	cbz	r0, 8007ec6 <__swbuf_r+0x32>
 8007ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	b2f6      	uxtb	r6, r6
 8007ecc:	1a98      	subs	r0, r3, r2
 8007ece:	6963      	ldr	r3, [r4, #20]
 8007ed0:	4637      	mov	r7, r6
 8007ed2:	4283      	cmp	r3, r0
 8007ed4:	dc05      	bgt.n	8007ee2 <__swbuf_r+0x4e>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f7ff fd9b 	bl	8007a14 <_fflush_r>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d1ed      	bne.n	8007ebe <__swbuf_r+0x2a>
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	60a3      	str	r3, [r4, #8]
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	6022      	str	r2, [r4, #0]
 8007eee:	701e      	strb	r6, [r3, #0]
 8007ef0:	6962      	ldr	r2, [r4, #20]
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d004      	beq.n	8007f02 <__swbuf_r+0x6e>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	07db      	lsls	r3, r3, #31
 8007efc:	d5e1      	bpl.n	8007ec2 <__swbuf_r+0x2e>
 8007efe:	2e0a      	cmp	r6, #10
 8007f00:	d1df      	bne.n	8007ec2 <__swbuf_r+0x2e>
 8007f02:	4621      	mov	r1, r4
 8007f04:	4628      	mov	r0, r5
 8007f06:	f7ff fd85 	bl	8007a14 <_fflush_r>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d0d9      	beq.n	8007ec2 <__swbuf_r+0x2e>
 8007f0e:	e7d6      	b.n	8007ebe <__swbuf_r+0x2a>

08007f10 <__swsetup_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4b29      	ldr	r3, [pc, #164]	@ (8007fb8 <__swsetup_r+0xa8>)
 8007f14:	4605      	mov	r5, r0
 8007f16:	6818      	ldr	r0, [r3, #0]
 8007f18:	460c      	mov	r4, r1
 8007f1a:	b118      	cbz	r0, 8007f24 <__swsetup_r+0x14>
 8007f1c:	6a03      	ldr	r3, [r0, #32]
 8007f1e:	b90b      	cbnz	r3, 8007f24 <__swsetup_r+0x14>
 8007f20:	f7fd ffaa 	bl	8005e78 <__sinit>
 8007f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f28:	0719      	lsls	r1, r3, #28
 8007f2a:	d422      	bmi.n	8007f72 <__swsetup_r+0x62>
 8007f2c:	06da      	lsls	r2, r3, #27
 8007f2e:	d407      	bmi.n	8007f40 <__swsetup_r+0x30>
 8007f30:	2209      	movs	r2, #9
 8007f32:	602a      	str	r2, [r5, #0]
 8007f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	e033      	b.n	8007fa8 <__swsetup_r+0x98>
 8007f40:	0758      	lsls	r0, r3, #29
 8007f42:	d512      	bpl.n	8007f6a <__swsetup_r+0x5a>
 8007f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f46:	b141      	cbz	r1, 8007f5a <__swsetup_r+0x4a>
 8007f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	d002      	beq.n	8007f56 <__swsetup_r+0x46>
 8007f50:	4628      	mov	r0, r5
 8007f52:	f7fe ff09 	bl	8006d68 <_free_r>
 8007f56:	2300      	movs	r3, #0
 8007f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	2300      	movs	r3, #0
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f043 0308 	orr.w	r3, r3, #8
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	b94b      	cbnz	r3, 8007f8a <__swsetup_r+0x7a>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f80:	d003      	beq.n	8007f8a <__swsetup_r+0x7a>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f000 f882 	bl	800808e <__smakebuf_r>
 8007f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8e:	f013 0201 	ands.w	r2, r3, #1
 8007f92:	d00a      	beq.n	8007faa <__swsetup_r+0x9a>
 8007f94:	2200      	movs	r2, #0
 8007f96:	60a2      	str	r2, [r4, #8]
 8007f98:	6962      	ldr	r2, [r4, #20]
 8007f9a:	4252      	negs	r2, r2
 8007f9c:	61a2      	str	r2, [r4, #24]
 8007f9e:	6922      	ldr	r2, [r4, #16]
 8007fa0:	b942      	cbnz	r2, 8007fb4 <__swsetup_r+0xa4>
 8007fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fa6:	d1c5      	bne.n	8007f34 <__swsetup_r+0x24>
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	0799      	lsls	r1, r3, #30
 8007fac:	bf58      	it	pl
 8007fae:	6962      	ldrpl	r2, [r4, #20]
 8007fb0:	60a2      	str	r2, [r4, #8]
 8007fb2:	e7f4      	b.n	8007f9e <__swsetup_r+0x8e>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e7f7      	b.n	8007fa8 <__swsetup_r+0x98>
 8007fb8:	20000020 	.word	0x20000020

08007fbc <_raise_r>:
 8007fbc:	291f      	cmp	r1, #31
 8007fbe:	b538      	push	{r3, r4, r5, lr}
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	d904      	bls.n	8007fd0 <_raise_r+0x14>
 8007fc6:	2316      	movs	r3, #22
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fd2:	b112      	cbz	r2, 8007fda <_raise_r+0x1e>
 8007fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fd8:	b94b      	cbnz	r3, 8007fee <_raise_r+0x32>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 f830 	bl	8008040 <_getpid_r>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fea:	f000 b817 	b.w	800801c <_kill_r>
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d00a      	beq.n	8008008 <_raise_r+0x4c>
 8007ff2:	1c59      	adds	r1, r3, #1
 8007ff4:	d103      	bne.n	8007ffe <_raise_r+0x42>
 8007ff6:	2316      	movs	r3, #22
 8007ff8:	6003      	str	r3, [r0, #0]
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	e7e7      	b.n	8007fce <_raise_r+0x12>
 8007ffe:	2100      	movs	r1, #0
 8008000:	4620      	mov	r0, r4
 8008002:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008006:	4798      	blx	r3
 8008008:	2000      	movs	r0, #0
 800800a:	e7e0      	b.n	8007fce <_raise_r+0x12>

0800800c <raise>:
 800800c:	4b02      	ldr	r3, [pc, #8]	@ (8008018 <raise+0xc>)
 800800e:	4601      	mov	r1, r0
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f7ff bfd3 	b.w	8007fbc <_raise_r>
 8008016:	bf00      	nop
 8008018:	20000020 	.word	0x20000020

0800801c <_kill_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	2300      	movs	r3, #0
 8008020:	4d06      	ldr	r5, [pc, #24]	@ (800803c <_kill_r+0x20>)
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	602b      	str	r3, [r5, #0]
 800802a:	f7f9 ff8c 	bl	8001f46 <_kill>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d102      	bne.n	8008038 <_kill_r+0x1c>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b103      	cbz	r3, 8008038 <_kill_r+0x1c>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	20000540 	.word	0x20000540

08008040 <_getpid_r>:
 8008040:	f7f9 bf7a 	b.w	8001f38 <_getpid>

08008044 <__swhatbuf_r>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804c:	4615      	mov	r5, r2
 800804e:	2900      	cmp	r1, #0
 8008050:	461e      	mov	r6, r3
 8008052:	b096      	sub	sp, #88	@ 0x58
 8008054:	da0c      	bge.n	8008070 <__swhatbuf_r+0x2c>
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	2100      	movs	r1, #0
 800805a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800805e:	bf14      	ite	ne
 8008060:	2340      	movne	r3, #64	@ 0x40
 8008062:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008066:	2000      	movs	r0, #0
 8008068:	6031      	str	r1, [r6, #0]
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	b016      	add	sp, #88	@ 0x58
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	466a      	mov	r2, sp
 8008072:	f000 f849 	bl	8008108 <_fstat_r>
 8008076:	2800      	cmp	r0, #0
 8008078:	dbed      	blt.n	8008056 <__swhatbuf_r+0x12>
 800807a:	9901      	ldr	r1, [sp, #4]
 800807c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008080:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008084:	4259      	negs	r1, r3
 8008086:	4159      	adcs	r1, r3
 8008088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800808c:	e7eb      	b.n	8008066 <__swhatbuf_r+0x22>

0800808e <__smakebuf_r>:
 800808e:	898b      	ldrh	r3, [r1, #12]
 8008090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008092:	079d      	lsls	r5, r3, #30
 8008094:	4606      	mov	r6, r0
 8008096:	460c      	mov	r4, r1
 8008098:	d507      	bpl.n	80080aa <__smakebuf_r+0x1c>
 800809a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	6123      	str	r3, [r4, #16]
 80080a2:	2301      	movs	r3, #1
 80080a4:	6163      	str	r3, [r4, #20]
 80080a6:	b003      	add	sp, #12
 80080a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080aa:	466a      	mov	r2, sp
 80080ac:	ab01      	add	r3, sp, #4
 80080ae:	f7ff ffc9 	bl	8008044 <__swhatbuf_r>
 80080b2:	9f00      	ldr	r7, [sp, #0]
 80080b4:	4605      	mov	r5, r0
 80080b6:	4639      	mov	r1, r7
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7fe fec7 	bl	8006e4c <_malloc_r>
 80080be:	b948      	cbnz	r0, 80080d4 <__smakebuf_r+0x46>
 80080c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c4:	059a      	lsls	r2, r3, #22
 80080c6:	d4ee      	bmi.n	80080a6 <__smakebuf_r+0x18>
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	f043 0302 	orr.w	r3, r3, #2
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	e7e2      	b.n	800809a <__smakebuf_r+0xc>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080de:	81a3      	strh	r3, [r4, #12]
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	6020      	str	r0, [r4, #0]
 80080e4:	b15b      	cbz	r3, 80080fe <__smakebuf_r+0x70>
 80080e6:	4630      	mov	r0, r6
 80080e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ec:	f000 f81e 	bl	800812c <_isatty_r>
 80080f0:	b128      	cbz	r0, 80080fe <__smakebuf_r+0x70>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	f043 0301 	orr.w	r3, r3, #1
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	431d      	orrs	r5, r3
 8008102:	81a5      	strh	r5, [r4, #12]
 8008104:	e7cf      	b.n	80080a6 <__smakebuf_r+0x18>
	...

08008108 <_fstat_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	2300      	movs	r3, #0
 800810c:	4d06      	ldr	r5, [pc, #24]	@ (8008128 <_fstat_r+0x20>)
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f7f9 ff75 	bl	8002004 <_fstat>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d102      	bne.n	8008124 <_fstat_r+0x1c>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b103      	cbz	r3, 8008124 <_fstat_r+0x1c>
 8008122:	6023      	str	r3, [r4, #0]
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	20000540 	.word	0x20000540

0800812c <_isatty_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	2300      	movs	r3, #0
 8008130:	4d05      	ldr	r5, [pc, #20]	@ (8008148 <_isatty_r+0x1c>)
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f9 ff73 	bl	8002022 <_isatty>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_isatty_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_isatty_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	20000540 	.word	0x20000540

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
