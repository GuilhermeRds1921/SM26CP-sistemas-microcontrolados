
ProjetoV22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009200  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009380  08009380  0000b17c  2**0
                  CONTENTS
  4 .ARM          00000000  08009380  08009380  0000b17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009380  08009380  0000b17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009380  08009380  0000a380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009384  08009384  0000a384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08009388  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001398  2000017c  08009504  0000b17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001514  08009504  0000b514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174af  00000000  00000000  0000b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bca  00000000  00000000  00022654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00026220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f89  00000000  00000000  00027660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b42d  00000000  00000000  000285e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aeb  00000000  00000000  00043a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943ac  00000000  00000000  0005d501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f18ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005380  00000000  00000000  000f18f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f6c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080092f4 	.word	0x080092f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080092f4 	.word	0x080092f4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd1e 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa2a 	bl	80005b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f86c 	bl	8000238 <MX_ADC1_Init>
  MX_CRC_Init();
 8000160:	f000 f8a8 	bl	80002b4 <MX_CRC_Init>
  MX_TIM2_Init();
 8000164:	f000 f8ba 	bl	80002dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f92c 	bl	80003c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800016c:	f000 f9a2 	bl	80004b4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f9f4 	bl	800055c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000174:	f008 fc1c 	bl	80089b0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	bf00      	nop
 800017a:	e7fd      	b.n	8000178 <main+0x2c>

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b094      	sub	sp, #80	@ 0x50
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000186:	2228      	movs	r2, #40	@ 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f009 f886 	bl	800929c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	f107 0314 	add.w	r3, r7, #20
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80001cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f003 f800 	bl	80031d8 <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001de:	f000 fa6b 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2101      	movs	r1, #1
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 fa6c 	bl	80036dc <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800020a:	f000 fa55 	bl	80006b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800020e:	2312      	movs	r3, #18
 8000210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000212:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000216:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000218:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800021c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f003 fc19 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800022c:	f000 fa44 	bl	80006b8 <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	@ 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000248:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <MX_ADC1_Init+0x74>)
 800024a:	4a19      	ldr	r2, [pc, #100]	@ (80002b0 <MX_ADC1_Init+0x78>)
 800024c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024e:	4b17      	ldr	r3, [pc, #92]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025a:	4b14      	ldr	r3, [pc, #80]	@ (80002ac <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000262:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000268:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <MX_ADC1_Init+0x74>)
 800026a:	2200      	movs	r2, #0
 800026c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000270:	2201      	movs	r2, #1
 8000272:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000276:	f000 fcbd 	bl	8000bf4 <HAL_ADC_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 fa1a 	bl	80006b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000284:	2300      	movs	r3, #0
 8000286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000288:	2301      	movs	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800028c:	2302      	movs	r3, #2
 800028e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000296:	f000 fe57 	bl	8000f48 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a0:	f000 fa0a 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000198 	.word	0x20000198
 80002b0:	40012400 	.word	0x40012400

080002b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <MX_CRC_Init+0x20>)
 80002ba:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <MX_CRC_Init+0x24>)
 80002bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	@ (80002d4 <MX_CRC_Init+0x20>)
 80002c0:	f001 f863 	bl	800138a <HAL_CRC_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80002ca:	f000 f9f5 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200001c8 	.word	0x200001c8
 80002d8:	40023000 	.word	0x40023000

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	@ 0x38
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0320 	add.w	r3, r7, #32
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030c:	4b2c      	ldr	r3, [pc, #176]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 800030e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8000314:	4b2a      	ldr	r3, [pc, #168]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 8000316:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 800031a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b28      	ldr	r3, [pc, #160]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33333;
 8000322:	4b27      	ldr	r3, [pc, #156]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 8000324:	f248 2235 	movw	r2, #33333	@ 0x8235
 8000328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032a:	4b25      	ldr	r3, [pc, #148]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000330:	4b23      	ldr	r3, [pc, #140]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 8000332:	2200      	movs	r2, #0
 8000334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000336:	4822      	ldr	r0, [pc, #136]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 8000338:	f003 fc44 	bl	8003bc4 <HAL_TIM_Base_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000342:	f000 f9b9 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800034a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000350:	4619      	mov	r1, r3
 8000352:	481b      	ldr	r0, [pc, #108]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 8000354:	f003 ff9c 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800035e:	f000 f9ab 	bl	80006b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000362:	4817      	ldr	r0, [pc, #92]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 8000364:	f003 fcd0 	bl	8003d08 <HAL_TIM_PWM_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800036e:	f000 f9a3 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000372:	2300      	movs	r3, #0
 8000374:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800037a:	f107 0320 	add.w	r3, r7, #32
 800037e:	4619      	mov	r1, r3
 8000380:	480f      	ldr	r0, [pc, #60]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 8000382:	f004 faf1 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800038c:	f000 f994 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000390:	2360      	movs	r3, #96	@ 0x60
 8000392:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 19999;
 8000394:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8000398:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_TIM2_Init+0xe4>)
 80003aa:	f003 feaf 	bl	800410c <HAL_TIM_PWM_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80003b4:	f000 f980 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3738      	adds	r7, #56	@ 0x38
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200001d0 	.word	0x200001d0

080003c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08e      	sub	sp, #56	@ 0x38
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	f107 0320 	add.w	r3, r7, #32
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003f4:	4b2d      	ldr	r3, [pc, #180]	@ (80004ac <MX_TIM3_Init+0xe8>)
 80003f6:	4a2e      	ldr	r2, [pc, #184]	@ (80004b0 <MX_TIM3_Init+0xec>)
 80003f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80003fa:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_TIM3_Init+0xe8>)
 80003fc:	2248      	movs	r2, #72	@ 0x48
 80003fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000400:	4b2a      	ldr	r3, [pc, #168]	@ (80004ac <MX_TIM3_Init+0xe8>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_TIM3_Init+0xe8>)
 8000408:	f242 720f 	movw	r2, #9999	@ 0x270f
 800040c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040e:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_TIM3_Init+0xe8>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_TIM3_Init+0xe8>)
 8000416:	2200      	movs	r2, #0
 8000418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800041a:	4824      	ldr	r0, [pc, #144]	@ (80004ac <MX_TIM3_Init+0xe8>)
 800041c:	f003 fbd2 	bl	8003bc4 <HAL_TIM_Base_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000426:	f000 f947 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800042e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000430:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000434:	4619      	mov	r1, r3
 8000436:	481d      	ldr	r0, [pc, #116]	@ (80004ac <MX_TIM3_Init+0xe8>)
 8000438:	f003 ff2a 	bl	8004290 <HAL_TIM_ConfigClockSource>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000442:	f000 f939 	bl	80006b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000446:	4819      	ldr	r0, [pc, #100]	@ (80004ac <MX_TIM3_Init+0xe8>)
 8000448:	f003 fc5e 	bl	8003d08 <HAL_TIM_PWM_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000452:	f000 f931 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000456:	2300      	movs	r3, #0
 8000458:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045a:	2300      	movs	r3, #0
 800045c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800045e:	f107 0320 	add.w	r3, r7, #32
 8000462:	4619      	mov	r1, r3
 8000464:	4811      	ldr	r0, [pc, #68]	@ (80004ac <MX_TIM3_Init+0xe8>)
 8000466:	f004 fa7f 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000470:	f000 f922 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000474:	2360      	movs	r3, #96	@ 0x60
 8000476:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 8000478:	f241 3387 	movw	r3, #4999	@ 0x1387
 800047c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	4807      	ldr	r0, [pc, #28]	@ (80004ac <MX_TIM3_Init+0xe8>)
 800048e:	f003 fe3d 	bl	800410c <HAL_TIM_PWM_ConfigChannel>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000498:	f000 f90e 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800049c:	4803      	ldr	r0, [pc, #12]	@ (80004ac <MX_TIM3_Init+0xe8>)
 800049e:	f000 fa13 	bl	80008c8 <HAL_TIM_MspPostInit>

}
 80004a2:	bf00      	nop
 80004a4:	3738      	adds	r7, #56	@ 0x38
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000218 	.word	0x20000218
 80004b0:	40000400 	.word	0x40000400

080004b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2224      	movs	r2, #36	@ 0x24
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f008 feea 	bl	800929c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_TIM4_Init+0xa0>)
 80004d2:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <MX_TIM4_Init+0xa4>)
 80004d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80004d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <MX_TIM4_Init+0xa0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_TIM4_Init+0xa0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80004e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <MX_TIM4_Init+0xa0>)
 80004e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_TIM4_Init+0xa0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004f0:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_TIM4_Init+0xa0>)
 80004f2:	2280      	movs	r2, #128	@ 0x80
 80004f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004f6:	2303      	movs	r3, #3
 80004f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000506:	230a      	movs	r3, #10
 8000508:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800050e:	2301      	movs	r3, #1
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	4619      	mov	r1, r3
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <MX_TIM4_Init+0xa0>)
 8000522:	f003 fc49 	bl	8003db8 <HAL_TIM_Encoder_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800052c:	f000 f8c4 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_TIM4_Init+0xa0>)
 800053e:	f004 fa13 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000548:	f000 f8b6 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3730      	adds	r7, #48	@ 0x30
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000260 	.word	0x20000260
 8000558:	40000800 	.word	0x40000800

0800055c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	@ (80005ac <MX_USART2_UART_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800056c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000594:	f004 fa58 	bl	8004a48 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800059e:	f000 f88b 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200002a8 	.word	0x200002a8
 80005ac:	40004400 	.word	0x40004400

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	4b30      	ldr	r3, [pc, #192]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0310 	and.w	r3, r3, #16
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a29      	ldr	r2, [pc, #164]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0320 	and.w	r3, r3, #32
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a23      	ldr	r2, [pc, #140]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_GPIO_Init+0xd8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_GPIO_Init+0xd8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a1d      	ldr	r2, [pc, #116]	@ (8000688 <MX_GPIO_Init+0xd8>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <MX_GPIO_Init+0xd8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062a:	4818      	ldr	r0, [pc, #96]	@ (800068c <MX_GPIO_Init+0xdc>)
 800062c:	f001 f84e 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000630:	2303      	movs	r3, #3
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_GPIO_Init+0xe0>)
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4812      	ldr	r0, [pc, #72]	@ (800068c <MX_GPIO_Init+0xdc>)
 8000644:	f000 febe 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000648:	2304      	movs	r3, #4
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	@ (800068c <MX_GPIO_Init+0xdc>)
 800065c:	f000 feb2 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_GPIO_Init+0xdc>)
 800067a:	f000 fea3 	bl	80013c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	40010c00 	.word	0x40010c00
 8000690:	10110000 	.word	0x10110000

08000694 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006a6:	f000 fa89 	bl	8000bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012c00 	.word	0x40012c00

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <HAL_MspInit+0x5c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000720 <HAL_MspInit+0x5c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <HAL_MspInit+0x60>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <HAL_MspInit+0x60>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000

08000728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a18      	ldr	r2, [pc, #96]	@ (80007a4 <HAL_ADC_MspInit+0x7c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d129      	bne.n	800079c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <HAL_ADC_MspInit+0x80>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a16      	ldr	r2, [pc, #88]	@ (80007a8 <HAL_ADC_MspInit+0x80>)
 800074e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <HAL_ADC_MspInit+0x80>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_ADC_MspInit+0x80>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <HAL_ADC_MspInit+0x80>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HAL_ADC_MspInit+0x80>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077c:	2303      	movs	r3, #3
 800077e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <HAL_ADC_MspInit+0x84>)
 8000788:	f000 fe1c 	bl	80013c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2012      	movs	r0, #18
 8000792:	f000 fdd0 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000796:	2012      	movs	r0, #18
 8000798:	f000 fde9 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40012400 	.word	0x40012400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010800 	.word	0x40010800

080007b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x34>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d10b      	bne.n	80007da <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_CRC_MspInit+0x38>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_CRC_MspInit+0x38>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_CRC_MspInit+0x38>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	40023000 	.word	0x40023000
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007fc:	d10c      	bne.n	8000818 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <HAL_TIM_Base_MspInit+0x58>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <HAL_TIM_Base_MspInit+0x58>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <HAL_TIM_Base_MspInit+0x58>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000816:	e010      	b.n	800083a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <HAL_TIM_Base_MspInit+0x5c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d10b      	bne.n	800083a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <HAL_TIM_Base_MspInit+0x58>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a07      	ldr	r2, [pc, #28]	@ (8000844 <HAL_TIM_Base_MspInit+0x58>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_TIM_Base_MspInit+0x58>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000
 8000848:	40000400 	.word	0x40000400

0800084c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <HAL_TIM_Encoder_MspInit+0x70>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d123      	bne.n	80008b4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	61d3      	str	r3, [r2, #28]
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800089c:	23c0      	movs	r3, #192	@ 0xc0
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <HAL_TIM_Encoder_MspInit+0x78>)
 80008b0:	f000 fd88 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40000800 	.word	0x40000800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010c00 	.word	0x40010c00

080008c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <HAL_TIM_MspPostInit+0x58>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d117      	bne.n	8000918 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_TIM_MspPostInit+0x5c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <HAL_TIM_MspPostInit+0x5c>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_TIM_MspPostInit+0x5c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2302      	movs	r3, #2
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_TIM_MspPostInit+0x60>)
 8000914:	f000 fd56 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40000400 	.word	0x40000400
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <HAL_UART_MspInit+0x88>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d12f      	bne.n	80009ac <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <HAL_UART_MspInit+0x8c>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a19      	ldr	r2, [pc, #100]	@ (80009b8 <HAL_UART_MspInit+0x8c>)
 8000952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000956:	61d3      	str	r3, [r2, #28]
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <HAL_UART_MspInit+0x8c>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <HAL_UART_MspInit+0x8c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <HAL_UART_MspInit+0x8c>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_UART_MspInit+0x8c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097c:	2304      	movs	r3, #4
 800097e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	480b      	ldr	r0, [pc, #44]	@ (80009bc <HAL_UART_MspInit+0x90>)
 8000990:	f000 fd18 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000994:	2308      	movs	r3, #8
 8000996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4619      	mov	r1, r3
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <HAL_UART_MspInit+0x90>)
 80009a8:	f000 fd0c 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010800 	.word	0x40010800

080009c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	@ 0x30
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <HAL_InitTick+0xd0>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a2d      	ldr	r2, [pc, #180]	@ (8000a90 <HAL_InitTick+0xd0>)
 80009dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a90 <HAL_InitTick+0xd0>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ee:	f107 020c 	add.w	r2, r7, #12
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 ffdf 	bl	80039bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009fe:	f002 ffc9 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8000a02:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a06:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <HAL_InitTick+0xd4>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	0c9b      	lsrs	r3, r3, #18
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <HAL_InitTick+0xdc>)
 8000a16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a20:	4a1d      	ldr	r2, [pc, #116]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a38:	4817      	ldr	r0, [pc, #92]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a3a:	f003 f8c3 	bl	8003bc4 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d11b      	bne.n	8000a84 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a4c:	4812      	ldr	r0, [pc, #72]	@ (8000a98 <HAL_InitTick+0xd8>)
 8000a4e:	f003 f909 	bl	8003c64 <HAL_TIM_Base_Start_IT>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d111      	bne.n	8000a84 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a60:	2019      	movs	r0, #25
 8000a62:	f000 fc84 	bl	800136e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d808      	bhi.n	8000a7e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	2019      	movs	r0, #25
 8000a72:	f000 fc60 	bl	8001336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_InitTick+0xe0>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	e002      	b.n	8000a84 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3730      	adds	r7, #48	@ 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	200002f0 	.word	0x200002f0
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <ADC1_2_IRQHandler+0x10>)
 8000b02:	f000 f94f 	bl	8000da4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000198 	.word	0x20000198

08000b10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b16:	f000 ff16 	bl	8001946 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20001004 	.word	0x20001004

08000b24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <TIM1_UP_IRQHandler+0x10>)
 8000b2a:	f003 f9e7 	bl	8003efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200002f0 	.word	0x200002f0

08000b38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff fff8 	bl	8000b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480b      	ldr	r0, [pc, #44]	@ (8000b78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b4a:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b60:	4c09      	ldr	r4, [pc, #36]	@ (8000b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f008 fb9d 	bl	80092ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff faeb 	bl	800014c <main>
  bx lr
 8000b76:	4770      	bx	lr
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000b80:	08009388 	.word	0x08009388
  ldr r2, =_sbss
 8000b84:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000b88:	20001514 	.word	0x20001514

08000b8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <CAN1_RX1_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_Init+0x28>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <HAL_Init+0x28>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 fbbd 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f7ff ff0a 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fd8a 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a03      	ldr	r2, [pc, #12]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000338 	.word	0x20000338

08000be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	@ (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000338 	.word	0x20000338

08000bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0be      	b.n	8000d94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fd78 	bl	8000728 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fa7d 	bl	8001138 <ADC_ConversionStop_Disable>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8099 	bne.w	8000d82 <HAL_ADC_Init+0x18e>
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8095 	bne.w	8000d82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c60:	f023 0302 	bic.w	r3, r3, #2
 8000c64:	f043 0202 	orr.w	r2, r3, #2
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b1b      	ldrb	r3, [r3, #12]
 8000c7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c8c:	d003      	beq.n	8000c96 <HAL_ADC_Init+0xa2>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d102      	bne.n	8000c9c <HAL_ADC_Init+0xa8>
 8000c96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c9a:	e000      	b.n	8000c9e <HAL_ADC_Init+0xaa>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7d1b      	ldrb	r3, [r3, #20]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d119      	bne.n	8000ce0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7b1b      	ldrb	r3, [r3, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	035a      	lsls	r2, r3, #13
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e00b      	b.n	8000ce0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ccc:	f043 0220 	orr.w	r2, r3, #32
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	f043 0201 	orr.w	r2, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <HAL_ADC_Init+0x1a8>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d10:	d003      	beq.n	8000d1a <HAL_ADC_Init+0x126>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d104      	bne.n	8000d24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	051b      	lsls	r3, r3, #20
 8000d22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_ADC_Init+0x1ac>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d10b      	bne.n	8000d60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d52:	f023 0303 	bic.w	r3, r3, #3
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5e:	e018      	b.n	8000d92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d64:	f023 0312 	bic.w	r3, r3, #18
 8000d68:	f043 0210 	orr.w	r2, r3, #16
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	f043 0201 	orr.w	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d80:	e007      	b.n	8000d92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000da0:	ff1f0efe 	.word	0xff1f0efe

08000da4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d03e      	beq.n	8000e44 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d039      	beq.n	8000e44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000df2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000df6:	d11d      	bne.n	8000e34 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d119      	bne.n	8000e34 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0220 	bic.w	r2, r2, #32
 8000e0e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f874 	bl	8000f22 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f06f 0212 	mvn.w	r2, #18
 8000e42:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d04d      	beq.n	8000eea <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d048      	beq.n	8000eea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d105      	bne.n	8000e70 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000e7a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000e7e:	d012      	beq.n	8000ea6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d125      	bne.n	8000eda <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e98:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e9c:	d11d      	bne.n	8000eda <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d119      	bne.n	8000eda <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eb4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed2:	f043 0201 	orr.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f96d 	bl	80011ba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f06f 020c 	mvn.w	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d012      	beq.n	8000f1a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00d      	beq.n	8000f1a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f812 	bl	8000f34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f06f 0201 	mvn.w	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x20>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e0dc      	b.n	8001122 <HAL_ADC_ConfigChannel+0x1da>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d81c      	bhi.n	8000fb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3b05      	subs	r3, #5
 8000f8a:	221f      	movs	r2, #31
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4019      	ands	r1, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b05      	subs	r3, #5
 8000fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fb0:	e03c      	b.n	800102c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	d81c      	bhi.n	8000ff4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b23      	subs	r3, #35	@ 0x23
 8000fcc:	221f      	movs	r2, #31
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4019      	ands	r1, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3b23      	subs	r3, #35	@ 0x23
 8000fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ff2:	e01b      	b.n	800102c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	3b41      	subs	r3, #65	@ 0x41
 8001006:	221f      	movs	r2, #31
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	4019      	ands	r1, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b41      	subs	r3, #65	@ 0x41
 8001020:	fa00 f203 	lsl.w	r2, r0, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b09      	cmp	r3, #9
 8001032:	d91c      	bls.n	800106e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68d9      	ldr	r1, [r3, #12]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	3b1e      	subs	r3, #30
 8001046:	2207      	movs	r2, #7
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	4019      	ands	r1, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	3b1e      	subs	r3, #30
 8001060:	fa00 f203 	lsl.w	r2, r0, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	e019      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6919      	ldr	r1, [r3, #16]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	2207      	movs	r2, #7
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4019      	ands	r1, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6898      	ldr	r0, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	fa00 f203 	lsl.w	r2, r0, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b10      	cmp	r3, #16
 80010a8:	d003      	beq.n	80010b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ae:	2b11      	cmp	r3, #17
 80010b0:	d132      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <HAL_ADC_ConfigChannel+0x1e4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d125      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d126      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80010d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d11a      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <HAL_ADC_ConfigChannel+0x1e8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a13      	ldr	r2, [pc, #76]	@ (8001134 <HAL_ADC_ConfigChannel+0x1ec>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	0c9a      	lsrs	r2, r3, #18
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f8:	e002      	b.n	8001100 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f9      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x1b2>
 8001106:	e007      	b.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110c:	f043 0220 	orr.w	r2, r3, #32
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40012400 	.word	0x40012400
 8001130:	20000000 	.word	0x20000000
 8001134:	431bde83 	.word	0x431bde83

08001138 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d12e      	bne.n	80011b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001162:	f7ff fd3d 	bl	8000be0 <HAL_GetTick>
 8001166:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001168:	e01b      	b.n	80011a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800116a:	f7ff fd39 	bl	8000be0 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d914      	bls.n	80011a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b01      	cmp	r3, #1
 8001184:	d10d      	bne.n	80011a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118a:	f043 0210 	orr.w	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e007      	b.n	80011b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d0dc      	beq.n	800116a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4906      	ldr	r1, [pc, #24]	@ (8001264 <__NVIC_EnableIRQ+0x34>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff4f 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff64 	bl	8001214 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ffb2 	bl	80012bc <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff81 	bl	8001268 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff57 	bl	8001230 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e00e      	b.n	80013ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	795b      	ldrb	r3, [r3, #5]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff f9ff 	bl	80007b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b08b      	sub	sp, #44	@ 0x2c
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	e169      	b.n	80016ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d8:	2201      	movs	r2, #1
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 8158 	bne.w	80016a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a9a      	ldr	r2, [pc, #616]	@ (8001664 <HAL_GPIO_Init+0x2a0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d05e      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001400:	4a98      	ldr	r2, [pc, #608]	@ (8001664 <HAL_GPIO_Init+0x2a0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d875      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001406:	4a98      	ldr	r2, [pc, #608]	@ (8001668 <HAL_GPIO_Init+0x2a4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d058      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 800140c:	4a96      	ldr	r2, [pc, #600]	@ (8001668 <HAL_GPIO_Init+0x2a4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d86f      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001412:	4a96      	ldr	r2, [pc, #600]	@ (800166c <HAL_GPIO_Init+0x2a8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d052      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001418:	4a94      	ldr	r2, [pc, #592]	@ (800166c <HAL_GPIO_Init+0x2a8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d869      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800141e:	4a94      	ldr	r2, [pc, #592]	@ (8001670 <HAL_GPIO_Init+0x2ac>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d04c      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001424:	4a92      	ldr	r2, [pc, #584]	@ (8001670 <HAL_GPIO_Init+0x2ac>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d863      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800142a:	4a92      	ldr	r2, [pc, #584]	@ (8001674 <HAL_GPIO_Init+0x2b0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d046      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001430:	4a90      	ldr	r2, [pc, #576]	@ (8001674 <HAL_GPIO_Init+0x2b0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d85d      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001436:	2b12      	cmp	r3, #18
 8001438:	d82a      	bhi.n	8001490 <HAL_GPIO_Init+0xcc>
 800143a:	2b12      	cmp	r3, #18
 800143c:	d859      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800143e:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <HAL_GPIO_Init+0x80>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	080014bf 	.word	0x080014bf
 8001448:	08001499 	.word	0x08001499
 800144c:	080014ab 	.word	0x080014ab
 8001450:	080014ed 	.word	0x080014ed
 8001454:	080014f3 	.word	0x080014f3
 8001458:	080014f3 	.word	0x080014f3
 800145c:	080014f3 	.word	0x080014f3
 8001460:	080014f3 	.word	0x080014f3
 8001464:	080014f3 	.word	0x080014f3
 8001468:	080014f3 	.word	0x080014f3
 800146c:	080014f3 	.word	0x080014f3
 8001470:	080014f3 	.word	0x080014f3
 8001474:	080014f3 	.word	0x080014f3
 8001478:	080014f3 	.word	0x080014f3
 800147c:	080014f3 	.word	0x080014f3
 8001480:	080014f3 	.word	0x080014f3
 8001484:	080014f3 	.word	0x080014f3
 8001488:	080014a1 	.word	0x080014a1
 800148c:	080014b5 	.word	0x080014b5
 8001490:	4a79      	ldr	r2, [pc, #484]	@ (8001678 <HAL_GPIO_Init+0x2b4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001496:	e02c      	b.n	80014f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e029      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	3304      	adds	r3, #4
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e024      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	3308      	adds	r3, #8
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e01f      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	330c      	adds	r3, #12
 80014ba:	623b      	str	r3, [r7, #32]
          break;
 80014bc:	e01a      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014c6:	2304      	movs	r3, #4
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e013      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d4:	2308      	movs	r3, #8
 80014d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	611a      	str	r2, [r3, #16]
          break;
 80014de:	e009      	b.n	80014f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	615a      	str	r2, [r3, #20]
          break;
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          break;
 80014f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	d801      	bhi.n	80014fe <HAL_GPIO_Init+0x13a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	e001      	b.n	8001502 <HAL_GPIO_Init+0x13e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3304      	adds	r3, #4
 8001502:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2bff      	cmp	r3, #255	@ 0xff
 8001508:	d802      	bhi.n	8001510 <HAL_GPIO_Init+0x14c>
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x152>
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	3b08      	subs	r3, #8
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	210f      	movs	r1, #15
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	6a39      	ldr	r1, [r7, #32]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	431a      	orrs	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80b1 	beq.w	80016a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001544:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <HAL_GPIO_Init+0x2b8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <HAL_GPIO_Init+0x2b8>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x2b8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800155c:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <HAL_GPIO_Init+0x2bc>)
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a40      	ldr	r2, [pc, #256]	@ (8001684 <HAL_GPIO_Init+0x2c0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d013      	beq.n	80015b0 <HAL_GPIO_Init+0x1ec>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3f      	ldr	r2, [pc, #252]	@ (8001688 <HAL_GPIO_Init+0x2c4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1e8>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a3e      	ldr	r2, [pc, #248]	@ (800168c <HAL_GPIO_Init+0x2c8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1e4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a3d      	ldr	r2, [pc, #244]	@ (8001690 <HAL_GPIO_Init+0x2cc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1e0>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e006      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015a4:	2304      	movs	r3, #4
 80015a6:	e004      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e002      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015b0:	2300      	movs	r3, #0
 80015b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b4:	f002 0203 	and.w	r2, r2, #3
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	4093      	lsls	r3, r2
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015c2:	492f      	ldr	r1, [pc, #188]	@ (8001680 <HAL_GPIO_Init+0x2bc>)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	492c      	ldr	r1, [pc, #176]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4928      	ldr	r1, [pc, #160]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001604:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4922      	ldr	r1, [pc, #136]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001612:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	43db      	mvns	r3, r3
 800161a:	491e      	ldr	r1, [pc, #120]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800161c:	4013      	ands	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4918      	ldr	r1, [pc, #96]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	43db      	mvns	r3, r3
 8001642:	4914      	ldr	r1, [pc, #80]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001644:	4013      	ands	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d021      	beq.n	8001698 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	490e      	ldr	r1, [pc, #56]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e021      	b.n	80016a6 <HAL_GPIO_Init+0x2e2>
 8001662:	bf00      	nop
 8001664:	10320000 	.word	0x10320000
 8001668:	10310000 	.word	0x10310000
 800166c:	10220000 	.word	0x10220000
 8001670:	10210000 	.word	0x10210000
 8001674:	10120000 	.word	0x10120000
 8001678:	10110000 	.word	0x10110000
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	40010800 	.word	0x40010800
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40011000 	.word	0x40011000
 8001690:	40011400 	.word	0x40011400
 8001694:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_GPIO_Init+0x304>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	43db      	mvns	r3, r3
 80016a0:	4909      	ldr	r1, [pc, #36]	@ (80016c8 <HAL_GPIO_Init+0x304>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	3301      	adds	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f47f ae8e 	bne.w	80013d8 <HAL_GPIO_Init+0x14>
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	372c      	adds	r7, #44	@ 0x2c
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	611a      	str	r2, [r3, #16]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	b08b      	sub	sp, #44	@ 0x2c
 8001700:	af06      	add	r7, sp, #24
 8001702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0f1      	b.n	80018f2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f007 fb10 	bl	8008d48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fa8b 	bl	8004c50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	687e      	ldr	r6, [r7, #4]
 8001742:	466d      	mov	r5, sp
 8001744:	f106 0410 	add.w	r4, r6, #16
 8001748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	1d33      	adds	r3, r6, #4
 8001752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f003 fa55 	bl	8004c04 <USB_CoreInit>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0c2      	b.n	80018f2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fa86 	bl	8004c84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e040      	b.n	8001800 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3301      	adds	r3, #1
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3303      	adds	r3, #3
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3338      	adds	r3, #56	@ 0x38
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	333c      	adds	r3, #60	@ 0x3c
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	3340      	adds	r3, #64	@ 0x40
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	3301      	adds	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3b9      	bcc.n	800177e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e044      	b.n	800189a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	3301      	adds	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3b5      	bcc.n	8001810 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	687e      	ldr	r6, [r7, #4]
 80018ac:	466d      	mov	r5, sp
 80018ae:	f106 0410 	add.w	r4, r6, #16
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	1d33      	adds	r3, r6, #4
 80018bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f003 f9ec 	bl	8004c9c <USB_DevInit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00d      	b.n	80018f2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 fc6d 	bl	80071ca <USB_DevDisconnect>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_PCD_Start+0x16>
 800190c:	2302      	movs	r3, #2
 800190e:	e016      	b.n	800193e <HAL_PCD_Start+0x44>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 f981 	bl	8004c24 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001922:	2101      	movs	r1, #1
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f007 fc82 	bl	800922e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f005 fc41 	bl	80071b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b088      	sub	sp, #32
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fc43 	bl	80071de <USB_ReadInterrupts>
 8001958:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fb1b 	bl	8001fa0 <PCD_EP_ISR_Handler>

    return;
 800196a:	e119      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001972:	2b00      	cmp	r3, #0
 8001974:	d013      	beq.n	800199e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001988:	b292      	uxth	r2, r2
 800198a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f007 fa55 	bl	8008e3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001994:	2100      	movs	r1, #0
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f905 	bl	8001ba6 <HAL_PCD_SetAddress>

    return;
 800199c:	e100      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019c0:	e0ee      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019de:	b292      	uxth	r2, r2
 80019e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019e4:	e0dc      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d027      	beq.n	8001a40 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0204 	bic.w	r2, r2, #4
 8001a02:	b292      	uxth	r2, r2
 8001a04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0208 	bic.w	r2, r2, #8
 8001a1a:	b292      	uxth	r2, r2
 8001a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f007 fa45 	bl	8008eb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a3e:	e0af      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8083 	beq.w	8001b52 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	77fb      	strb	r3, [r7, #31]
 8001a50:	e010      	b.n	8001a74 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	7ffb      	ldrb	r3, [r7, #31]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	441a      	add	r2, r3
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
 8001a60:	8812      	ldrh	r2, [r2, #0]
 8001a62:	b292      	uxth	r2, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	3320      	adds	r3, #32
 8001a68:	443b      	add	r3, r7
 8001a6a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
 8001a70:	3301      	adds	r3, #1
 8001a72:	77fb      	strb	r3, [r7, #31]
 8001a74:	7ffb      	ldrb	r3, [r7, #31]
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	d9eb      	bls.n	8001a52 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001aaa:	bf00      	nop
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f6      	beq.n	8001aac <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	77fb      	strb	r3, [r7, #31]
 8001ada:	e00f      	b.n	8001afc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001adc:	7ffb      	ldrb	r3, [r7, #31]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	7ffa      	ldrb	r2, [r7, #31]
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	440a      	add	r2, r1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	3320      	adds	r3, #32
 8001aee:	443b      	add	r3, r7
 8001af0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001af4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001af6:	7ffb      	ldrb	r3, [r7, #31]
 8001af8:	3301      	adds	r3, #1
 8001afa:	77fb      	strb	r3, [r7, #31]
 8001afc:	7ffb      	ldrb	r3, [r7, #31]
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	d9ec      	bls.n	8001adc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0208 	orr.w	r2, r2, #8
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0204 	orr.w	r2, r2, #4
 8001b44:	b292      	uxth	r2, r2
 8001b46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f007 f996 	bl	8008e7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b50:	e026      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00f      	beq.n	8001b7c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f007 f954 	bl	8008e22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b7a:	e011      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b9e:	bf00      	nop
  }
}
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_PCD_SetAddress+0x1a>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e013      	b.n	8001be8 <HAL_PCD_SetAddress+0x42>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f005 fad9 	bl	8007190 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	70fb      	strb	r3, [r7, #3]
 8001c02:	460b      	mov	r3, r1
 8001c04:	803b      	strh	r3, [r7, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da0e      	bge.n	8001c34 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	705a      	strb	r2, [r3, #1]
 8001c32:	e00e      	b.n	8001c52 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 0207 	and.w	r2, r3, #7
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c5e:	883a      	ldrh	r2, [r7, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	78ba      	ldrb	r2, [r7, #2]
 8001c68:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c6a:	78bb      	ldrb	r3, [r7, #2]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d102      	bne.n	8001c76 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_PCD_EP_Open+0x94>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e00e      	b.n	8001ca2 <HAL_PCD_EP_Open+0xb2>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f822 	bl	8004cdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da0e      	bge.n	8001cdc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	705a      	strb	r2, [r3, #1]
 8001cda:	e00e      	b.n	8001cfa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 0207 	and.w	r2, r3, #7
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_PCD_EP_Close+0x6a>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e00e      	b.n	8001d32 <HAL_PCD_EP_Close+0x88>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 fb9a 	bl	800545c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	460b      	mov	r3, r1
 8001d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	f003 0207 	and.w	r2, r3, #7
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6979      	ldr	r1, [r7, #20]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fd51 	bl	8005834 <USB_EPStartXfer>

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 0207 	and.w	r2, r3, #7
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2201      	movs	r2, #1
 8001e14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e16:	7afb      	ldrb	r3, [r7, #11]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fd03 	bl	8005834 <USB_EPStartXfer>

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 0207 	and.w	r2, r3, #7
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d901      	bls.n	8001e56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e04c      	b.n	8001ef0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da0e      	bge.n	8001e7c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00c      	b.n	8001e96 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_PCD_EP_SetStall+0x7e>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e01c      	b.n	8001ef0 <HAL_PCD_EP_SetStall+0xb8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68f9      	ldr	r1, [r7, #12]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 f866 	bl	8006f96 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d108      	bne.n	8001ee6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f005 f98b 	bl	80071fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d901      	bls.n	8001f16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e040      	b.n	8001f98 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da0e      	bge.n	8001f3c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	705a      	strb	r2, [r3, #1]
 8001f3a:	e00e      	b.n	8001f5a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	f003 0207 	and.w	r2, r3, #7
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_PCD_EP_ClrStall+0x82>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e00e      	b.n	8001f98 <HAL_PCD_EP_ClrStall+0xa0>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68f9      	ldr	r1, [r7, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 f854 	bl	8007036 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b096      	sub	sp, #88	@ 0x58
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fa8:	e3be      	b.n	8002728 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001fc4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 8178 	bne.w	80022be <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d151      	bne.n	800207e <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fea:	81fb      	strh	r3, [r7, #14]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3328      	adds	r3, #40	@ 0x28
 8002002:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	3302      	adds	r3, #2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800202c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	441a      	add	r2, r3
 800203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800203e:	2100      	movs	r1, #0
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f006 fed4 	bl	8008dee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 836a 	beq.w	8002728 <PCD_EP_ISR_Handler+0x788>
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 8365 	bne.w	8002728 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800206a:	b2da      	uxtb	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800207c:	e354      	b.n	8002728 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002084:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002090:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002098:	2b00      	cmp	r3, #0
 800209a:	d034      	beq.n	8002106 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	3306      	adds	r3, #6
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80020d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f005 f8de 	bl	800729c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020ec:	4013      	ands	r3, r2
 80020ee:	823b      	strh	r3, [r7, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	8a3a      	ldrh	r2, [r7, #16]
 80020f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020fa:	b292      	uxth	r2, r2
 80020fc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f006 fe48 	bl	8008d94 <HAL_PCD_SetupStageCallback>
 8002104:	e310      	b.n	8002728 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002106:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800210a:	2b00      	cmp	r3, #0
 800210c:	f280 830c 	bge.w	8002728 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29a      	uxth	r2, r3
 8002118:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800211c:	4013      	ands	r3, r2
 800211e:	83fb      	strh	r3, [r7, #30]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	8bfa      	ldrh	r2, [r7, #30]
 8002126:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800212a:	b292      	uxth	r2, r2
 800212c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002136:	b29b      	uxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	3306      	adds	r3, #6
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4413      	add	r3, r2
 800214c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002158:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800215a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d019      	beq.n	8002196 <PCD_EP_ISR_Handler+0x1f6>
 8002162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002170:	6959      	ldr	r1, [r3, #20]
 8002172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002174:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002178:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800217a:	b29b      	uxth	r3, r3
 800217c:	f005 f88e 	bl	800729c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	441a      	add	r2, r3
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800218e:	2100      	movs	r1, #0
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f006 fe11 	bl	8008db8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80021a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 82bd 	bne.w	8002728 <PCD_EP_ISR_Handler+0x788>
 80021ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021ba:	f000 82b5 	beq.w	8002728 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4413      	add	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80021f4:	d91d      	bls.n	8002232 <PCD_EP_ISR_Handler+0x292>
 80021f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80021fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <PCD_EP_ISR_Handler+0x270>
 800220a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220c:	3b01      	subs	r3, #1
 800220e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29a      	uxth	r2, r3
 8002216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002218:	b29b      	uxth	r3, r3
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	b29b      	uxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222a:	b29a      	uxth	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	801a      	strh	r2, [r3, #0]
 8002230:	e026      	b.n	8002280 <PCD_EP_ISR_Handler+0x2e0>
 8002232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10a      	bne.n	8002250 <PCD_EP_ISR_Handler+0x2b0>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002248:	b29a      	uxth	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	801a      	strh	r2, [r3, #0]
 800224e:	e017      	b.n	8002280 <PCD_EP_ISR_Handler+0x2e0>
 8002250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	647b      	str	r3, [r7, #68]	@ 0x44
 8002258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <PCD_EP_ISR_Handler+0x2ca>
 8002264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002266:	3301      	adds	r3, #1
 8002268:	647b      	str	r3, [r7, #68]	@ 0x44
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29a      	uxth	r2, r3
 8002270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002272:	b29b      	uxth	r3, r3
 8002274:	029b      	lsls	r3, r3, #10
 8002276:	b29b      	uxth	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b29a      	uxth	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800228c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002290:	827b      	strh	r3, [r7, #18]
 8002292:	8a7b      	ldrh	r3, [r7, #18]
 8002294:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002298:	827b      	strh	r3, [r7, #18]
 800229a:	8a7b      	ldrh	r3, [r7, #18]
 800229c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022a0:	827b      	strh	r3, [r7, #18]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	8a7b      	ldrh	r3, [r7, #18]
 80022a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	8013      	strh	r3, [r2, #0]
 80022bc:	e234      	b.n	8002728 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f280 80fc 	bge.w	80024d4 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80022f2:	4013      	ands	r3, r2
 80022f4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800230a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800230e:	b292      	uxth	r2, r2
 8002310:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002312:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232a:	7b1b      	ldrb	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d125      	bne.n	800237c <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	3306      	adds	r3, #6
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002358:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800235c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8092 	beq.w	800248a <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800236c:	6959      	ldr	r1, [r3, #20]
 800236e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002370:	88da      	ldrh	r2, [r3, #6]
 8002372:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002376:	f004 ff91 	bl	800729c <USB_ReadPMA>
 800237a:	e086      	b.n	800248a <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800237c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237e:	78db      	ldrb	r3, [r3, #3]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d10a      	bne.n	800239a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002384:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002388:	461a      	mov	r2, r3
 800238a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f9d9 	bl	8002744 <HAL_PCD_EP_DB_Receive>
 8002392:	4603      	mov	r3, r0
 8002394:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002398:	e077      	b.n	800248a <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023da:	b29b      	uxth	r3, r3
 80023dc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d024      	beq.n	8002442 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	3302      	adds	r3, #2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002420:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002424:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002428:	2b00      	cmp	r3, #0
 800242a:	d02e      	beq.n	800248a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002432:	6959      	ldr	r1, [r3, #20]
 8002434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002436:	891a      	ldrh	r2, [r3, #8]
 8002438:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800243c:	f004 ff2e 	bl	800729c <USB_ReadPMA>
 8002440:	e023      	b.n	800248a <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	3306      	adds	r3, #6
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800246e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800247c:	6959      	ldr	r1, [r3, #20]
 800247e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002480:	895a      	ldrh	r2, [r3, #10]
 8002482:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002486:	f004 ff09 	bl	800729c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800248a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002492:	441a      	add	r2, r3
 8002494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002496:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024a0:	441a      	add	r2, r3
 80024a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <PCD_EP_ISR_Handler+0x51a>
 80024ae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80024b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d206      	bcs.n	80024c8 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f006 fc79 	bl	8008db8 <HAL_PCD_DataOutStageCallback>
 80024c6:	e005      	b.n	80024d4 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 f9b0 	bl	8005834 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8123 	beq.w	8002728 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80024e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800250c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002510:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	441a      	add	r2, r3
 8002522:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252e:	b29b      	uxth	r3, r3
 8002530:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002534:	78db      	ldrb	r3, [r3, #3]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 80a2 	bne.w	8002680 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 800253c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002544:	7b1b      	ldrb	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8093 	beq.w	8002672 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800254c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d046      	beq.n	80025e6 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d126      	bne.n	80025ae <PCD_EP_ISR_Handler+0x60e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	4413      	add	r3, r2
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
 8002578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	011a      	lsls	r2, r3, #4
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	4413      	add	r3, r2
 8002582:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002592:	b29a      	uxth	r2, r3
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e061      	b.n	8002672 <PCD_EP_ISR_Handler+0x6d2>
 80025ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d15d      	bne.n	8002672 <PCD_EP_ISR_Handler+0x6d2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ca:	4413      	add	r3, r2
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	011a      	lsls	r2, r3, #4
 80025d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d6:	4413      	add	r3, r2
 80025d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	2200      	movs	r2, #0
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	e045      	b.n	8002672 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d126      	bne.n	8002642 <PCD_EP_ISR_Handler+0x6a2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002608:	4413      	add	r3, r2
 800260a:	637b      	str	r3, [r7, #52]	@ 0x34
 800260c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	011a      	lsls	r2, r3, #4
 8002612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002614:	4413      	add	r3, r2
 8002616:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800261a:	633b      	str	r3, [r7, #48]	@ 0x30
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002626:	b29a      	uxth	r2, r3
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	801a      	strh	r2, [r3, #0]
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263a:	b29a      	uxth	r2, r3
 800263c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263e:	801a      	strh	r2, [r3, #0]
 8002640:	e017      	b.n	8002672 <PCD_EP_ISR_Handler+0x6d2>
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d113      	bne.n	8002672 <PCD_EP_ISR_Handler+0x6d2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002658:	4413      	add	r3, r2
 800265a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800265c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	011a      	lsls	r2, r3, #4
 8002662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002664:	4413      	add	r3, r2
 8002666:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	2200      	movs	r2, #0
 8002670:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f006 fbb8 	bl	8008dee <HAL_PCD_DataInStageCallback>
 800267e:	e053      	b.n	8002728 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002680:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d146      	bne.n	800271a <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	3302      	adds	r3, #2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80026b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d907      	bls.n	80026d4 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 80026c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026cc:	1ad2      	subs	r2, r2, r3
 80026ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d0:	619a      	str	r2, [r3, #24]
 80026d2:	e002      	b.n	80026da <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 80026d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f006 fb80 	bl	8008dee <HAL_PCD_DataInStageCallback>
 80026ee:	e01b      	b.n	8002728 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80026f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026f8:	441a      	add	r2, r3
 80026fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80026fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002706:	441a      	add	r2, r3
 8002708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800270a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002712:	4618      	mov	r0, r3
 8002714:	f003 f88e 	bl	8005834 <USB_EPStartXfer>
 8002718:	e006      	b.n	8002728 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800271a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800271e:	461a      	mov	r2, r3
 8002720:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f91b 	bl	800295e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002730:	b29b      	uxth	r3, r3
 8002732:	b21b      	sxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	f6ff ac38 	blt.w	8001faa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3758      	adds	r7, #88	@ 0x58
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d07e      	beq.n	800285a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	3302      	adds	r3, #2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002784:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	8b7b      	ldrh	r3, [r7, #26]
 800278c:	429a      	cmp	r2, r3
 800278e:	d306      	bcc.n	800279e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	8b7b      	ldrh	r3, [r7, #26]
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	619a      	str	r2, [r3, #24]
 800279c:	e002      	b.n	80027a4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d123      	bne.n	80027f4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c6:	833b      	strh	r3, [r7, #24]
 80027c8:	8b3b      	ldrh	r3, [r7, #24]
 80027ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027ce:	833b      	strh	r3, [r7, #24]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	8b3b      	ldrh	r3, [r7, #24]
 80027e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01f      	beq.n	800283e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002818:	82fb      	strh	r3, [r7, #22]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	441a      	add	r2, r3
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800282e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002836:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800283a:	b29b      	uxth	r3, r3
 800283c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800283e:	8b7b      	ldrh	r3, [r7, #26]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8087 	beq.w	8002954 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6959      	ldr	r1, [r3, #20]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	891a      	ldrh	r2, [r3, #8]
 8002852:	8b7b      	ldrh	r3, [r7, #26]
 8002854:	f004 fd22 	bl	800729c <USB_ReadPMA>
 8002858:	e07c      	b.n	8002954 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	3306      	adds	r3, #6
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002882:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	8b7b      	ldrh	r3, [r7, #26]
 800288a:	429a      	cmp	r2, r3
 800288c:	d306      	bcc.n	800289c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	8b7b      	ldrh	r3, [r7, #26]
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	619a      	str	r2, [r3, #24]
 800289a:	e002      	b.n	80028a2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d123      	bne.n	80028f2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c4:	83fb      	strh	r3, [r7, #30]
 80028c6:	8bfb      	ldrh	r3, [r7, #30]
 80028c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028cc:	83fb      	strh	r3, [r7, #30]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	441a      	add	r2, r3
 80028dc:	8bfb      	ldrh	r3, [r7, #30]
 80028de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11f      	bne.n	800293c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002916:	83bb      	strh	r3, [r7, #28]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	8bbb      	ldrh	r3, [r7, #28]
 8002928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800292c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002934:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002938:	b29b      	uxth	r3, r3
 800293a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800293c:	8b7b      	ldrh	r3, [r7, #26]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	6959      	ldr	r1, [r3, #20]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	895a      	ldrh	r2, [r3, #10]
 800294e:	8b7b      	ldrh	r3, [r7, #26]
 8002950:	f004 fca4 	bl	800729c <USB_ReadPMA>
    }
  }

  return count;
 8002954:	8b7b      	ldrh	r3, [r7, #26]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b0a4      	sub	sp, #144	@ 0x90
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	4613      	mov	r3, r2
 800296a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 81dd 	beq.w	8002d32 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	3302      	adds	r3, #2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d907      	bls.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029b8:	1ad2      	subs	r2, r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	619a      	str	r2, [r3, #24]
 80029be:	e002      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80b9 	bne.w	8002b42 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d126      	bne.n	8002a26 <HAL_PCD_EP_DB_Transmit+0xc8>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ec:	4413      	add	r3, r2
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	011a      	lsls	r2, r3, #4
 80029f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f8:	4413      	add	r3, r2
 80029fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e01a      	b.n	8002a5c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d116      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a42:	4413      	add	r3, r2
 8002a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	011a      	lsls	r2, r3, #4
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4e:	4413      	add	r3, r2
 8002a50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	2200      	movs	r2, #0
 8002a5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	785b      	ldrb	r3, [r3, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d126      	bne.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	011a      	lsls	r2, r3, #4
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	801a      	strh	r2, [r3, #0]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	e017      	b.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d113      	bne.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	4413      	add	r3, r2
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	011a      	lsls	r2, r3, #4
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f006 f97d 	bl	8008dee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 82fc 	beq.w	80030f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b1a:	82fb      	strh	r3, [r7, #22]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	8afb      	ldrh	r3, [r7, #22]
 8002b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	8013      	strh	r3, [r2, #0]
 8002b40:	e2da      	b.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b66:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	441a      	add	r2, r3
 8002b78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	f040 82ae 	bne.w	80030f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ba4:	441a      	add	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bb2:	441a      	add	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d30b      	bcc.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bd4:	1ad2      	subs	r2, r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	621a      	str	r2, [r3, #32]
 8002bda:	e017      	b.n	8002c0c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002be4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002bf4:	e00a      	b.n	8002c0c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d165      	bne.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x382>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c28:	4413      	add	r3, r2
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	011a      	lsls	r2, r3, #4
 8002c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c34:	4413      	add	r3, r2
 8002c36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c52:	d91d      	bls.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x310>
 8002c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	029b      	lsls	r3, r3, #10
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8c:	801a      	strh	r2, [r3, #0]
 8002c8e:	e044      	b.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x350>
 8002c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	801a      	strh	r2, [r3, #0]
 8002cac:	e035      	b.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	e01c      	b.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d118      	bne.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfc:	4413      	add	r3, r2
 8002cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	011a      	lsls	r2, r3, #4
 8002d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d08:	4413      	add	r3, r2
 8002d0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d18:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6959      	ldr	r1, [r3, #20]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	891a      	ldrh	r2, [r3, #8]
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f004 fa71 	bl	8007212 <USB_WritePMA>
 8002d30:	e1e2      	b.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	3306      	adds	r3, #6
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d307      	bcc.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d72:	1ad2      	subs	r2, r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	619a      	str	r2, [r3, #24]
 8002d78:	e002      	b.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 80c0 	bne.w	8002f0a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d126      	bne.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x482>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002da6:	4413      	add	r3, r2
 8002da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	011a      	lsls	r2, r3, #4
 8002db0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002db2:	4413      	add	r3, r2
 8002db4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002db8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e01a      	b.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d116      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dfc:	4413      	add	r3, r2
 8002dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e12:	2200      	movs	r2, #0
 8002e14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d12b      	bne.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e38:	4413      	add	r3, r2
 8002e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	011a      	lsls	r2, r3, #4
 8002e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e44:	4413      	add	r3, r2
 8002e46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e78:	801a      	strh	r2, [r3, #0]
 8002e7a:	e017      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	785b      	ldrb	r3, [r3, #1]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d113      	bne.n	8002eac <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e92:	4413      	add	r3, r2
 8002e94:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	011a      	lsls	r2, r3, #4
 8002e9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ea4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f005 ff9b 	bl	8008dee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 811a 	bne.w	80030f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ede:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8013      	strh	r3, [r2, #0]
 8002f08:	e0f6      	b.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d121      	bne.n	8002f58 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	441a      	add	r2, r3
 8002f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	f040 80ca 	bne.w	80030f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f6c:	441a      	add	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f7a:	441a      	add	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d30b      	bcc.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f9c:	1ad2      	subs	r2, r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	621a      	str	r2, [r3, #32]
 8002fa2:	e017      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d108      	bne.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002fac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fbc:	e00a      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d165      	bne.n	80030ae <HAL_PCD_EP_DB_Transmit+0x750>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff6:	4413      	add	r3, r2
 8002ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	011a      	lsls	r2, r3, #4
 8003000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003002:	4413      	add	r3, r2
 8003004:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003008:	65bb      	str	r3, [r7, #88]	@ 0x58
 800300a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003014:	b29a      	uxth	r2, r3
 8003016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800301e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003020:	d91d      	bls.n	800305e <HAL_PCD_EP_DB_Transmit+0x700>
 8003022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003038:	3b01      	subs	r3, #1
 800303a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800303c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29a      	uxth	r2, r3
 8003042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003044:	b29b      	uxth	r3, r3
 8003046:	029b      	lsls	r3, r3, #10
 8003048:	b29b      	uxth	r3, r3
 800304a:	4313      	orrs	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003056:	b29a      	uxth	r2, r3
 8003058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	e041      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x784>
 800305e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003074:	b29a      	uxth	r2, r3
 8003076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	e032      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x784>
 800307c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_PCD_EP_DB_Transmit+0x738>
 8003090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003092:	3301      	adds	r3, #1
 8003094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29a      	uxth	r2, r3
 800309c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800309e:	b29b      	uxth	r3, r3
 80030a0:	029b      	lsls	r3, r3, #10
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4313      	orrs	r3, r2
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e019      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x784>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d115      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x784>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030be:	b29b      	uxth	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c4:	4413      	add	r3, r2
 80030c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	011a      	lsls	r2, r3, #4
 80030ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d0:	4413      	add	r3, r2
 80030d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80030d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030dc:	b29a      	uxth	r2, r3
 80030de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6959      	ldr	r1, [r3, #20]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	895a      	ldrh	r2, [r3, #10]
 80030ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f004 f88d 	bl	8007212 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800310e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003112:	82bb      	strh	r3, [r7, #20]
 8003114:	8abb      	ldrh	r3, [r7, #20]
 8003116:	f083 0310 	eor.w	r3, r3, #16
 800311a:	82bb      	strh	r3, [r7, #20]
 800311c:	8abb      	ldrh	r3, [r7, #20]
 800311e:	f083 0320 	eor.w	r3, r3, #32
 8003122:	82bb      	strh	r3, [r7, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	8abb      	ldrh	r3, [r7, #20]
 8003134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800313c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3790      	adds	r7, #144	@ 0x90
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003152:	b480      	push	{r7}
 8003154:	b087      	sub	sp, #28
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	817b      	strh	r3, [r7, #10]
 8003160:	4613      	mov	r3, r2
 8003162:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003164:	897b      	ldrh	r3, [r7, #10]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00b      	beq.n	8003188 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e009      	b.n	800319c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003188:	897a      	ldrh	r2, [r7, #10]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800319c:	893b      	ldrh	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	80da      	strh	r2, [r3, #6]
 80031b0:	e00b      	b.n	80031ca <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2201      	movs	r2, #1
 80031b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e272      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8087 	beq.w	8003306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031f8:	4b92      	ldr	r3, [pc, #584]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b04      	cmp	r3, #4
 8003202:	d00c      	beq.n	800321e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003204:	4b8f      	ldr	r3, [pc, #572]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d112      	bne.n	8003236 <HAL_RCC_OscConfig+0x5e>
 8003210:	4b8c      	ldr	r3, [pc, #560]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321c:	d10b      	bne.n	8003236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321e:	4b89      	ldr	r3, [pc, #548]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d06c      	beq.n	8003304 <HAL_RCC_OscConfig+0x12c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d168      	bne.n	8003304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e24c      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323e:	d106      	bne.n	800324e <HAL_RCC_OscConfig+0x76>
 8003240:	4b80      	ldr	r3, [pc, #512]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a7f      	ldr	r2, [pc, #508]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	e02e      	b.n	80032ac <HAL_RCC_OscConfig+0xd4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x98>
 8003256:	4b7b      	ldr	r3, [pc, #492]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7a      	ldr	r2, [pc, #488]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800325c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b78      	ldr	r3, [pc, #480]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a77      	ldr	r2, [pc, #476]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003268:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e01d      	b.n	80032ac <HAL_RCC_OscConfig+0xd4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0xbc>
 800327a:	4b72      	ldr	r3, [pc, #456]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a71      	ldr	r2, [pc, #452]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b6f      	ldr	r3, [pc, #444]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6e      	ldr	r2, [pc, #440]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0xd4>
 8003294:	4b6b      	ldr	r3, [pc, #428]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6a      	ldr	r2, [pc, #424]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b68      	ldr	r3, [pc, #416]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a67      	ldr	r2, [pc, #412]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fc94 	bl	8000be0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fd fc90 	bl	8000be0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	@ 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e200      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0xe4>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fd fc80 	bl	8000be0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fd fc7c 	bl	8000be0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	@ 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e1ec      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	4b53      	ldr	r3, [pc, #332]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x10c>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003312:	4b4c      	ldr	r3, [pc, #304]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800331e:	4b49      	ldr	r3, [pc, #292]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b08      	cmp	r3, #8
 8003328:	d11c      	bne.n	8003364 <HAL_RCC_OscConfig+0x18c>
 800332a:	4b46      	ldr	r3, [pc, #280]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	4b43      	ldr	r3, [pc, #268]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x176>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e1c0      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4939      	ldr	r1, [pc, #228]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	e03a      	b.n	80033da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336c:	4b36      	ldr	r3, [pc, #216]	@ (8003448 <HAL_RCC_OscConfig+0x270>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fd fc35 	bl	8000be0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337a:	f7fd fc31 	bl	8000be0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1a1      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	4b2d      	ldr	r3, [pc, #180]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b2a      	ldr	r3, [pc, #168]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4927      	ldr	r1, [pc, #156]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
 80033ac:	e015      	b.n	80033da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b26      	ldr	r3, [pc, #152]	@ (8003448 <HAL_RCC_OscConfig+0x270>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fd fc14 	bl	8000be0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fd fc10 	bl	8000be0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e180      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d03a      	beq.n	800345c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d019      	beq.n	8003422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b17      	ldr	r3, [pc, #92]	@ (800344c <HAL_RCC_OscConfig+0x274>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fd fbf4 	bl	8000be0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fd fbf0 	bl	8000be0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e160      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <HAL_RCC_OscConfig+0x26c>)
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800341a:	2001      	movs	r0, #1
 800341c:	f000 fafe 	bl	8003a1c <RCC_Delay>
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003422:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_RCC_OscConfig+0x274>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7fd fbda 	bl	8000be0 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342e:	e00f      	b.n	8003450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003430:	f7fd fbd6 	bl	8000be0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d908      	bls.n	8003450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e146      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	42420000 	.word	0x42420000
 800344c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b92      	ldr	r3, [pc, #584]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e9      	bne.n	8003430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a6 	beq.w	80035b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b8b      	ldr	r3, [pc, #556]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	4b88      	ldr	r3, [pc, #544]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4a87      	ldr	r2, [pc, #540]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003484:	61d3      	str	r3, [r2, #28]
 8003486:	4b85      	ldr	r3, [pc, #532]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b82      	ldr	r3, [pc, #520]	@ (80036a0 <HAL_RCC_OscConfig+0x4c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d118      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a2:	4b7f      	ldr	r3, [pc, #508]	@ (80036a0 <HAL_RCC_OscConfig+0x4c8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7e      	ldr	r2, [pc, #504]	@ (80036a0 <HAL_RCC_OscConfig+0x4c8>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ae:	f7fd fb97 	bl	8000be0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b6:	f7fd fb93 	bl	8000be0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	@ 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e103      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b75      	ldr	r3, [pc, #468]	@ (80036a0 <HAL_RCC_OscConfig+0x4c8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x312>
 80034dc:	4b6f      	ldr	r3, [pc, #444]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4a6e      	ldr	r2, [pc, #440]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6213      	str	r3, [r2, #32]
 80034e8:	e02d      	b.n	8003546 <HAL_RCC_OscConfig+0x36e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x334>
 80034f2:	4b6a      	ldr	r3, [pc, #424]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a69      	ldr	r2, [pc, #420]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	4b67      	ldr	r3, [pc, #412]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a66      	ldr	r2, [pc, #408]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	6213      	str	r3, [r2, #32]
 800350a:	e01c      	b.n	8003546 <HAL_RCC_OscConfig+0x36e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b05      	cmp	r3, #5
 8003512:	d10c      	bne.n	800352e <HAL_RCC_OscConfig+0x356>
 8003514:	4b61      	ldr	r3, [pc, #388]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a60      	ldr	r2, [pc, #384]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	4b5e      	ldr	r3, [pc, #376]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4a5d      	ldr	r2, [pc, #372]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6213      	str	r3, [r2, #32]
 800352c:	e00b      	b.n	8003546 <HAL_RCC_OscConfig+0x36e>
 800352e:	4b5b      	ldr	r3, [pc, #364]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a5a      	ldr	r2, [pc, #360]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6213      	str	r3, [r2, #32]
 800353a:	4b58      	ldr	r3, [pc, #352]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a57      	ldr	r2, [pc, #348]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d015      	beq.n	800357a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fd fb47 	bl	8000be0 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd fb43 	bl	8000be0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e0b1      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	4b4b      	ldr	r3, [pc, #300]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ee      	beq.n	8003556 <HAL_RCC_OscConfig+0x37e>
 8003578:	e014      	b.n	80035a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fd fb31 	bl	8000be0 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fd fb2d 	bl	8000be0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e09b      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003598:	4b40      	ldr	r3, [pc, #256]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ee      	bne.n	8003582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d105      	bne.n	80035b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035aa:	4b3c      	ldr	r3, [pc, #240]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4a3b      	ldr	r2, [pc, #236]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8087 	beq.w	80036ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c0:	4b36      	ldr	r3, [pc, #216]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d061      	beq.n	8003690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d146      	bne.n	8003662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b33      	ldr	r3, [pc, #204]	@ (80036a4 <HAL_RCC_OscConfig+0x4cc>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fd fb01 	bl	8000be0 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd fafd 	bl	8000be0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e06d      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f4:	4b29      	ldr	r3, [pc, #164]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003608:	d108      	bne.n	800361c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800360a:	4b24      	ldr	r3, [pc, #144]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	4921      	ldr	r1, [pc, #132]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361c:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a19      	ldr	r1, [r3, #32]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	430b      	orrs	r3, r1
 800362e:	491b      	ldr	r1, [pc, #108]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003634:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <HAL_RCC_OscConfig+0x4cc>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363a:	f7fd fad1 	bl	8000be0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003642:	f7fd facd 	bl	8000be0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e03d      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003654:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x46a>
 8003660:	e035      	b.n	80036ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <HAL_RCC_OscConfig+0x4cc>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fd faba 	bl	8000be0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fab6 	bl	8000be0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e026      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_OscConfig+0x4c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x498>
 800368e:	e01e      	b.n	80036ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e019      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
 80036a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCC_OscConfig+0x500>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0d0      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b6a      	ldr	r3, [pc, #424]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d910      	bls.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b67      	ldr	r3, [pc, #412]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4965      	ldr	r1, [pc, #404]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b63      	ldr	r3, [pc, #396]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b8      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003738:	4b59      	ldr	r3, [pc, #356]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a58      	ldr	r2, [pc, #352]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003750:	4b53      	ldr	r3, [pc, #332]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a52      	ldr	r2, [pc, #328]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800375a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b50      	ldr	r3, [pc, #320]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	494d      	ldr	r1, [pc, #308]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d040      	beq.n	80037fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d115      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b41      	ldr	r3, [pc, #260]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e073      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	4b3d      	ldr	r3, [pc, #244]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06b      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4936      	ldr	r1, [pc, #216]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fd fa08 	bl	8000be0 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fd fa04 	bl	8000be0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e053      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b2d      	ldr	r3, [pc, #180]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037fc:	4b27      	ldr	r3, [pc, #156]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d210      	bcs.n	800382c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b24      	ldr	r3, [pc, #144]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4922      	ldr	r1, [pc, #136]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e032      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4916      	ldr	r1, [pc, #88]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003856:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	490e      	ldr	r1, [pc, #56]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386a:	f000 f821 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 800386e:	4602      	mov	r2, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	490a      	ldr	r1, [pc, #40]	@ (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	5ccb      	ldrb	r3, [r1, r3]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a09      	ldr	r2, [pc, #36]	@ (80038a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003886:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_ClockConfig+0x1d0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd f898 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08009354 	.word	0x08009354
 80038a8:	20000000 	.word	0x20000000
 80038ac:	20000004 	.word	0x20000004

080038b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x94>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x30>
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x36>
 80038de:	e027      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x98>)
 80038e2:	613b      	str	r3, [r7, #16]
      break;
 80038e4:	e027      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4a17      	ldr	r2, [pc, #92]	@ (800394c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038f0:	5cd3      	ldrb	r3, [r2, r3]
 80038f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d010      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038fe:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x94>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0c5b      	lsrs	r3, r3, #17
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	4a11      	ldr	r2, [pc, #68]	@ (8003950 <HAL_RCC_GetSysClockFreq+0xa0>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a0d      	ldr	r2, [pc, #52]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x98>)
 8003912:	fb03 f202 	mul.w	r2, r3, r2
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e004      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0c      	ldr	r2, [pc, #48]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	613b      	str	r3, [r7, #16]
      break;
 800392e:	e002      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x98>)
 8003932:	613b      	str	r3, [r7, #16]
      break;
 8003934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003936:	693b      	ldr	r3, [r7, #16]
}
 8003938:	4618      	mov	r0, r3
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	007a1200 	.word	0x007a1200
 800394c:	0800936c 	.word	0x0800936c
 8003950:	0800937c 	.word	0x0800937c
 8003954:	003d0900 	.word	0x003d0900

08003958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b02      	ldr	r3, [pc, #8]	@ (8003968 <HAL_RCC_GetHCLKFreq+0x10>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	20000000 	.word	0x20000000

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003970:	f7ff fff2 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	@ (800398c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4903      	ldr	r1, [pc, #12]	@ (8003990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	08009364 	.word	0x08009364

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003998:	f7ff ffde 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	0adb      	lsrs	r3, r3, #11
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	@ (80039b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08009364 	.word	0x08009364

080039bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	220f      	movs	r2, #15
 80039ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_RCC_GetClockConfig+0x58>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0203 	and.w	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <HAL_RCC_GetClockConfig+0x58>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_GetClockConfig+0x58>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039f0:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <HAL_RCC_GetClockConfig+0x58>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_RCC_GetClockConfig+0x5c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0207 	and.w	r2, r3, #7
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40022000 	.word	0x40022000

08003a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <RCC_Delay+0x34>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <RCC_Delay+0x38>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0a5b      	lsrs	r3, r3, #9
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a38:	bf00      	nop
  }
  while (Delay --);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	60fa      	str	r2, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f9      	bne.n	8003a38 <RCC_Delay+0x1c>
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	20000000 	.word	0x20000000
 8003a54:	10624dd3 	.word	0x10624dd3

08003a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d07d      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a78:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a84:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	61d3      	str	r3, [r2, #28]
 8003a90:	4b49      	ldr	r3, [pc, #292]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	4b46      	ldr	r3, [pc, #280]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d118      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aac:	4b43      	ldr	r3, [pc, #268]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a42      	ldr	r2, [pc, #264]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd f892 	bl	8000be0 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abe:	e008      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac0:	f7fd f88e 	bl	8000be0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	@ 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e06d      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ade:	4b36      	ldr	r3, [pc, #216]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02e      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d027      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b06:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b12:	4a29      	ldr	r2, [pc, #164]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d014      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7fd f85d 	bl	8000be0 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fd f859 	bl	8000be0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e036      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ee      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4917      	ldr	r1, [pc, #92]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b64:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	4a13      	ldr	r2, [pc, #76]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	490b      	ldr	r1, [pc, #44]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b9a:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4904      	ldr	r1, [pc, #16]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40007000 	.word	0x40007000
 8003bc0:	42420440 	.word	0x42420440

08003bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e041      	b.n	8003c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fc fdfe 	bl	80007ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 fc30 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e03a      	b.n	8003cf2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <HAL_TIM_Base_Start_IT+0x98>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x58>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x58>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a14      	ldr	r2, [pc, #80]	@ (8003d00 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x58>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a13      	ldr	r2, [pc, #76]	@ (8003d04 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d111      	bne.n	8003ce0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d010      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cde:	e007      	b.n	8003cf0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800

08003d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e041      	b.n	8003d9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f839 	bl	8003da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f000 fb8e 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e093      	b.n	8003ef4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fc fd33 	bl	800084c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f000 fb2b 	bl	8004468 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e58:	f023 030c 	bic.w	r3, r3, #12
 8003e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	4313      	orrs	r3, r2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	011a      	lsls	r2, r3, #4
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	031b      	lsls	r3, r3, #12
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0202 	mvn.w	r2, #2
 8003f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fa76 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa69 	bl	800441e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fa78 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0204 	mvn.w	r2, #4
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fa4c 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa3f 	bl	800441e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa4e 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0208 	mvn.w	r2, #8
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fa22 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa15 	bl	800441e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fa24 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b10      	cmp	r3, #16
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b10      	cmp	r3, #16
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0210 	mvn.w	r2, #16
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2208      	movs	r2, #8
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f9f8 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9eb 	bl	800441e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f9fa 	bl	8004442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10e      	bne.n	8004080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0201 	mvn.w	r2, #1
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc fb0a 	bl	8000694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	2b80      	cmp	r3, #128	@ 0x80
 800408c:	d10e      	bne.n	80040ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	2b80      	cmp	r3, #128	@ 0x80
 800409a:	d107      	bne.n	80040ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fcc5 	bl	8004a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b6:	2b40      	cmp	r3, #64	@ 0x40
 80040b8:	d10e      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b40      	cmp	r3, #64	@ 0x40
 80040c6:	d107      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9be 	bl	8004454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d10e      	bne.n	8004104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d107      	bne.n	8004104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0220 	mvn.w	r2, #32
 80040fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fc90 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004126:	2302      	movs	r3, #2
 8004128:	e0ae      	b.n	8004288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b0c      	cmp	r3, #12
 8004136:	f200 809f 	bhi.w	8004278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800413a:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004175 	.word	0x08004175
 8004144:	08004279 	.word	0x08004279
 8004148:	08004279 	.word	0x08004279
 800414c:	08004279 	.word	0x08004279
 8004150:	080041b5 	.word	0x080041b5
 8004154:	08004279 	.word	0x08004279
 8004158:	08004279 	.word	0x08004279
 800415c:	08004279 	.word	0x08004279
 8004160:	080041f7 	.word	0x080041f7
 8004164:	08004279 	.word	0x08004279
 8004168:	08004279 	.word	0x08004279
 800416c:	08004279 	.word	0x08004279
 8004170:	08004237 	.word	0x08004237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f9d6 	bl	800452c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0208 	orr.w	r2, r2, #8
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	619a      	str	r2, [r3, #24]
      break;
 80041b2:	e064      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fa1c 	bl	80045f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6999      	ldr	r1, [r3, #24]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	021a      	lsls	r2, r3, #8
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	619a      	str	r2, [r3, #24]
      break;
 80041f4:	e043      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fa65 	bl	80046cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0208 	orr.w	r2, r2, #8
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0204 	bic.w	r2, r2, #4
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	61da      	str	r2, [r3, #28]
      break;
 8004234:	e023      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 faaf 	bl	80047a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69d9      	ldr	r1, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	021a      	lsls	r2, r3, #8
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	61da      	str	r2, [r3, #28]
      break;
 8004276:	e002      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	75fb      	strb	r3, [r7, #23]
      break;
 800427c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_ConfigClockSource+0x1c>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0b4      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x186>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e4:	d03e      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0xd4>
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ea:	f200 8087 	bhi.w	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f2:	f000 8086 	beq.w	8004402 <HAL_TIM_ConfigClockSource+0x172>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d87f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b70      	cmp	r3, #112	@ 0x70
 80042fe:	d01a      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0xa6>
 8004300:	2b70      	cmp	r3, #112	@ 0x70
 8004302:	d87b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b60      	cmp	r3, #96	@ 0x60
 8004306:	d050      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x11a>
 8004308:	2b60      	cmp	r3, #96	@ 0x60
 800430a:	d877      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b50      	cmp	r3, #80	@ 0x50
 800430e:	d03c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xfa>
 8004310:	2b50      	cmp	r3, #80	@ 0x50
 8004312:	d873      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d058      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x13a>
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d86f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b30      	cmp	r3, #48	@ 0x30
 800431e:	d064      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004320:	2b30      	cmp	r3, #48	@ 0x30
 8004322:	d86b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b20      	cmp	r3, #32
 8004326:	d060      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d867      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004330:	2b10      	cmp	r3, #16
 8004332:	d05a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004334:	e062      	b.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004346:	f000 faf0 	bl	800492a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	609a      	str	r2, [r3, #8]
      break;
 8004362:	e04f      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004374:	f000 fad9 	bl	800492a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e03c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	461a      	mov	r2, r3
 8004398:	f000 fa50 	bl	800483c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2150      	movs	r1, #80	@ 0x50
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 faa7 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80043a8:	e02c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fa6e 	bl	8004898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2160      	movs	r1, #96	@ 0x60
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fa97 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80043c8:	e01c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fa30 	bl	800483c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2140      	movs	r1, #64	@ 0x40
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa87 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80043e8:	e00c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f000 fa7e 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80043fa:	e003      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e000      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
	...

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a29      	ldr	r2, [pc, #164]	@ (8004520 <TIM_Base_SetConfig+0xb8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0x30>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0x30>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a26      	ldr	r2, [pc, #152]	@ (8004524 <TIM_Base_SetConfig+0xbc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0x30>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a25      	ldr	r2, [pc, #148]	@ (8004528 <TIM_Base_SetConfig+0xc0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d108      	bne.n	80044aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004520 <TIM_Base_SetConfig+0xb8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0x62>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0x62>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a19      	ldr	r2, [pc, #100]	@ (8004524 <TIM_Base_SetConfig+0xbc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0x62>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <TIM_Base_SetConfig+0xc0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a07      	ldr	r2, [pc, #28]	@ (8004520 <TIM_Base_SetConfig+0xb8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	615a      	str	r2, [r3, #20]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800

0800452c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f023 0201 	bic.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0302 	bic.w	r3, r3, #2
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <TIM_OC1_SetConfig+0xc8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10c      	bne.n	80045a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0308 	bic.w	r3, r3, #8
 800458e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a13      	ldr	r2, [pc, #76]	@ (80045f4 <TIM_OC1_SetConfig+0xc8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d111      	bne.n	80045ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00

080045f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0210 	bic.w	r2, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0320 	bic.w	r3, r3, #32
 8004642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1d      	ldr	r2, [pc, #116]	@ (80046c8 <TIM_OC2_SetConfig+0xd0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a14      	ldr	r2, [pc, #80]	@ (80046c8 <TIM_OC2_SetConfig+0xd0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d113      	bne.n	80046a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800468a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00

080046cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1d      	ldr	r2, [pc, #116]	@ (800479c <TIM_OC3_SetConfig+0xd0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10d      	bne.n	8004746 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a14      	ldr	r2, [pc, #80]	@ (800479c <TIM_OC3_SetConfig+0xd0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d113      	bne.n	8004776 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800475c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00

080047a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004838 <TIM_OC4_SetConfig+0x98>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d109      	bne.n	8004814 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00

0800483c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 030a 	bic.w	r3, r3, #10
 8004878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0210 	bic.w	r2, r3, #16
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	031b      	lsls	r3, r3, #12
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	f043 0307 	orr.w	r3, r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	021a      	lsls	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	431a      	orrs	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	609a      	str	r2, [r3, #8]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800497c:	2302      	movs	r3, #2
 800497e:	e046      	b.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049cc:	d009      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a12      	ldr	r2, [pc, #72]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a10      	ldr	r2, [pc, #64]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10c      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e042      	b.n	8004ae0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fb ff5c 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	@ 0x24
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f82b 	bl	8004ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004b22:	f023 030c 	bic.w	r3, r3, #12
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004bfc <UART_SetConfig+0x114>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d103      	bne.n	8004b58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b50:	f7fe ff20 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	e002      	b.n	8004b5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe ff08 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8004b5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009a      	lsls	r2, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	4a22      	ldr	r2, [pc, #136]	@ (8004c00 <UART_SetConfig+0x118>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	0119      	lsls	r1, r3, #4
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009a      	lsls	r2, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b94:	4b1a      	ldr	r3, [pc, #104]	@ (8004c00 <UART_SetConfig+0x118>)
 8004b96:	fba3 0302 	umull	r0, r3, r3, r2
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2064      	movs	r0, #100	@ 0x64
 8004b9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	3332      	adds	r3, #50	@ 0x32
 8004ba8:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <UART_SetConfig+0x118>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bb4:	4419      	add	r1, r3
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009a      	lsls	r2, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c00 <UART_SetConfig+0x118>)
 8004bce:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2064      	movs	r0, #100	@ 0x64
 8004bd6:	fb00 f303 	mul.w	r3, r0, r3
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	3332      	adds	r3, #50	@ 0x32
 8004be0:	4a07      	ldr	r2, [pc, #28]	@ (8004c00 <UART_SetConfig+0x118>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40013800 	.word	0x40013800
 8004c00:	51eb851f 	.word	0x51eb851f

08004c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c04:	b084      	sub	sp, #16
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	f107 0014 	add.w	r0, r7, #20
 8004c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	b004      	add	sp, #16
 8004c22:	4770      	bx	lr

08004c24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c34:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004c38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c58:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004c5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	f107 0014 	add.w	r0, r7, #20
 8004caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	b004      	add	sp, #16
 8004cda:	4770      	bx	lr

08004cdc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b09d      	sub	sp, #116	@ 0x74
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	78db      	ldrb	r3, [r3, #3]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d81f      	bhi.n	8004d4e <USB_ActivateEndpoint+0x72>
 8004d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <USB_ActivateEndpoint+0x38>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d41 	.word	0x08004d41
 8004d1c:	08004d57 	.word	0x08004d57
 8004d20:	08004d33 	.word	0x08004d33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004d30:	e012      	b.n	8004d58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d32:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d36:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004d3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004d3e:	e00b      	b.n	8004d58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004d4c:	e004      	b.n	8004d58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004d54:	e000      	b.n	8004d58 <USB_ActivateEndpoint+0x7c>
      break;
 8004d56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	7b1b      	ldrb	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 8178 	bne.w	80050b8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8084 	beq.w	8004eda <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	4413      	add	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	011a      	lsls	r2, r3, #4
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	88db      	ldrh	r3, [r3, #6]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	827b      	strh	r3, [r7, #18]
 8004e14:	8a7b      	ldrh	r3, [r7, #18]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01b      	beq.n	8004e56 <USB_ActivateEndpoint+0x17a>
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e34:	823b      	strh	r3, [r7, #16]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	8a3b      	ldrh	r3, [r7, #16]
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	78db      	ldrb	r3, [r3, #3]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d020      	beq.n	8004ea0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e74:	81bb      	strh	r3, [r7, #12]
 8004e76:	89bb      	ldrh	r3, [r7, #12]
 8004e78:	f083 0320 	eor.w	r3, r3, #32
 8004e7c:	81bb      	strh	r3, [r7, #12]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	89bb      	ldrh	r3, [r7, #12]
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]
 8004e9e:	e2d5      	b.n	800544c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb6:	81fb      	strh	r3, [r7, #14]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	89fb      	ldrh	r3, [r7, #14]
 8004ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	8013      	strh	r3, [r2, #0]
 8004ed8:	e2b8      	b.n	800544c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	4413      	add	r3, r2
 8004eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	011a      	lsls	r2, r3, #4
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	88db      	ldrh	r3, [r3, #6]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1e:	4413      	add	r3, r2
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	011a      	lsls	r2, r3, #4
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f48:	d91d      	bls.n	8004f86 <USB_ActivateEndpoint+0x2aa>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <USB_ActivateEndpoint+0x288>
 8004f5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f60:	3b01      	subs	r3, #1
 8004f62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	029b      	lsls	r3, r3, #10
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	4313      	orrs	r3, r2
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	e026      	b.n	8004fd4 <USB_ActivateEndpoint+0x2f8>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <USB_ActivateEndpoint+0x2c8>
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	e017      	b.n	8004fd4 <USB_ActivateEndpoint+0x2f8>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <USB_ActivateEndpoint+0x2e2>
 8004fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fba:	3301      	adds	r3, #1
 8004fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004fe2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <USB_ActivateEndpoint+0x348>
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005002:	843b      	strh	r3, [r7, #32]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	8c3b      	ldrh	r3, [r7, #32]
 8005010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005018:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800501c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d124      	bne.n	8005076 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800503e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005042:	83bb      	strh	r3, [r7, #28]
 8005044:	8bbb      	ldrh	r3, [r7, #28]
 8005046:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800504a:	83bb      	strh	r3, [r7, #28]
 800504c:	8bbb      	ldrh	r3, [r7, #28]
 800504e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005052:	83bb      	strh	r3, [r7, #28]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8bbb      	ldrh	r3, [r7, #28]
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
 8005074:	e1ea      	b.n	800544c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508c:	83fb      	strh	r3, [r7, #30]
 800508e:	8bfb      	ldrh	r3, [r7, #30]
 8005090:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005094:	83fb      	strh	r3, [r7, #30]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	8bfb      	ldrh	r3, [r7, #30]
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]
 80050b6:	e1c9      	b.n	800544c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	78db      	ldrb	r3, [r3, #3]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d11e      	bne.n	80050fe <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80050f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
 80050fc:	e01d      	b.n	800513a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005114:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800512e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005144:	b29b      	uxth	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800514a:	4413      	add	r3, r2
 800514c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	011a      	lsls	r2, r3, #4
 8005154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005156:	4413      	add	r3, r2
 8005158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800515c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	891b      	ldrh	r3, [r3, #8]
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	657b      	str	r3, [r7, #84]	@ 0x54
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005178:	b29b      	uxth	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517e:	4413      	add	r3, r2
 8005180:	657b      	str	r3, [r7, #84]	@ 0x54
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	011a      	lsls	r2, r3, #4
 8005188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518a:	4413      	add	r3, r2
 800518c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005190:	653b      	str	r3, [r7, #80]	@ 0x50
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	895b      	ldrh	r3, [r3, #10]
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	b29b      	uxth	r3, r3
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 8093 	bne.w	80052d2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80051bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80051c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01b      	beq.n	8005200 <USB_ActivateEndpoint+0x524>
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80051ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800520e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01b      	beq.n	8005250 <USB_ActivateEndpoint+0x574>
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800523c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005248:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800524c:	b29b      	uxth	r3, r3
 800524e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005266:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005268:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800526a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800526e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005270:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005272:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005276:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800528c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	8013      	strh	r3, [r2, #0]
 80052d0:	e0bc      	b.n	800544c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80052e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80052e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01d      	beq.n	800532a <USB_ActivateEndpoint+0x64e>
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005304:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800531a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800531e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005326:	b29b      	uxth	r3, r3
 8005328:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800533a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800533e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01d      	beq.n	8005382 <USB_ActivateEndpoint+0x6a6>
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800536e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800537a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800537e:	b29b      	uxth	r3, r3
 8005380:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	78db      	ldrb	r3, [r3, #3]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d024      	beq.n	80053d4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800539c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80053a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80053a8:	f083 0320 	eor.w	r3, r3, #32
 80053ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80053be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]
 80053d2:	e01d      	b.n	8005410 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800540c:	b29b      	uxth	r3, r3
 800540e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005426:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005448:	b29b      	uxth	r3, r3
 800544a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800544c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005450:	4618      	mov	r0, r3
 8005452:	3774      	adds	r7, #116	@ 0x74
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop

0800545c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800545c:	b480      	push	{r7}
 800545e:	b08d      	sub	sp, #52	@ 0x34
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	7b1b      	ldrb	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 808e 	bne.w	800558c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d044      	beq.n	8005502 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	81bb      	strh	r3, [r7, #12]
 8005486:	89bb      	ldrh	r3, [r7, #12]
 8005488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <USB_DeactivateEndpoint+0x6c>
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	817b      	strh	r3, [r7, #10]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054de:	813b      	strh	r3, [r7, #8]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	893b      	ldrh	r3, [r7, #8]
 80054ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	8013      	strh	r3, [r2, #0]
 8005500:	e192      	b.n	8005828 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	827b      	strh	r3, [r7, #18]
 8005510:	8a7b      	ldrh	r3, [r7, #18]
 8005512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01b      	beq.n	8005552 <USB_DeactivateEndpoint+0xf6>
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800552c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005530:	823b      	strh	r3, [r7, #16]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8a3b      	ldrh	r3, [r7, #16]
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800554a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005568:	81fb      	strh	r3, [r7, #14]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	441a      	add	r2, r3
 8005574:	89fb      	ldrh	r3, [r7, #14]
 8005576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800557a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]
 800558a:	e14d      	b.n	8005828 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 80a5 	bne.w	80056e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	843b      	strh	r3, [r7, #32]
 80055a4:	8c3b      	ldrh	r3, [r7, #32]
 80055a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01b      	beq.n	80055e6 <USB_DeactivateEndpoint+0x18a>
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c4:	83fb      	strh	r3, [r7, #30]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	441a      	add	r2, r3
 80055d0:	8bfb      	ldrh	r3, [r7, #30]
 80055d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	83bb      	strh	r3, [r7, #28]
 80055f4:	8bbb      	ldrh	r3, [r7, #28]
 80055f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01b      	beq.n	8005636 <USB_DeactivateEndpoint+0x1da>
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005614:	837b      	strh	r3, [r7, #26]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	8b7b      	ldrh	r3, [r7, #26]
 8005622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800562e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564c:	833b      	strh	r3, [r7, #24]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	8b3b      	ldrh	r3, [r7, #24]
 800565a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800565e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005666:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800566a:	b29b      	uxth	r3, r3
 800566c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005684:	82fb      	strh	r3, [r7, #22]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	8afb      	ldrh	r3, [r7, #22]
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800569e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056bc:	82bb      	strh	r3, [r7, #20]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	441a      	add	r2, r3
 80056c8:	8abb      	ldrh	r3, [r7, #20]
 80056ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056da:	b29b      	uxth	r3, r3
 80056dc:	8013      	strh	r3, [r2, #0]
 80056de:	e0a3      	b.n	8005828 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80056ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01b      	beq.n	8005730 <USB_DeactivateEndpoint+0x2d4>
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800570a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800571c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572c:	b29b      	uxth	r3, r3
 800572e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800573e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01b      	beq.n	8005780 <USB_DeactivateEndpoint+0x324>
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800576c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005778:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800577c:	b29b      	uxth	r3, r3
 800577e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80057a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3734      	adds	r7, #52	@ 0x34
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b0c2      	sub	sp, #264	@ 0x108
 8005838:	af00      	add	r7, sp, #0
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005842:	6018      	str	r0, [r3, #0]
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	2b01      	cmp	r3, #1
 800585c:	f040 86b7 	bne.w	80065ce <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	429a      	cmp	r2, r3
 800587a:	d908      	bls.n	800588e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800588c:	e007      	b.n	800589e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800588e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800589e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	7b1b      	ldrb	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d13a      	bne.n	8005924 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	88da      	ldrh	r2, [r3, #6]
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058d4:	6800      	ldr	r0, [r0, #0]
 80058d6:	f001 fc9c 	bl	8007212 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4413      	add	r3, r2
 8005910:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	f000 be1f 	b.w	8006562 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	78db      	ldrb	r3, [r3, #3]
 8005930:	2b02      	cmp	r3, #2
 8005932:	f040 8462 	bne.w	80061fa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a1a      	ldr	r2, [r3, #32]
 8005942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	429a      	cmp	r2, r3
 8005950:	f240 83df 	bls.w	8006112 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005958:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800599c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80059a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80059b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c0:	1ad2      	subs	r2, r2, r3
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 81c7 	beq.w	8005d84 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d177      	bne.n	8005b02 <USB_EPStartXfer+0x2ce>
 8005a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	4413      	add	r3, r2
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	011a      	lsls	r2, r3, #4
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a62:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a64:	d921      	bls.n	8005aaa <USB_EPStartXfer+0x276>
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <USB_EPStartXfer+0x252>
 8005a7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a80:	3b01      	subs	r3, #1
 8005a82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	e050      	b.n	8005b4c <USB_EPStartXfer+0x318>
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <USB_EPStartXfer+0x294>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	e041      	b.n	8005b4c <USB_EPStartXfer+0x318>
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <USB_EPStartXfer+0x2b4>
 8005ade:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e024      	b.n	8005b4c <USB_EPStartXfer+0x318>
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d11c      	bne.n	8005b4c <USB_EPStartXfer+0x318>
 8005b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	4413      	add	r3, r2
 8005b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	895b      	ldrh	r3, [r3, #10]
 8005b58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6959      	ldr	r1, [r3, #20]
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	f001 fb49 	bl	8007212 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	441a      	add	r2, r3
 8005b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d90f      	bls.n	8005bda <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6a1a      	ldr	r2, [r3, #32]
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	621a      	str	r2, [r3, #32]
 8005bd8:	e00e      	b.n	8005bf8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d177      	bne.n	8005cf8 <USB_EPStartXfer+0x4c4>
 8005c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	4413      	add	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	011a      	lsls	r2, r3, #4
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c5a:	d921      	bls.n	8005ca0 <USB_EPStartXfer+0x46c>
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <USB_EPStartXfer+0x448>
 8005c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c76:	3b01      	subs	r3, #1
 8005c78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	029b      	lsls	r3, r3, #10
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e056      	b.n	8005d4e <USB_EPStartXfer+0x51a>
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <USB_EPStartXfer+0x48a>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	e047      	b.n	8005d4e <USB_EPStartXfer+0x51a>
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <USB_EPStartXfer+0x4aa>
 8005cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	029b      	lsls	r3, r3, #10
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	e02a      	b.n	8005d4e <USB_EPStartXfer+0x51a>
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d122      	bne.n	8005d4e <USB_EPStartXfer+0x51a>
 8005d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	4413      	add	r3, r2
 8005d2a:	623b      	str	r3, [r7, #32]
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	011a      	lsls	r2, r3, #4
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	891b      	ldrh	r3, [r3, #8]
 8005d5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6959      	ldr	r1, [r3, #20]
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f001 fa48 	bl	8007212 <USB_WritePMA>
 8005d82:	e3ee      	b.n	8006562 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d177      	bne.n	8005e84 <USB_EPStartXfer+0x650>
 8005d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db4:	4413      	add	r3, r2
 8005db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dc8:	4413      	add	r3, r2
 8005dca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005de6:	d921      	bls.n	8005e2c <USB_EPStartXfer+0x5f8>
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <USB_EPStartXfer+0x5d4>
 8005dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e02:	3b01      	subs	r3, #1
 8005e04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	029b      	lsls	r3, r3, #10
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	e056      	b.n	8005eda <USB_EPStartXfer+0x6a6>
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <USB_EPStartXfer+0x616>
 8005e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e047      	b.n	8005eda <USB_EPStartXfer+0x6a6>
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <USB_EPStartXfer+0x636>
 8005e60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e64:	3301      	adds	r3, #1
 8005e66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e02a      	b.n	8005eda <USB_EPStartXfer+0x6a6>
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d122      	bne.n	8005eda <USB_EPStartXfer+0x6a6>
 8005e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eb4:	4413      	add	r3, r2
 8005eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	011a      	lsls	r2, r3, #4
 8005ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ed8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	891b      	ldrh	r3, [r3, #8]
 8005ee6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6959      	ldr	r1, [r3, #20]
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f08:	6800      	ldr	r0, [r0, #0]
 8005f0a:	f001 f982 	bl	8007212 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1e:	441a      	add	r2, r3
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d90f      	bls.n	8005f68 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a1a      	ldr	r2, [r3, #32]
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f58:	1ad2      	subs	r2, r2, r3
 8005f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	621a      	str	r2, [r3, #32]
 8005f66:	e00e      	b.n	8005f86 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2200      	movs	r2, #0
 8005f84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d177      	bne.n	8006092 <USB_EPStartXfer+0x85e>
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc2:	4413      	add	r3, r2
 8005fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	011a      	lsls	r2, r3, #4
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ff4:	d921      	bls.n	800603a <USB_EPStartXfer+0x806>
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <USB_EPStartXfer+0x7e2>
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006010:	3b01      	subs	r3, #1
 8006012:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006020:	b29b      	uxth	r3, r3
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	b29b      	uxth	r3, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e050      	b.n	80060dc <USB_EPStartXfer+0x8a8>
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <USB_EPStartXfer+0x824>
 8006042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e041      	b.n	80060dc <USB_EPStartXfer+0x8a8>
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <USB_EPStartXfer+0x844>
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006072:	3301      	adds	r3, #1
 8006074:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29a      	uxth	r2, r3
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006082:	b29b      	uxth	r3, r3
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	b29b      	uxth	r3, r3
 8006088:	4313      	orrs	r3, r2
 800608a:	b29a      	uxth	r2, r3
 800608c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	e024      	b.n	80060dc <USB_EPStartXfer+0x8a8>
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d11c      	bne.n	80060dc <USB_EPStartXfer+0x8a8>
 80060a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b6:	4413      	add	r3, r2
 80060b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80060ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	011a      	lsls	r2, r3, #4
 80060c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	895b      	ldrh	r3, [r3, #10]
 80060e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6959      	ldr	r1, [r3, #20]
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006102:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006106:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	f001 f881 	bl	8007212 <USB_WritePMA>
 8006110:	e227      	b.n	8006562 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006148:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800614c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006198:	b29b      	uxth	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800619e:	4413      	add	r3, r2
 80061a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	011a      	lsls	r2, r3, #4
 80061b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	891b      	ldrh	r3, [r3, #8]
 80061d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6959      	ldr	r1, [r3, #20]
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061f2:	6800      	ldr	r0, [r0, #0]
 80061f4:	f001 f80d 	bl	8007212 <USB_WritePMA>
 80061f8:	e1b3      	b.n	8006562 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80c6 	beq.w	80063cc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006244:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	673b      	str	r3, [r7, #112]	@ 0x70
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d177      	bne.n	800634c <USB_EPStartXfer+0xb18>
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800627c:	4413      	add	r3, r2
 800627e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	011a      	lsls	r2, r3, #4
 800628e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006290:	4413      	add	r3, r2
 8006292:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006296:	667b      	str	r3, [r7, #100]	@ 0x64
 8006298:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ae:	d921      	bls.n	80062f4 <USB_EPStartXfer+0xac0>
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <USB_EPStartXfer+0xa9c>
 80062c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062ca:	3b01      	subs	r3, #1
 80062cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062da:	b29b      	uxth	r3, r3
 80062dc:	029b      	lsls	r3, r3, #10
 80062de:	b29b      	uxth	r3, r3
 80062e0:	4313      	orrs	r3, r2
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	e050      	b.n	8006396 <USB_EPStartXfer+0xb62>
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <USB_EPStartXfer+0xade>
 80062fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630a:	b29a      	uxth	r2, r3
 800630c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e041      	b.n	8006396 <USB_EPStartXfer+0xb62>
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <USB_EPStartXfer+0xafe>
 8006328:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800632c:	3301      	adds	r3, #1
 800632e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29a      	uxth	r2, r3
 8006338:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800633c:	b29b      	uxth	r3, r3
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	b29b      	uxth	r3, r3
 8006342:	4313      	orrs	r3, r2
 8006344:	b29a      	uxth	r2, r3
 8006346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e024      	b.n	8006396 <USB_EPStartXfer+0xb62>
 800634c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d11c      	bne.n	8006396 <USB_EPStartXfer+0xb62>
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006370:	4413      	add	r3, r2
 8006372:	673b      	str	r3, [r7, #112]	@ 0x70
 8006374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	011a      	lsls	r2, r3, #4
 8006382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006384:	4413      	add	r3, r2
 8006386:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800638a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006390:	b29a      	uxth	r2, r3
 8006392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006394:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	895b      	ldrh	r3, [r3, #10]
 80063a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6959      	ldr	r1, [r3, #20]
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063c4:	6800      	ldr	r0, [r0, #0]
 80063c6:	f000 ff24 	bl	8007212 <USB_WritePMA>
 80063ca:	e0ca      	b.n	8006562 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d177      	bne.n	80064cc <USB_EPStartXfer+0xc98>
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063fc:	4413      	add	r3, r2
 80063fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	011a      	lsls	r2, r3, #4
 800640e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006410:	4413      	add	r3, r2
 8006412:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006416:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006422:	b29a      	uxth	r2, r3
 8006424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642c:	2b3e      	cmp	r3, #62	@ 0x3e
 800642e:	d921      	bls.n	8006474 <USB_EPStartXfer+0xc40>
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <USB_EPStartXfer+0xc1c>
 8006446:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800644a:	3b01      	subs	r3, #1
 800644c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29a      	uxth	r2, r3
 8006456:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800645a:	b29b      	uxth	r3, r3
 800645c:	029b      	lsls	r3, r3, #10
 800645e:	b29b      	uxth	r3, r3
 8006460:	4313      	orrs	r3, r2
 8006462:	b29b      	uxth	r3, r3
 8006464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646c:	b29a      	uxth	r2, r3
 800646e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	e05c      	b.n	800652e <USB_EPStartXfer+0xcfa>
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <USB_EPStartXfer+0xc5e>
 800647c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648a:	b29a      	uxth	r2, r3
 800648c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e04d      	b.n	800652e <USB_EPStartXfer+0xcfa>
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <USB_EPStartXfer+0xc7e>
 80064a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80064ac:	3301      	adds	r3, #1
 80064ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80064bc:	b29b      	uxth	r3, r3
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e030      	b.n	800652e <USB_EPStartXfer+0xcfa>
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d128      	bne.n	800652e <USB_EPStartXfer+0xcfa>
 80064dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006500:	4413      	add	r3, r2
 8006502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	011a      	lsls	r2, r3, #4
 8006514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006518:	4413      	add	r3, r2
 800651a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800651e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800652c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	891b      	ldrh	r3, [r3, #8]
 800653a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800653e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6959      	ldr	r1, [r3, #20]
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654e:	b29b      	uxth	r3, r3
 8006550:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006554:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006558:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f000 fe58 	bl	8007212 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006588:	817b      	strh	r3, [r7, #10]
 800658a:	897b      	ldrh	r3, [r7, #10]
 800658c:	f083 0310 	eor.w	r3, r3, #16
 8006590:	817b      	strh	r3, [r7, #10]
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	f083 0320 	eor.w	r3, r3, #32
 8006598:	817b      	strh	r3, [r7, #10]
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	897b      	ldrh	r3, [r7, #10]
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]
 80065ca:	f000 bcde 	b.w	8006f8a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	7b1b      	ldrb	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 80bb 	bne.w	8006756 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d917      	bls.n	800662c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80065fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800660c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	619a      	str	r2, [r3, #24]
 800662a:	e00e      	b.n	800664a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800662c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006666:	b29b      	uxth	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800666e:	4413      	add	r3, r2
 8006670:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	011a      	lsls	r2, r3, #4
 8006682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006686:	4413      	add	r3, r2
 8006688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800668c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669c:	b29a      	uxth	r2, r3
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066aa:	d924      	bls.n	80066f6 <USB_EPStartXfer+0xec2>
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <USB_EPStartXfer+0xe98>
 80066c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066c6:	3b01      	subs	r3, #1
 80066c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066d8:	b29b      	uxth	r3, r3
 80066da:	029b      	lsls	r3, r3, #10
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4313      	orrs	r3, r2
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	f000 bc10 	b.w	8006f16 <USB_EPStartXfer+0x16e2>
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10c      	bne.n	8006718 <USB_EPStartXfer+0xee4>
 80066fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e3fe      	b.n	8006f16 <USB_EPStartXfer+0x16e2>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0xf04>
 800672e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29a      	uxth	r2, r3
 8006740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006744:	b29b      	uxth	r3, r3
 8006746:	029b      	lsls	r3, r3, #10
 8006748:	b29b      	uxth	r3, r3
 800674a:	4313      	orrs	r3, r2
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e3df      	b.n	8006f16 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	2b02      	cmp	r3, #2
 8006764:	f040 8218 	bne.w	8006b98 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 809d 	bne.w	80068b4 <USB_EPStartXfer+0x1080>
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800679e:	4413      	add	r3, r2
 80067a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	011a      	lsls	r2, r3, #4
 80067b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067b6:	4413      	add	r3, r2
 80067b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067d2:	801a      	strh	r2, [r3, #0]
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80067e2:	d92b      	bls.n	800683c <USB_EPStartXfer+0x1008>
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <USB_EPStartXfer+0xfe0>
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	3b01      	subs	r3, #1
 8006810:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29a      	uxth	r2, r3
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006820:	b29b      	uxth	r3, r3
 8006822:	029b      	lsls	r3, r3, #10
 8006824:	b29b      	uxth	r3, r3
 8006826:	4313      	orrs	r3, r2
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e070      	b.n	800691e <USB_EPStartXfer+0x10ea>
 800683c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10c      	bne.n	8006866 <USB_EPStartXfer+0x1032>
 800684c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685c:	b29a      	uxth	r2, r3
 800685e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	e05b      	b.n	800691e <USB_EPStartXfer+0x10ea>
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <USB_EPStartXfer+0x1062>
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	3301      	adds	r3, #1
 8006892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29a      	uxth	r2, r3
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	029b      	lsls	r3, r3, #10
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4313      	orrs	r3, r2
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e034      	b.n	800691e <USB_EPStartXfer+0x10ea>
 80068b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d12c      	bne.n	800691e <USB_EPStartXfer+0x10ea>
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068e8:	4413      	add	r3, r2
 80068ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	011a      	lsls	r2, r3, #4
 80068fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006900:	4413      	add	r3, r2
 8006902:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	b29a      	uxth	r2, r3
 8006918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 809d 	bne.w	8006a78 <USB_EPStartXfer+0x1244>
 800693e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006962:	4413      	add	r3, r2
 8006964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	011a      	lsls	r2, r3, #4
 8006976:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800697a:	4413      	add	r3, r2
 800697c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80069a6:	d92b      	bls.n	8006a00 <USB_EPStartXfer+0x11cc>
 80069a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <USB_EPStartXfer+0x11a4>
 80069ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d2:	3b01      	subs	r3, #1
 80069d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	029b      	lsls	r3, r3, #10
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	4313      	orrs	r3, r2
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	e069      	b.n	8006ad4 <USB_EPStartXfer+0x12a0>
 8006a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10c      	bne.n	8006a2a <USB_EPStartXfer+0x11f6>
 8006a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	e054      	b.n	8006ad4 <USB_EPStartXfer+0x12a0>
 8006a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <USB_EPStartXfer+0x1226>
 8006a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a54:	3301      	adds	r3, #1
 8006a56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	029b      	lsls	r3, r3, #10
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e02d      	b.n	8006ad4 <USB_EPStartXfer+0x12a0>
 8006a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d125      	bne.n	8006ad4 <USB_EPStartXfer+0x12a0>
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	011a      	lsls	r2, r3, #4
 8006ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006abc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ad2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8218 	beq.w	8006f16 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <USB_EPStartXfer+0x12ea>
 8006b12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 81f5 	bne.w	8006f16 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 81ee 	bne.w	8006f16 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b60:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
 8006b96:	e1be      	b.n	8006f16 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	78db      	ldrb	r3, [r3, #3]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	f040 81b4 	bne.w	8006f12 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d917      	bls.n	8006bf6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	619a      	str	r2, [r3, #24]
 8006bf4:	e00e      	b.n	8006c14 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2200      	movs	r2, #0
 8006c12:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 8085 	bne.w	8006d30 <USB_EPStartXfer+0x14fc>
 8006c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	011a      	lsls	r2, r3, #4
 8006c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c62:	4413      	add	r3, r2
 8006c64:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c86:	d923      	bls.n	8006cd0 <USB_EPStartXfer+0x149c>
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d104      	bne.n	8006ca8 <USB_EPStartXfer+0x1474>
 8006c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	029b      	lsls	r3, r3, #10
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e060      	b.n	8006d92 <USB_EPStartXfer+0x155e>
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10c      	bne.n	8006cf2 <USB_EPStartXfer+0x14be>
 8006cd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e04f      	b.n	8006d92 <USB_EPStartXfer+0x155e>
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <USB_EPStartXfer+0x14de>
 8006d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	029b      	lsls	r3, r3, #10
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	e030      	b.n	8006d92 <USB_EPStartXfer+0x155e>
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d128      	bne.n	8006d92 <USB_EPStartXfer+0x155e>
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d64:	4413      	add	r3, r2
 8006d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	011a      	lsls	r2, r3, #4
 8006d78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8085 	bne.w	8006ebc <USB_EPStartXfer+0x1688>
 8006db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	011a      	lsls	r2, r3, #4
 8006dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dee:	4413      	add	r3, r2
 8006df0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e10:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e12:	d923      	bls.n	8006e5c <USB_EPStartXfer+0x1628>
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <USB_EPStartXfer+0x1600>
 8006e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	029b      	lsls	r3, r3, #10
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4313      	orrs	r3, r2
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e05c      	b.n	8006f16 <USB_EPStartXfer+0x16e2>
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10c      	bne.n	8006e7e <USB_EPStartXfer+0x164a>
 8006e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e04b      	b.n	8006f16 <USB_EPStartXfer+0x16e2>
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <USB_EPStartXfer+0x166a>
 8006e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e98:	3301      	adds	r3, #1
 8006e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	029b      	lsls	r3, r3, #10
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	e02c      	b.n	8006f16 <USB_EPStartXfer+0x16e2>
 8006ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d124      	bne.n	8006f16 <USB_EPStartXfer+0x16e2>
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	011a      	lsls	r2, r3, #4
 8006ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	e001      	b.n	8006f16 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e03a      	b.n	8006f8c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d020      	beq.n	8006fea <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fbe:	81bb      	strh	r3, [r7, #12]
 8006fc0:	89bb      	ldrh	r3, [r7, #12]
 8006fc2:	f083 0310 	eor.w	r3, r3, #16
 8006fc6:	81bb      	strh	r3, [r7, #12]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	89bb      	ldrh	r3, [r7, #12]
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]
 8006fe8:	e01f      	b.n	800702a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007000:	81fb      	strh	r3, [r7, #14]
 8007002:	89fb      	ldrh	r3, [r7, #14]
 8007004:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007008:	81fb      	strh	r3, [r7, #14]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007036:	b480      	push	{r7}
 8007038:	b087      	sub	sp, #28
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	7b1b      	ldrb	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 809d 	bne.w	8007184 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d04c      	beq.n	80070ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	823b      	strh	r3, [r7, #16]
 8007060:	8a3b      	ldrh	r3, [r7, #16]
 8007062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01b      	beq.n	80070a2 <USB_EPClearStall+0x6c>
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800707c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007080:	81fb      	strh	r3, [r7, #14]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800709a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800709e:	b29b      	uxth	r3, r3
 80070a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	78db      	ldrb	r3, [r3, #3]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d06c      	beq.n	8007184 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c0:	81bb      	strh	r3, [r7, #12]
 80070c2:	89bb      	ldrh	r3, [r7, #12]
 80070c4:	f083 0320 	eor.w	r3, r3, #32
 80070c8:	81bb      	strh	r3, [r7, #12]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	441a      	add	r2, r3
 80070d4:	89bb      	ldrh	r3, [r7, #12]
 80070d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8013      	strh	r3, [r2, #0]
 80070ea:	e04b      	b.n	8007184 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	82fb      	strh	r3, [r7, #22]
 80070fa:	8afb      	ldrh	r3, [r7, #22]
 80070fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01b      	beq.n	800713c <USB_EPClearStall+0x106>
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711a:	82bb      	strh	r3, [r7, #20]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	8abb      	ldrh	r3, [r7, #20]
 8007128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800712c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007138:	b29b      	uxth	r3, r3
 800713a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800714e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007152:	827b      	strh	r3, [r7, #18]
 8007154:	8a7b      	ldrh	r3, [r7, #18]
 8007156:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800715a:	827b      	strh	r3, [r7, #18]
 800715c:	8a7b      	ldrh	r3, [r7, #18]
 800715e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007162:	827b      	strh	r3, [r7, #18]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	441a      	add	r2, r3
 800716e:	8a7b      	ldrh	r3, [r7, #18]
 8007170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800717c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007180:	b29b      	uxth	r3, r3
 8007182:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2280      	movs	r2, #128	@ 0x80
 80071a6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr

080071b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr

080071ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071f0:	68fb      	ldr	r3, [r7, #12]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007212:	b480      	push	{r7}
 8007214:	b08b      	sub	sp, #44	@ 0x2c
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	4611      	mov	r1, r2
 800721e:	461a      	mov	r2, r3
 8007220:	460b      	mov	r3, r1
 8007222:	80fb      	strh	r3, [r7, #6]
 8007224:	4613      	mov	r3, r2
 8007226:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007228:	88bb      	ldrh	r3, [r7, #4]
 800722a:	3301      	adds	r3, #1
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	005a      	lsls	r2, r3, #1
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007244:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
 800724a:	e01e      	b.n	800728a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	3301      	adds	r3, #1
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	b21a      	sxth	r2, r3
 800725c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007260:	4313      	orrs	r3, r2
 8007262:	b21b      	sxth	r3, r3
 8007264:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	8a7a      	ldrh	r2, [r7, #18]
 800726a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	3302      	adds	r3, #2
 8007270:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	3302      	adds	r3, #2
 8007276:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	3301      	adds	r3, #1
 800727c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3301      	adds	r3, #1
 8007282:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	3b01      	subs	r3, #1
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1dd      	bne.n	800724c <USB_WritePMA+0x3a>
  }
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	372c      	adds	r7, #44	@ 0x2c
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800729c:	b480      	push	{r7}
 800729e:	b08b      	sub	sp, #44	@ 0x2c
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	460b      	mov	r3, r1
 80072ac:	80fb      	strh	r3, [r7, #6]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80072b2:	88bb      	ldrh	r3, [r7, #4]
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072c2:	88fb      	ldrh	r3, [r7, #6]
 80072c4:	005a      	lsls	r2, r3, #1
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d4:	e01b      	b.n	800730e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	3302      	adds	r3, #2
 80072e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	3301      	adds	r3, #1
 8007300:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	3302      	adds	r3, #2
 8007306:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	3b01      	subs	r3, #1
 800730c:	627b      	str	r3, [r7, #36]	@ 0x24
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e0      	bne.n	80072d6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007314:	88bb      	ldrh	r3, [r7, #4]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	701a      	strb	r2, [r3, #0]
  }
}
 8007330:	bf00      	nop
 8007332:	372c      	adds	r7, #44	@ 0x2c
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr

0800733a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	7c1b      	ldrb	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d115      	bne.n	800737e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007356:	2202      	movs	r2, #2
 8007358:	2181      	movs	r1, #129	@ 0x81
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 fe2b 	bl	8008fb6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800736a:	2202      	movs	r2, #2
 800736c:	2101      	movs	r1, #1
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fe21 	bl	8008fb6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800737c:	e012      	b.n	80073a4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800737e:	2340      	movs	r3, #64	@ 0x40
 8007380:	2202      	movs	r2, #2
 8007382:	2181      	movs	r1, #129	@ 0x81
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fe16 	bl	8008fb6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007390:	2340      	movs	r3, #64	@ 0x40
 8007392:	2202      	movs	r2, #2
 8007394:	2101      	movs	r1, #1
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fe0d 	bl	8008fb6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073a4:	2308      	movs	r3, #8
 80073a6:	2203      	movs	r2, #3
 80073a8:	2182      	movs	r1, #130	@ 0x82
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fe03 	bl	8008fb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073b6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80073ba:	f001 ff23 	bl	8009204 <USBD_static_malloc>
 80073be:	4602      	mov	r2, r0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
 80073d4:	e026      	b.n	8007424 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073dc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	7c1b      	ldrb	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800740a:	2101      	movs	r1, #1
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 fec3 	bl	8009198 <USBD_LL_PrepareReceive>
 8007412:	e007      	b.n	8007424 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800741a:	2340      	movs	r3, #64	@ 0x40
 800741c:	2101      	movs	r1, #1
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 feba 	bl	8009198 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800743e:	2181      	movs	r1, #129	@ 0x81
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fdde 	bl	8009002 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800744c:	2101      	movs	r1, #1
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fdd7 	bl	8009002 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800745c:	2182      	movs	r1, #130	@ 0x82
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 fdcf 	bl	8009002 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00e      	beq.n	8007492 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007484:	4618      	mov	r0, r3
 8007486:	f001 fec9 	bl	800921c <USBD_static_free>
    pdev->pClassData = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d039      	beq.n	800753a <USBD_CDC_Setup+0x9e>
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d17f      	bne.n	80075ca <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	88db      	ldrh	r3, [r3, #6]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d029      	beq.n	8007526 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da11      	bge.n	8007500 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80074e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	88d2      	ldrh	r2, [r2, #6]
 80074ee:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074f0:	6939      	ldr	r1, [r7, #16]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	88db      	ldrh	r3, [r3, #6]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 f9d5 	bl	80088a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80074fe:	e06b      	b.n	80075d8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	785a      	ldrb	r2, [r3, #1]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	88db      	ldrh	r3, [r3, #6]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007516:	6939      	ldr	r1, [r7, #16]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	88db      	ldrh	r3, [r3, #6]
 800751c:	461a      	mov	r2, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f9f0 	bl	8008904 <USBD_CtlPrepareRx>
      break;
 8007524:	e058      	b.n	80075d8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	7850      	ldrb	r0, [r2, #1]
 8007532:	2200      	movs	r2, #0
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	4798      	blx	r3
      break;
 8007538:	e04e      	b.n	80075d8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	785b      	ldrb	r3, [r3, #1]
 800753e:	2b0b      	cmp	r3, #11
 8007540:	d02e      	beq.n	80075a0 <USBD_CDC_Setup+0x104>
 8007542:	2b0b      	cmp	r3, #11
 8007544:	dc38      	bgt.n	80075b8 <USBD_CDC_Setup+0x11c>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <USBD_CDC_Setup+0xb4>
 800754a:	2b0a      	cmp	r3, #10
 800754c:	d014      	beq.n	8007578 <USBD_CDC_Setup+0xdc>
 800754e:	e033      	b.n	80075b8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007556:	2b03      	cmp	r3, #3
 8007558:	d107      	bne.n	800756a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800755a:	f107 030c 	add.w	r3, r7, #12
 800755e:	2202      	movs	r2, #2
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f9a0 	bl	80088a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007568:	e02e      	b.n	80075c8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f931 	bl	80087d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007572:	2302      	movs	r3, #2
 8007574:	75fb      	strb	r3, [r7, #23]
          break;
 8007576:	e027      	b.n	80075c8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800757e:	2b03      	cmp	r3, #3
 8007580:	d107      	bne.n	8007592 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007582:	f107 030f 	add.w	r3, r7, #15
 8007586:	2201      	movs	r2, #1
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 f98c 	bl	80088a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007590:	e01a      	b.n	80075c8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f91d 	bl	80087d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800759a:	2302      	movs	r3, #2
 800759c:	75fb      	strb	r3, [r7, #23]
          break;
 800759e:	e013      	b.n	80075c8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d00d      	beq.n	80075c6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f911 	bl	80087d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80075b2:	2302      	movs	r3, #2
 80075b4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075b6:	e006      	b.n	80075c6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 f90a 	bl	80087d4 <USBD_CtlError>
          ret = USBD_FAIL;
 80075c0:	2302      	movs	r3, #2
 80075c2:	75fb      	strb	r3, [r7, #23]
          break;
 80075c4:	e000      	b.n	80075c8 <USBD_CDC_Setup+0x12c>
          break;
 80075c6:	bf00      	nop
      }
      break;
 80075c8:	e006      	b.n	80075d8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f901 	bl	80087d4 <USBD_CtlError>
      ret = USBD_FAIL;
 80075d2:	2302      	movs	r3, #2
 80075d4:	75fb      	strb	r3, [r7, #23]
      break;
 80075d6:	bf00      	nop
  }

  return ret;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80075fc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d03a      	beq.n	800767e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	331c      	adds	r3, #28
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d029      	beq.n	8007672 <USBD_CDC_DataIn+0x90>
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	331c      	adds	r3, #28
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	78f9      	ldrb	r1, [r7, #3]
 8007632:	68b8      	ldr	r0, [r7, #8]
 8007634:	460b      	mov	r3, r1
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	4403      	add	r3, r0
 800763e:	3338      	adds	r3, #56	@ 0x38
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	fbb2 f1f3 	udiv	r1, r2, r3
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d110      	bne.n	8007672 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	440b      	add	r3, r1
 800765e:	331c      	adds	r3, #28
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007664:	78f9      	ldrb	r1, [r7, #3]
 8007666:	2300      	movs	r3, #0
 8007668:	2200      	movs	r2, #0
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fd71 	bl	8009152 <USBD_LL_Transmit>
 8007670:	e003      	b.n	800767a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e000      	b.n	8007680 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800767e:	2302      	movs	r3, #2
  }
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 fd9c 	bl	80091de <USBD_LL_GetRxDataSize>
 80076a6:	4602      	mov	r2, r0
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00d      	beq.n	80076d4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80076cc:	4611      	mov	r1, r2
 80076ce:	4798      	blx	r3

    return USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d014      	beq.n	8007722 <USBD_CDC_EP0_RxReady+0x44>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80076fe:	2bff      	cmp	r3, #255	@ 0xff
 8007700:	d00f      	beq.n	8007722 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007710:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007718:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	22ff      	movs	r2, #255	@ 0xff
 800771e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2243      	movs	r2, #67	@ 0x43
 8007738:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800773a:	4b03      	ldr	r3, [pc, #12]	@ (8007748 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20000094 	.word	0x20000094

0800774c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2243      	movs	r2, #67	@ 0x43
 8007758:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800775a:	4b03      	ldr	r3, [pc, #12]	@ (8007768 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	20000050 	.word	0x20000050

0800776c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2243      	movs	r2, #67	@ 0x43
 8007778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800777a:	4b03      	ldr	r3, [pc, #12]	@ (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	200000d8 	.word	0x200000d8

0800778c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	220a      	movs	r2, #10
 8007798:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800779a:	4b03      	ldr	r3, [pc, #12]	@ (80077a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	2000000c 	.word	0x2000000c

080077ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80077b6:	2302      	movs	r3, #2
 80077b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	4613      	mov	r3, r2
 80077e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d017      	beq.n	800787a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7c1b      	ldrb	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800785c:	2101      	movs	r1, #1
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fc9a 	bl	8009198 <USBD_LL_PrepareReceive>
 8007864:	e007      	b.n	8007876 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800786c:	2340      	movs	r3, #64	@ 0x40
 800786e:	2101      	movs	r1, #1
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 fc91 	bl	8009198 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e000      	b.n	800787c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007898:	2302      	movs	r3, #2
 800789a:	e01a      	b.n	80078d2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	79fa      	ldrb	r2, [r7, #7]
 80078c8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f001 fafe 	bl	8008ecc <USBD_LL_Init>

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d006      	beq.n	80078fc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]
 80078fa:	e001      	b.n	8007900 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80078fc:	2302      	movs	r3, #2
 80078fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr

0800790c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 fb33 	bl	8008f80 <USBD_LL_Start>

  return USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007944:	2302      	movs	r3, #2
 8007946:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00c      	beq.n	800796c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	78fa      	ldrb	r2, [r7, #3]
 800795c:	4611      	mov	r1, r2
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	4611      	mov	r1, r2
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fed7 	bl	8008762 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079c2:	461a      	mov	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d016      	beq.n	8007a06 <USBD_LL_SetupStage+0x6a>
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d81c      	bhi.n	8007a16 <USBD_LL_SetupStage+0x7a>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <USBD_LL_SetupStage+0x4a>
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d008      	beq.n	80079f6 <USBD_LL_SetupStage+0x5a>
 80079e4:	e017      	b.n	8007a16 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f9ca 	bl	8007d88 <USBD_StdDevReq>
      break;
 80079f4:	e01a      	b.n	8007a2c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa2c 	bl	8007e5c <USBD_StdItfReq>
      break;
 8007a04:	e012      	b.n	8007a2c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa6c 	bl	8007eec <USBD_StdEPReq>
      break;
 8007a14:	e00a      	b.n	8007a2c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007a1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fb0b 	bl	8009040 <USBD_LL_StallEP>
      break;
 8007a2a:	bf00      	nop
  }

  return USBD_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d14b      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d134      	bne.n	8007ac6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d919      	bls.n	8007a9c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	1ad2      	subs	r2, r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d203      	bcs.n	8007a8a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	e002      	b.n	8007a90 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 ff53 	bl	8008940 <USBD_CtlContinueRx>
 8007a9a:	e038      	b.n	8007b0e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d105      	bne.n	8007abe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 ff50 	bl	8008964 <USBD_CtlSendStatus>
 8007ac4:	e023      	b.n	8007b0e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007acc:	2b05      	cmp	r3, #5
 8007ace:	d11e      	bne.n	8007b0e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f001 fab0 	bl	8009040 <USBD_LL_StallEP>
 8007ae0:	e015      	b.n	8007b0e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d108      	bne.n	8007b0a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	7afa      	ldrb	r2, [r7, #11]
 8007b02:	4611      	mov	r1, r2
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	4798      	blx	r3
 8007b08:	e001      	b.n	8007b0e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e000      	b.n	8007b10 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	460b      	mov	r3, r1
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d17f      	bne.n	8007c2c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3314      	adds	r3, #20
 8007b30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d15c      	bne.n	8007bf6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d915      	bls.n	8007b74 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	1ad2      	subs	r2, r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 febd 	bl	80088e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b66:	2300      	movs	r3, #0
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f001 fb13 	bl	8009198 <USBD_LL_PrepareReceive>
 8007b72:	e04e      	b.n	8007c12 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	6912      	ldr	r2, [r2, #16]
 8007b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b80:	fb01 f202 	mul.w	r2, r1, r2
 8007b84:	1a9b      	subs	r3, r3, r2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d11c      	bne.n	8007bc4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d316      	bcc.n	8007bc4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d20f      	bcs.n	8007bc4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fe99 	bl	80088e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2100      	movs	r1, #0
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 faeb 	bl	8009198 <USBD_LL_PrepareReceive>
 8007bc2:	e026      	b.n	8007c12 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d105      	bne.n	8007be6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007be6:	2180      	movs	r1, #128	@ 0x80
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f001 fa29 	bl	8009040 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fecb 	bl	800898a <USBD_CtlReceiveStatus>
 8007bf4:	e00d      	b.n	8007c12 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d004      	beq.n	8007c0a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d103      	bne.n	8007c12 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c0a:	2180      	movs	r1, #128	@ 0x80
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f001 fa17 	bl	8009040 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d11d      	bne.n	8007c58 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff fe81 	bl	8007924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c2a:	e015      	b.n	8007c58 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d108      	bne.n	8007c54 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	7afa      	ldrb	r2, [r7, #11]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	4798      	blx	r3
 8007c52:	e001      	b.n	8007c58 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c54:	2302      	movs	r3, #2
 8007c56:	e000      	b.n	8007c5a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c6a:	2340      	movs	r3, #64	@ 0x40
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 f9a0 	bl	8008fb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2240      	movs	r2, #64	@ 0x40
 8007c82:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c86:	2340      	movs	r3, #64	@ 0x40
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2180      	movs	r1, #128	@ 0x80
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 f992 	bl	8008fb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2240      	movs	r2, #64	@ 0x40
 8007c9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6852      	ldr	r2, [r2, #4]
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
  }

  return USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr

08007d02 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr

08007d2a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d105      	bne.n	8007d48 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d10b      	bne.n	8007d7e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d005      	beq.n	8007d7e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d9e:	2b40      	cmp	r3, #64	@ 0x40
 8007da0:	d005      	beq.n	8007dae <USBD_StdDevReq+0x26>
 8007da2:	2b40      	cmp	r3, #64	@ 0x40
 8007da4:	d84f      	bhi.n	8007e46 <USBD_StdDevReq+0xbe>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <USBD_StdDevReq+0x36>
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d14b      	bne.n	8007e46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
      break;
 8007dbc:	e048      	b.n	8007e50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	d839      	bhi.n	8007e3a <USBD_StdDevReq+0xb2>
 8007dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dcc <USBD_StdDevReq+0x44>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007e1d 	.word	0x08007e1d
 8007dd0:	08007e31 	.word	0x08007e31
 8007dd4:	08007e3b 	.word	0x08007e3b
 8007dd8:	08007e27 	.word	0x08007e27
 8007ddc:	08007e3b 	.word	0x08007e3b
 8007de0:	08007dff 	.word	0x08007dff
 8007de4:	08007df5 	.word	0x08007df5
 8007de8:	08007e3b 	.word	0x08007e3b
 8007dec:	08007e13 	.word	0x08007e13
 8007df0:	08007e09 	.word	0x08007e09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f9dc 	bl	80081b4 <USBD_GetDescriptor>
          break;
 8007dfc:	e022      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fb3f 	bl	8008484 <USBD_SetAddress>
          break;
 8007e06:	e01d      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fb7e 	bl	800850c <USBD_SetConfig>
          break;
 8007e10:	e018      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fc07 	bl	8008628 <USBD_GetConfig>
          break;
 8007e1a:	e013      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fc37 	bl	8008692 <USBD_GetStatus>
          break;
 8007e24:	e00e      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc65 	bl	80086f8 <USBD_SetFeature>
          break;
 8007e2e:	e009      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fc74 	bl	8008720 <USBD_ClrFeature>
          break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fcc9 	bl	80087d4 <USBD_CtlError>
          break;
 8007e42:	bf00      	nop
      }
      break;
 8007e44:	e004      	b.n	8007e50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fcc3 	bl	80087d4 <USBD_CtlError>
      break;
 8007e4e:	bf00      	nop
  }

  return ret;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop

08007e5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e72:	2b40      	cmp	r3, #64	@ 0x40
 8007e74:	d005      	beq.n	8007e82 <USBD_StdItfReq+0x26>
 8007e76:	2b40      	cmp	r3, #64	@ 0x40
 8007e78:	d82e      	bhi.n	8007ed8 <USBD_StdItfReq+0x7c>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <USBD_StdItfReq+0x26>
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d12a      	bne.n	8007ed8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d81d      	bhi.n	8007eca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	889b      	ldrh	r3, [r3, #4]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d813      	bhi.n	8007ec0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d110      	bne.n	8007ed4 <USBD_StdItfReq+0x78>
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10d      	bne.n	8007ed4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fd53 	bl	8008964 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ebe:	e009      	b.n	8007ed4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fc86 	bl	80087d4 <USBD_CtlError>
          break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fc81 	bl	80087d4 <USBD_CtlError>
          break;
 8007ed2:	e000      	b.n	8007ed6 <USBD_StdItfReq+0x7a>
          break;
 8007ed4:	bf00      	nop
      }
      break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc7a 	bl	80087d4 <USBD_CtlError>
      break;
 8007ee0:	bf00      	nop
  }

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	889b      	ldrh	r3, [r3, #4]
 8007efe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f08:	2b40      	cmp	r3, #64	@ 0x40
 8007f0a:	d007      	beq.n	8007f1c <USBD_StdEPReq+0x30>
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	f200 8146 	bhi.w	800819e <USBD_StdEPReq+0x2b2>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <USBD_StdEPReq+0x40>
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	f040 8141 	bne.w	800819e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
      break;
 8007f2a:	e13d      	b.n	80081a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d10a      	bne.n	8007f4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	e12d      	b.n	80081aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d007      	beq.n	8007f66 <USBD_StdEPReq+0x7a>
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	f300 811b 	bgt.w	8008192 <USBD_StdEPReq+0x2a6>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d072      	beq.n	8008046 <USBD_StdEPReq+0x15a>
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d03a      	beq.n	8007fda <USBD_StdEPReq+0xee>
 8007f64:	e115      	b.n	8008192 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d002      	beq.n	8007f76 <USBD_StdEPReq+0x8a>
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d015      	beq.n	8007fa0 <USBD_StdEPReq+0xb4>
 8007f74:	e02b      	b.n	8007fce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00c      	beq.n	8007f96 <USBD_StdEPReq+0xaa>
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b80      	cmp	r3, #128	@ 0x80
 8007f80:	d009      	beq.n	8007f96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f85a 	bl	8009040 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f8c:	2180      	movs	r1, #128	@ 0x80
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 f856 	bl	8009040 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f94:	e020      	b.n	8007fd8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc1b 	bl	80087d4 <USBD_CtlError>
              break;
 8007f9e:	e01b      	b.n	8007fd8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <USBD_StdEPReq+0xda>
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b80      	cmp	r3, #128	@ 0x80
 8007fb2:	d008      	beq.n	8007fc6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	88db      	ldrh	r3, [r3, #6]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 f83d 	bl	8009040 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fccc 	bl	8008964 <USBD_CtlSendStatus>

              break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fbff 	bl	80087d4 <USBD_CtlError>
              break;
 8007fd6:	bf00      	nop
          }
          break;
 8007fd8:	e0e0      	b.n	800819c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d002      	beq.n	8007fea <USBD_StdEPReq+0xfe>
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d015      	beq.n	8008014 <USBD_StdEPReq+0x128>
 8007fe8:	e026      	b.n	8008038 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00c      	beq.n	800800a <USBD_StdEPReq+0x11e>
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b80      	cmp	r3, #128	@ 0x80
 8007ff4:	d009      	beq.n	800800a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f820 	bl	8009040 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008000:	2180      	movs	r1, #128	@ 0x80
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f81c 	bl	8009040 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008008:	e01c      	b.n	8008044 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fbe1 	bl	80087d4 <USBD_CtlError>
              break;
 8008012:	e017      	b.n	8008044 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d112      	bne.n	8008042 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 f827 	bl	800907e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc97 	bl	8008964 <USBD_CtlSendStatus>
              }
              break;
 8008036:	e004      	b.n	8008042 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fbca 	bl	80087d4 <USBD_CtlError>
              break;
 8008040:	e000      	b.n	8008044 <USBD_StdEPReq+0x158>
              break;
 8008042:	bf00      	nop
          }
          break;
 8008044:	e0aa      	b.n	800819c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800804c:	2b02      	cmp	r3, #2
 800804e:	d002      	beq.n	8008056 <USBD_StdEPReq+0x16a>
 8008050:	2b03      	cmp	r3, #3
 8008052:	d032      	beq.n	80080ba <USBD_StdEPReq+0x1ce>
 8008054:	e097      	b.n	8008186 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d007      	beq.n	800806c <USBD_StdEPReq+0x180>
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b80      	cmp	r3, #128	@ 0x80
 8008060:	d004      	beq.n	800806c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fbb5 	bl	80087d4 <USBD_CtlError>
                break;
 800806a:	e091      	b.n	8008190 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800806c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008070:	2b00      	cmp	r3, #0
 8008072:	da0b      	bge.n	800808c <USBD_StdEPReq+0x1a0>
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	3310      	adds	r3, #16
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4413      	add	r3, r2
 8008088:	3304      	adds	r3, #4
 800808a:	e00b      	b.n	80080a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4413      	add	r3, r2
 80080a2:	3304      	adds	r3, #4
 80080a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2202      	movs	r2, #2
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fbf8 	bl	80088a8 <USBD_CtlSendData>
              break;
 80080b8:	e06a      	b.n	8008190 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da11      	bge.n	80080e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	f003 020f 	and.w	r2, r3, #15
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	440b      	add	r3, r1
 80080d4:	3318      	adds	r3, #24
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d117      	bne.n	800810c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fb78 	bl	80087d4 <USBD_CtlError>
                  break;
 80080e4:	e054      	b.n	8008190 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	f003 020f 	and.w	r2, r3, #15
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fb65 	bl	80087d4 <USBD_CtlError>
                  break;
 800810a:	e041      	b.n	8008190 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800810c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008110:	2b00      	cmp	r3, #0
 8008112:	da0b      	bge.n	800812c <USBD_StdEPReq+0x240>
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	3310      	adds	r3, #16
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	4413      	add	r3, r2
 8008128:	3304      	adds	r3, #4
 800812a:	e00b      	b.n	8008144 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <USBD_StdEPReq+0x266>
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b80      	cmp	r3, #128	@ 0x80
 8008150:	d103      	bne.n	800815a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	e00e      	b.n	8008178 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 ffac 	bl	80090bc <USBD_LL_IsStallEP>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	e002      	b.n	8008178 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2202      	movs	r2, #2
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fb92 	bl	80088a8 <USBD_CtlSendData>
              break;
 8008184:	e004      	b.n	8008190 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fb23 	bl	80087d4 <USBD_CtlError>
              break;
 800818e:	bf00      	nop
          }
          break;
 8008190:	e004      	b.n	800819c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb1d 	bl	80087d4 <USBD_CtlError>
          break;
 800819a:	bf00      	nop
      }
      break;
 800819c:	e004      	b.n	80081a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fb17 	bl	80087d4 <USBD_CtlError>
      break;
 80081a6:	bf00      	nop
  }

  return ret;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	885b      	ldrh	r3, [r3, #2]
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b06      	cmp	r3, #6
 80081d6:	f200 8128 	bhi.w	800842a <USBD_GetDescriptor+0x276>
 80081da:	a201      	add	r2, pc, #4	@ (adr r2, 80081e0 <USBD_GetDescriptor+0x2c>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008215 	.word	0x08008215
 80081e8:	08008255 	.word	0x08008255
 80081ec:	0800842b 	.word	0x0800842b
 80081f0:	0800842b 	.word	0x0800842b
 80081f4:	080083cb 	.word	0x080083cb
 80081f8:	080083f7 	.word	0x080083f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
      break;
 8008212:	e112      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7c1b      	ldrb	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10d      	bne.n	8008238 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	f107 0208 	add.w	r2, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	2202      	movs	r2, #2
 8008234:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008236:	e100      	b.n	800843a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800823e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008240:	f107 0208 	add.w	r2, r7, #8
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
 8008248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3301      	adds	r3, #1
 800824e:	2202      	movs	r2, #2
 8008250:	701a      	strb	r2, [r3, #0]
      break;
 8008252:	e0f2      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	885b      	ldrh	r3, [r3, #2]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b05      	cmp	r3, #5
 800825c:	f200 80ac 	bhi.w	80083b8 <USBD_GetDescriptor+0x204>
 8008260:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <USBD_GetDescriptor+0xb4>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	08008281 	.word	0x08008281
 800826c:	080082b5 	.word	0x080082b5
 8008270:	080082e9 	.word	0x080082e9
 8008274:	0800831d 	.word	0x0800831d
 8008278:	08008351 	.word	0x08008351
 800827c:	08008385 	.word	0x08008385
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7c12      	ldrb	r2, [r2, #16]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a2:	e091      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa94 	bl	80087d4 <USBD_CtlError>
            err++;
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	3301      	adds	r3, #1
 80082b0:	72fb      	strb	r3, [r7, #11]
          break;
 80082b2:	e089      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d6:	e077      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa7a 	bl	80087d4 <USBD_CtlError>
            err++;
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	3301      	adds	r3, #1
 80082e4:	72fb      	strb	r3, [r7, #11]
          break;
 80082e6:	e06f      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7c12      	ldrb	r2, [r2, #16]
 8008300:	f107 0108 	add.w	r1, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800830a:	e05d      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa60 	bl	80087d4 <USBD_CtlError>
            err++;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	3301      	adds	r3, #1
 8008318:	72fb      	strb	r3, [r7, #11]
          break;
 800831a:	e055      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	7c12      	ldrb	r2, [r2, #16]
 8008334:	f107 0108 	add.w	r1, r7, #8
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
 800833c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800833e:	e043      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa46 	bl	80087d4 <USBD_CtlError>
            err++;
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	3301      	adds	r3, #1
 800834c:	72fb      	strb	r3, [r7, #11]
          break;
 800834e:	e03b      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	7c12      	ldrb	r2, [r2, #16]
 8008368:	f107 0108 	add.w	r1, r7, #8
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008372:	e029      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fa2c 	bl	80087d4 <USBD_CtlError>
            err++;
 800837c:	7afb      	ldrb	r3, [r7, #11]
 800837e:	3301      	adds	r3, #1
 8008380:	72fb      	strb	r3, [r7, #11]
          break;
 8008382:	e021      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	7c12      	ldrb	r2, [r2, #16]
 800839c:	f107 0108 	add.w	r1, r7, #8
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083a6:	e00f      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa12 	bl	80087d4 <USBD_CtlError>
            err++;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	3301      	adds	r3, #1
 80083b4:	72fb      	strb	r3, [r7, #11]
          break;
 80083b6:	e007      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa0a 	bl	80087d4 <USBD_CtlError>
          err++;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	3301      	adds	r3, #1
 80083c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80083c6:	e038      	b.n	800843a <USBD_GetDescriptor+0x286>
 80083c8:	e037      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7c1b      	ldrb	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083da:	f107 0208 	add.w	r2, r7, #8
 80083de:	4610      	mov	r0, r2
 80083e0:	4798      	blx	r3
 80083e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083e4:	e029      	b.n	800843a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f9f3 	bl	80087d4 <USBD_CtlError>
        err++;
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	3301      	adds	r3, #1
 80083f2:	72fb      	strb	r3, [r7, #11]
      break;
 80083f4:	e021      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7c1b      	ldrb	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10d      	bne.n	800841a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	f107 0208 	add.w	r2, r7, #8
 800840a:	4610      	mov	r0, r2
 800840c:	4798      	blx	r3
 800840e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3301      	adds	r3, #1
 8008414:	2207      	movs	r2, #7
 8008416:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008418:	e00f      	b.n	800843a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f9d9 	bl	80087d4 <USBD_CtlError>
        err++;
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	3301      	adds	r3, #1
 8008426:	72fb      	strb	r3, [r7, #11]
      break;
 8008428:	e007      	b.n	800843a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f9d1 	bl	80087d4 <USBD_CtlError>
      err++;
 8008432:	7afb      	ldrb	r3, [r7, #11]
 8008434:	3301      	adds	r3, #1
 8008436:	72fb      	strb	r3, [r7, #11]
      break;
 8008438:	bf00      	nop
  }

  if (err != 0U)
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11c      	bne.n	800847a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008440:	893b      	ldrh	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d011      	beq.n	800846a <USBD_GetDescriptor+0x2b6>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00d      	beq.n	800846a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	88da      	ldrh	r2, [r3, #6]
 8008452:	893b      	ldrh	r3, [r7, #8]
 8008454:	4293      	cmp	r3, r2
 8008456:	bf28      	it	cs
 8008458:	4613      	movcs	r3, r2
 800845a:	b29b      	uxth	r3, r3
 800845c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800845e:	893b      	ldrh	r3, [r7, #8]
 8008460:	461a      	mov	r2, r3
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fa1f 	bl	80088a8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa76 	bl	8008964 <USBD_CtlSendStatus>
 8008478:	e000      	b.n	800847c <USBD_GetDescriptor+0x2c8>
    return;
 800847a:	bf00      	nop
    }
  }
}
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop

08008484 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	889b      	ldrh	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d130      	bne.n	80084f8 <USBD_SetAddress+0x74>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d12c      	bne.n	80084f8 <USBD_SetAddress+0x74>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80084a4:	d828      	bhi.n	80084f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	885b      	ldrh	r3, [r3, #2]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d104      	bne.n	80084c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f988 	bl	80087d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c4:	e01d      	b.n	8008502 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fe1e 	bl	8009114 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fa43 	bl	8008964 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ec:	e009      	b.n	8008502 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f6:	e004      	b.n	8008502 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f96a 	bl	80087d4 <USBD_CtlError>
  }
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	885b      	ldrh	r3, [r3, #2]
 800851a:	b2da      	uxtb	r2, r3
 800851c:	4b41      	ldr	r3, [pc, #260]	@ (8008624 <USBD_SetConfig+0x118>)
 800851e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008520:	4b40      	ldr	r3, [pc, #256]	@ (8008624 <USBD_SetConfig+0x118>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d904      	bls.n	8008532 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f952 	bl	80087d4 <USBD_CtlError>
 8008530:	e075      	b.n	800861e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008538:	2b02      	cmp	r3, #2
 800853a:	d002      	beq.n	8008542 <USBD_SetConfig+0x36>
 800853c:	2b03      	cmp	r3, #3
 800853e:	d023      	beq.n	8008588 <USBD_SetConfig+0x7c>
 8008540:	e062      	b.n	8008608 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008542:	4b38      	ldr	r3, [pc, #224]	@ (8008624 <USBD_SetConfig+0x118>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01a      	beq.n	8008580 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800854a:	4b36      	ldr	r3, [pc, #216]	@ (8008624 <USBD_SetConfig+0x118>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2203      	movs	r2, #3
 8008558:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800855c:	4b31      	ldr	r3, [pc, #196]	@ (8008624 <USBD_SetConfig+0x118>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff f9e8 	bl	8007938 <USBD_SetClassConfig>
 8008568:	4603      	mov	r3, r0
 800856a:	2b02      	cmp	r3, #2
 800856c:	d104      	bne.n	8008578 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f92f 	bl	80087d4 <USBD_CtlError>
            return;
 8008576:	e052      	b.n	800861e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f9f3 	bl	8008964 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800857e:	e04e      	b.n	800861e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f9ef 	bl	8008964 <USBD_CtlSendStatus>
        break;
 8008586:	e04a      	b.n	800861e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008588:	4b26      	ldr	r3, [pc, #152]	@ (8008624 <USBD_SetConfig+0x118>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d112      	bne.n	80085b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008598:	4b22      	ldr	r3, [pc, #136]	@ (8008624 <USBD_SetConfig+0x118>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80085a2:	4b20      	ldr	r3, [pc, #128]	@ (8008624 <USBD_SetConfig+0x118>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff f9e4 	bl	8007976 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9d8 	bl	8008964 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80085b4:	e033      	b.n	800861e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80085b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008624 <USBD_SetConfig+0x118>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d01d      	beq.n	8008600 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff f9d2 	bl	8007976 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80085d2:	4b14      	ldr	r3, [pc, #80]	@ (8008624 <USBD_SetConfig+0x118>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085dc:	4b11      	ldr	r3, [pc, #68]	@ (8008624 <USBD_SetConfig+0x118>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff f9a8 	bl	8007938 <USBD_SetClassConfig>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d104      	bne.n	80085f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8ef 	bl	80087d4 <USBD_CtlError>
            return;
 80085f6:	e012      	b.n	800861e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f9b3 	bl	8008964 <USBD_CtlSendStatus>
        break;
 80085fe:	e00e      	b.n	800861e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f9af 	bl	8008964 <USBD_CtlSendStatus>
        break;
 8008606:	e00a      	b.n	800861e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f8e2 	bl	80087d4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008610:	4b04      	ldr	r3, [pc, #16]	@ (8008624 <USBD_SetConfig+0x118>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff f9ad 	bl	8007976 <USBD_ClrClassConfig>
        break;
 800861c:	bf00      	nop
    }
  }
}
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	2000033c 	.word	0x2000033c

08008628 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88db      	ldrh	r3, [r3, #6]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d004      	beq.n	8008644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8c9 	bl	80087d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008642:	e022      	b.n	800868a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800864a:	2b02      	cmp	r3, #2
 800864c:	dc02      	bgt.n	8008654 <USBD_GetConfig+0x2c>
 800864e:	2b00      	cmp	r3, #0
 8008650:	dc03      	bgt.n	800865a <USBD_GetConfig+0x32>
 8008652:	e015      	b.n	8008680 <USBD_GetConfig+0x58>
 8008654:	2b03      	cmp	r3, #3
 8008656:	d00b      	beq.n	8008670 <USBD_GetConfig+0x48>
 8008658:	e012      	b.n	8008680 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3308      	adds	r3, #8
 8008664:	2201      	movs	r2, #1
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f91d 	bl	80088a8 <USBD_CtlSendData>
        break;
 800866e:	e00c      	b.n	800868a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	2201      	movs	r2, #1
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f915 	bl	80088a8 <USBD_CtlSendData>
        break;
 800867e:	e004      	b.n	800868a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8a6 	bl	80087d4 <USBD_CtlError>
        break;
 8008688:	bf00      	nop
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a2:	3b01      	subs	r3, #1
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d81e      	bhi.n	80086e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	88db      	ldrh	r3, [r3, #6]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d004      	beq.n	80086ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f88e 	bl	80087d4 <USBD_CtlError>
        break;
 80086b8:	e01a      	b.n	80086f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f043 0202 	orr.w	r2, r3, #2
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	330c      	adds	r3, #12
 80086da:	2202      	movs	r2, #2
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f8e2 	bl	80088a8 <USBD_CtlSendData>
      break;
 80086e4:	e004      	b.n	80086f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f873 	bl	80087d4 <USBD_CtlError>
      break;
 80086ee:	bf00      	nop
  }
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d106      	bne.n	8008718 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f926 	bl	8008964 <USBD_CtlSendStatus>
  }
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008730:	3b01      	subs	r3, #1
 8008732:	2b02      	cmp	r3, #2
 8008734:	d80b      	bhi.n	800874e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10c      	bne.n	8008758 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f90c 	bl	8008964 <USBD_CtlSendStatus>
      }
      break;
 800874c:	e004      	b.n	8008758 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f83f 	bl	80087d4 <USBD_CtlError>
      break;
 8008756:	e000      	b.n	800875a <USBD_ClrFeature+0x3a>
      break;
 8008758:	bf00      	nop
  }
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	785a      	ldrb	r2, [r3, #1]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	3302      	adds	r3, #2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	3303      	adds	r3, #3
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	b29b      	uxth	r3, r3
 800878e:	4413      	add	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	3304      	adds	r3, #4
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	461a      	mov	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	3305      	adds	r3, #5
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	3306      	adds	r3, #6
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	3307      	adds	r3, #7
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	4413      	add	r3, r2
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	80da      	strh	r2, [r3, #6]

}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80087de:	2180      	movs	r1, #128	@ 0x80
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fc2d 	bl	8009040 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80087e6:	2100      	movs	r1, #0
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fc29 	bl	8009040 <USBD_LL_StallEP>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b086      	sub	sp, #24
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d032      	beq.n	8008872 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f834 	bl	800887a <USBD_GetLen>
 8008812:	4603      	mov	r3, r0
 8008814:	3301      	adds	r3, #1
 8008816:	b29b      	uxth	r3, r3
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	75fa      	strb	r2, [r7, #23]
 8008826:	461a      	mov	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4413      	add	r3, r2
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	75fa      	strb	r2, [r7, #23]
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	2203      	movs	r2, #3
 8008840:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008842:	e012      	b.n	800886a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	60fa      	str	r2, [r7, #12]
 800884a:	7dfa      	ldrb	r2, [r7, #23]
 800884c:	1c51      	adds	r1, r2, #1
 800884e:	75f9      	strb	r1, [r7, #23]
 8008850:	4611      	mov	r1, r2
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	440a      	add	r2, r1
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	75fa      	strb	r2, [r7, #23]
 8008860:	461a      	mov	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4413      	add	r3, r2
 8008866:	2200      	movs	r2, #0
 8008868:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e8      	bne.n	8008844 <USBD_GetString+0x4e>
    }
  }
}
 8008872:	bf00      	nop
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008886:	e005      	b.n	8008894 <USBD_GetLen+0x1a>
  {
    len++;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	3301      	adds	r3, #1
 800888c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3301      	adds	r3, #1
 8008892:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1f5      	bne.n	8008888 <USBD_GetLen+0xe>
  }

  return len;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	2100      	movs	r1, #0
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 fc3e 	bl	8009152 <USBD_LL_Transmit>

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	2100      	movs	r1, #0
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 fc2c 	bl	8009152 <USBD_LL_Transmit>

  return USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2203      	movs	r2, #3
 8008916:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800891a:	88fa      	ldrh	r2, [r7, #6]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008922:	88fa      	ldrh	r2, [r7, #6]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	2100      	movs	r1, #0
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fc31 	bl	8009198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800894e:	88fb      	ldrh	r3, [r7, #6]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	2100      	movs	r1, #0
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fc1f 	bl	8009198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2204      	movs	r2, #4
 8008970:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008974:	2300      	movs	r3, #0
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fbe9 	bl	8009152 <USBD_LL_Transmit>

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2205      	movs	r2, #5
 8008996:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800899a:	2300      	movs	r3, #0
 800899c:	2200      	movs	r2, #0
 800899e:	2100      	movs	r1, #0
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fbf9 	bl	8009198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089b4:	2200      	movs	r2, #0
 80089b6:	4912      	ldr	r1, [pc, #72]	@ (8008a00 <MX_USB_DEVICE_Init+0x50>)
 80089b8:	4812      	ldr	r0, [pc, #72]	@ (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089ba:	f7fe ff63 	bl	8007884 <USBD_Init>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089c4:	f7f7 fe78 	bl	80006b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089c8:	490f      	ldr	r1, [pc, #60]	@ (8008a08 <MX_USB_DEVICE_Init+0x58>)
 80089ca:	480e      	ldr	r0, [pc, #56]	@ (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089cc:	f7fe ff85 	bl	80078da <USBD_RegisterClass>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089d6:	f7f7 fe6f 	bl	80006b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089da:	490c      	ldr	r1, [pc, #48]	@ (8008a0c <MX_USB_DEVICE_Init+0x5c>)
 80089dc:	4809      	ldr	r0, [pc, #36]	@ (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089de:	f7fe fee5 	bl	80077ac <USBD_CDC_RegisterInterface>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089e8:	f7f7 fe66 	bl	80006b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089ec:	4805      	ldr	r0, [pc, #20]	@ (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089ee:	f7fe ff8d 	bl	800790c <USBD_Start>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089f8:	f7f7 fe5e 	bl	80006b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089fc:	bf00      	nop
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	2000012c 	.word	0x2000012c
 8008a04:	20000340 	.word	0x20000340
 8008a08:	20000018 	.word	0x20000018
 8008a0c:	2000011c 	.word	0x2000011c

08008a10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a14:	2200      	movs	r2, #0
 8008a16:	4905      	ldr	r1, [pc, #20]	@ (8008a2c <CDC_Init_FS+0x1c>)
 8008a18:	4805      	ldr	r0, [pc, #20]	@ (8008a30 <CDC_Init_FS+0x20>)
 8008a1a:	f7fe fedd 	bl	80077d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a1e:	4905      	ldr	r1, [pc, #20]	@ (8008a34 <CDC_Init_FS+0x24>)
 8008a20:	4803      	ldr	r0, [pc, #12]	@ (8008a30 <CDC_Init_FS+0x20>)
 8008a22:	f7fe fef2 	bl	800780a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20000a04 	.word	0x20000a04
 8008a30:	20000340 	.word	0x20000340
 8008a34:	20000604 	.word	0x20000604

08008a38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr
	...

08008a48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
 8008a54:	4613      	mov	r3, r2
 8008a56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b23      	cmp	r3, #35	@ 0x23
 8008a5c:	d84a      	bhi.n	8008af4 <CDC_Control_FS+0xac>
 8008a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a64 <CDC_Control_FS+0x1c>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008af5 	.word	0x08008af5
 8008a68:	08008af5 	.word	0x08008af5
 8008a6c:	08008af5 	.word	0x08008af5
 8008a70:	08008af5 	.word	0x08008af5
 8008a74:	08008af5 	.word	0x08008af5
 8008a78:	08008af5 	.word	0x08008af5
 8008a7c:	08008af5 	.word	0x08008af5
 8008a80:	08008af5 	.word	0x08008af5
 8008a84:	08008af5 	.word	0x08008af5
 8008a88:	08008af5 	.word	0x08008af5
 8008a8c:	08008af5 	.word	0x08008af5
 8008a90:	08008af5 	.word	0x08008af5
 8008a94:	08008af5 	.word	0x08008af5
 8008a98:	08008af5 	.word	0x08008af5
 8008a9c:	08008af5 	.word	0x08008af5
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008af5 	.word	0x08008af5
 8008aa8:	08008af5 	.word	0x08008af5
 8008aac:	08008af5 	.word	0x08008af5
 8008ab0:	08008af5 	.word	0x08008af5
 8008ab4:	08008af5 	.word	0x08008af5
 8008ab8:	08008af5 	.word	0x08008af5
 8008abc:	08008af5 	.word	0x08008af5
 8008ac0:	08008af5 	.word	0x08008af5
 8008ac4:	08008af5 	.word	0x08008af5
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	08008af5 	.word	0x08008af5
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008af5 	.word	0x08008af5
 8008adc:	08008af5 	.word	0x08008af5
 8008ae0:	08008af5 	.word	0x08008af5
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008af5 	.word	0x08008af5
 8008aec:	08008af5 	.word	0x08008af5
 8008af0:	08008af5 	.word	0x08008af5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008af4:	bf00      	nop
  }

  return (USBD_OK);
 8008af6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop

08008b04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4805      	ldr	r0, [pc, #20]	@ (8008b28 <CDC_Receive_FS+0x24>)
 8008b12:	f7fe fe7a 	bl	800780a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b16:	4804      	ldr	r0, [pc, #16]	@ (8008b28 <CDC_Receive_FS+0x24>)
 8008b18:	f7fe fe8a 	bl	8007830 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000340 	.word	0x20000340

08008b2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2212      	movs	r2, #18
 8008b3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b3e:	4b03      	ldr	r3, [pc, #12]	@ (8008b4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000148 	.word	0x20000148

08008b50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2204      	movs	r2, #4
 8008b60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b62:	4b03      	ldr	r3, [pc, #12]	@ (8008b70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	2000015c 	.word	0x2000015c

08008b74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d105      	bne.n	8008b92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4907      	ldr	r1, [pc, #28]	@ (8008ba8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b8a:	4808      	ldr	r0, [pc, #32]	@ (8008bac <USBD_FS_ProductStrDescriptor+0x38>)
 8008b8c:	f7ff fe33 	bl	80087f6 <USBD_GetString>
 8008b90:	e004      	b.n	8008b9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4904      	ldr	r1, [pc, #16]	@ (8008ba8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b96:	4805      	ldr	r0, [pc, #20]	@ (8008bac <USBD_FS_ProductStrDescriptor+0x38>)
 8008b98:	f7ff fe2d 	bl	80087f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000e04 	.word	0x20000e04
 8008bac:	0800930c 	.word	0x0800930c

08008bb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	4904      	ldr	r1, [pc, #16]	@ (8008bd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bc0:	4804      	ldr	r0, [pc, #16]	@ (8008bd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bc2:	f7ff fe18 	bl	80087f6 <USBD_GetString>
  return USBD_StrDesc;
 8008bc6:	4b02      	ldr	r3, [pc, #8]	@ (8008bd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000e04 	.word	0x20000e04
 8008bd4:	08009324 	.word	0x08009324

08008bd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	221a      	movs	r2, #26
 8008be8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bea:	f000 f843 	bl	8008c74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008bee:	4b02      	ldr	r3, [pc, #8]	@ (8008bf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000160 	.word	0x20000160

08008bfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c08:	79fb      	ldrb	r3, [r7, #7]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d105      	bne.n	8008c1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4907      	ldr	r1, [pc, #28]	@ (8008c30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c12:	4808      	ldr	r0, [pc, #32]	@ (8008c34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c14:	f7ff fdef 	bl	80087f6 <USBD_GetString>
 8008c18:	e004      	b.n	8008c24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	4904      	ldr	r1, [pc, #16]	@ (8008c30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c1e:	4805      	ldr	r0, [pc, #20]	@ (8008c34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c20:	f7ff fde9 	bl	80087f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c24:	4b02      	ldr	r3, [pc, #8]	@ (8008c30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000e04 	.word	0x20000e04
 8008c34:	08009338 	.word	0x08009338

08008c38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	4907      	ldr	r1, [pc, #28]	@ (8008c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c4e:	4808      	ldr	r0, [pc, #32]	@ (8008c70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c50:	f7ff fdd1 	bl	80087f6 <USBD_GetString>
 8008c54:	e004      	b.n	8008c60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4904      	ldr	r1, [pc, #16]	@ (8008c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c5a:	4805      	ldr	r0, [pc, #20]	@ (8008c70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c5c:	f7ff fdcb 	bl	80087f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c60:	4b02      	ldr	r3, [pc, #8]	@ (8008c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000e04 	.word	0x20000e04
 8008c70:	08009344 	.word	0x08009344

08008c74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb8 <Get_SerialNum+0x44>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c80:	4b0e      	ldr	r3, [pc, #56]	@ (8008cbc <Get_SerialNum+0x48>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c86:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc0 <Get_SerialNum+0x4c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4413      	add	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d009      	beq.n	8008cae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	4909      	ldr	r1, [pc, #36]	@ (8008cc4 <Get_SerialNum+0x50>)
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 f814 	bl	8008ccc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	4908      	ldr	r1, [pc, #32]	@ (8008cc8 <Get_SerialNum+0x54>)
 8008ca8:	68b8      	ldr	r0, [r7, #8]
 8008caa:	f000 f80f 	bl	8008ccc <IntToUnicode>
  }
}
 8008cae:	bf00      	nop
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	1ffff7e8 	.word	0x1ffff7e8
 8008cbc:	1ffff7ec 	.word	0x1ffff7ec
 8008cc0:	1ffff7f0 	.word	0x1ffff7f0
 8008cc4:	20000162 	.word	0x20000162
 8008cc8:	20000172 	.word	0x20000172

08008ccc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]
 8008ce2:	e027      	b.n	8008d34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	0f1b      	lsrs	r3, r3, #28
 8008ce8:	2b09      	cmp	r3, #9
 8008cea:	d80b      	bhi.n	8008d04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	0f1b      	lsrs	r3, r3, #28
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	440b      	add	r3, r1
 8008cfc:	3230      	adds	r2, #48	@ 0x30
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e00a      	b.n	8008d1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	0f1b      	lsrs	r3, r3, #28
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	440b      	add	r3, r1
 8008d14:	3237      	adds	r2, #55	@ 0x37
 8008d16:	b2d2      	uxtb	r2, r2
 8008d18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	3301      	adds	r3, #1
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	4413      	add	r3, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	3301      	adds	r3, #1
 8008d32:	75fb      	strb	r3, [r7, #23]
 8008d34:	7dfa      	ldrb	r2, [r7, #23]
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d3d3      	bcc.n	8008ce4 <IntToUnicode+0x18>
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr

08008d48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a0d      	ldr	r2, [pc, #52]	@ (8008d8c <HAL_PCD_MspInit+0x44>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d113      	bne.n	8008d82 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d90 <HAL_PCD_MspInit+0x48>)
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008d90 <HAL_PCD_MspInit+0x48>)
 8008d60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d64:	61d3      	str	r3, [r2, #28]
 8008d66:	4b0a      	ldr	r3, [pc, #40]	@ (8008d90 <HAL_PCD_MspInit+0x48>)
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d72:	2200      	movs	r2, #0
 8008d74:	2100      	movs	r1, #0
 8008d76:	2014      	movs	r0, #20
 8008d78:	f7f8 fadd 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d7c:	2014      	movs	r0, #20
 8008d7e:	f7f8 faf6 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40005c00 	.word	0x40005c00
 8008d90:	40021000 	.word	0x40021000

08008d94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008da8:	4619      	mov	r1, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	f7fe fdf6 	bl	800799c <USBD_LL_SetupStage>
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	440b      	add	r3, r1
 8008dd8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	78fb      	ldrb	r3, [r7, #3]
 8008de0:	4619      	mov	r1, r3
 8008de2:	f7fe fe28 	bl	8007a36 <USBD_LL_DataOutStage>
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008e00:	78fa      	ldrb	r2, [r7, #3]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	440b      	add	r3, r1
 8008e0e:	333c      	adds	r3, #60	@ 0x3c
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	4619      	mov	r1, r3
 8008e16:	f7fe fe7f 	bl	8007b18 <USBD_LL_DataInStage>
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe ff8f 	bl	8007d54 <USBD_LL_SOF>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e46:	2301      	movs	r3, #1
 8008e48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d001      	beq.n	8008e56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e52:	f7f7 fc31 	bl	80006b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008e5c:	7bfa      	ldrb	r2, [r7, #15]
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe ff3f 	bl	8007ce4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe fef8 	bl	8007c62 <USBD_LL_Reset>
}
 8008e72:	bf00      	nop
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe ff39 	bl	8007d02 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e98:	4b04      	ldr	r3, [pc, #16]	@ (8008eac <HAL_PCD_SuspendCallback+0x30>)
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	4a03      	ldr	r2, [pc, #12]	@ (8008eac <HAL_PCD_SuspendCallback+0x30>)
 8008e9e:	f043 0306 	orr.w	r3, r3, #6
 8008ea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	e000ed00 	.word	0xe000ed00

08008eb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe ff33 	bl	8007d2a <USBD_LL_Resume>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ed4:	4a28      	ldr	r2, [pc, #160]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a26      	ldr	r2, [pc, #152]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008ee0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ee4:	4b24      	ldr	r3, [pc, #144]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008ee6:	4a25      	ldr	r2, [pc, #148]	@ (8008f7c <USBD_LL_Init+0xb0>)
 8008ee8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008eea:	4b23      	ldr	r3, [pc, #140]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008eec:	2208      	movs	r2, #8
 8008eee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ef0:	4b21      	ldr	r3, [pc, #132]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ef6:	4b20      	ldr	r3, [pc, #128]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008efc:	4b1e      	ldr	r3, [pc, #120]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f02:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f08:	481b      	ldr	r0, [pc, #108]	@ (8008f78 <USBD_LL_Init+0xac>)
 8008f0a:	f7f8 fbf7 	bl	80016fc <HAL_PCD_Init>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f14:	f7f7 fbd0 	bl	80006b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f1e:	2318      	movs	r3, #24
 8008f20:	2200      	movs	r2, #0
 8008f22:	2100      	movs	r1, #0
 8008f24:	f7fa f915 	bl	8003152 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f2e:	2358      	movs	r3, #88	@ 0x58
 8008f30:	2200      	movs	r2, #0
 8008f32:	2180      	movs	r1, #128	@ 0x80
 8008f34:	f7fa f90d 	bl	8003152 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f3e:	23c0      	movs	r3, #192	@ 0xc0
 8008f40:	2200      	movs	r2, #0
 8008f42:	2181      	movs	r1, #129	@ 0x81
 8008f44:	f7fa f905 	bl	8003152 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f4e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008f52:	2200      	movs	r2, #0
 8008f54:	2101      	movs	r1, #1
 8008f56:	f7fa f8fc 	bl	8003152 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f64:	2200      	movs	r2, #0
 8008f66:	2182      	movs	r1, #130	@ 0x82
 8008f68:	f7fa f8f3 	bl	8003152 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20001004 	.word	0x20001004
 8008f7c:	40005c00 	.word	0x40005c00

08008f80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f8 fcaf 	bl	80018fa <HAL_PCD_Start>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f94e 	bl	8009244 <USBD_Get_USB_Status>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	70fb      	strb	r3, [r7, #3]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70bb      	strb	r3, [r7, #2]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008fde:	78bb      	ldrb	r3, [r7, #2]
 8008fe0:	883a      	ldrh	r2, [r7, #0]
 8008fe2:	78f9      	ldrb	r1, [r7, #3]
 8008fe4:	f7f8 fe04 	bl	8001bf0 <HAL_PCD_EP_Open>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f928 	bl	8009244 <USBD_Get_USB_Status>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7f8 fe42 	bl	8001caa <HAL_PCD_EP_Close>
 8009026:	4603      	mov	r3, r0
 8009028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f909 	bl	8009244 <USBD_Get_USB_Status>
 8009032:	4603      	mov	r3, r0
 8009034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009036:	7bbb      	ldrb	r3, [r7, #14]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800905a:	78fa      	ldrb	r2, [r7, #3]
 800905c:	4611      	mov	r1, r2
 800905e:	4618      	mov	r0, r3
 8009060:	f7f8 feea 	bl	8001e38 <HAL_PCD_EP_SetStall>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f8ea 	bl	8009244 <USBD_Get_USB_Status>
 8009070:	4603      	mov	r3, r0
 8009072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009074:	7bbb      	ldrb	r3, [r7, #14]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	460b      	mov	r3, r1
 8009088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7f8 ff2b 	bl	8001ef8 <HAL_PCD_EP_ClrStall>
 80090a2:	4603      	mov	r3, r0
 80090a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f8cb 	bl	8009244 <USBD_Get_USB_Status>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0c      	bge.n	80090f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090de:	68f9      	ldr	r1, [r7, #12]
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	440b      	add	r3, r1
 80090ec:	3302      	adds	r3, #2
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	e00b      	b.n	800910a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090f8:	68f9      	ldr	r1, [r7, #12]
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	440b      	add	r3, r1
 8009104:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8009108:	781b      	ldrb	r3, [r3, #0]
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f7f8 fd37 	bl	8001ba6 <HAL_PCD_SetAddress>
 8009138:	4603      	mov	r3, r0
 800913a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f880 	bl	8009244 <USBD_Get_USB_Status>
 8009144:	4603      	mov	r3, r0
 8009146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009148:	7bbb      	ldrb	r3, [r7, #14]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	461a      	mov	r2, r3
 800915e:	460b      	mov	r3, r1
 8009160:	72fb      	strb	r3, [r7, #11]
 8009162:	4613      	mov	r3, r2
 8009164:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009174:	893b      	ldrh	r3, [r7, #8]
 8009176:	7af9      	ldrb	r1, [r7, #11]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	f7f8 fe26 	bl	8001dca <HAL_PCD_EP_Transmit>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 f85d 	bl	8009244 <USBD_Get_USB_Status>
 800918a:	4603      	mov	r3, r0
 800918c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800918e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	607a      	str	r2, [r7, #4]
 80091a2:	461a      	mov	r2, r3
 80091a4:	460b      	mov	r3, r1
 80091a6:	72fb      	strb	r3, [r7, #11]
 80091a8:	4613      	mov	r3, r2
 80091aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091ba:	893b      	ldrh	r3, [r7, #8]
 80091bc:	7af9      	ldrb	r1, [r7, #11]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	f7f8 fdbb 	bl	8001d3a <HAL_PCD_EP_Receive>
 80091c4:	4603      	mov	r3, r0
 80091c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f83a 	bl	8009244 <USBD_Get_USB_Status>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091f0:	78fa      	ldrb	r2, [r7, #3]
 80091f2:	4611      	mov	r1, r2
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f8 fdd1 	bl	8001d9c <HAL_PCD_EP_GetRxCount>
 80091fa:	4603      	mov	r3, r0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800920c:	4b02      	ldr	r3, [pc, #8]	@ (8009218 <USBD_static_malloc+0x14>)
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr
 8009218:	200012f4 	.word	0x200012f4

0800921c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	bc80      	pop	{r7}
 800922c:	4770      	bx	lr

0800922e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	460b      	mov	r3, r1
 8009238:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	bc80      	pop	{r7}
 8009242:	4770      	bx	lr

08009244 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d817      	bhi.n	8009288 <USBD_Get_USB_Status+0x44>
 8009258:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <USBD_Get_USB_Status+0x1c>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	08009271 	.word	0x08009271
 8009264:	08009277 	.word	0x08009277
 8009268:	0800927d 	.word	0x0800927d
 800926c:	08009283 	.word	0x08009283
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e00b      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009276:	2302      	movs	r3, #2
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e008      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800927c:	2301      	movs	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	e005      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009282:	2302      	movs	r3, #2
 8009284:	73fb      	strb	r3, [r7, #15]
    break;
 8009286:	e002      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009288:	2302      	movs	r3, #2
 800928a:	73fb      	strb	r3, [r7, #15]
    break;
 800928c:	bf00      	nop
  }
  return usb_status;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop

0800929c <memset>:
 800929c:	4603      	mov	r3, r0
 800929e:	4402      	add	r2, r0
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d100      	bne.n	80092a6 <memset+0xa>
 80092a4:	4770      	bx	lr
 80092a6:	f803 1b01 	strb.w	r1, [r3], #1
 80092aa:	e7f9      	b.n	80092a0 <memset+0x4>

080092ac <__libc_init_array>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	2600      	movs	r6, #0
 80092b0:	4d0c      	ldr	r5, [pc, #48]	@ (80092e4 <__libc_init_array+0x38>)
 80092b2:	4c0d      	ldr	r4, [pc, #52]	@ (80092e8 <__libc_init_array+0x3c>)
 80092b4:	1b64      	subs	r4, r4, r5
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	42a6      	cmp	r6, r4
 80092ba:	d109      	bne.n	80092d0 <__libc_init_array+0x24>
 80092bc:	f000 f81a 	bl	80092f4 <_init>
 80092c0:	2600      	movs	r6, #0
 80092c2:	4d0a      	ldr	r5, [pc, #40]	@ (80092ec <__libc_init_array+0x40>)
 80092c4:	4c0a      	ldr	r4, [pc, #40]	@ (80092f0 <__libc_init_array+0x44>)
 80092c6:	1b64      	subs	r4, r4, r5
 80092c8:	10a4      	asrs	r4, r4, #2
 80092ca:	42a6      	cmp	r6, r4
 80092cc:	d105      	bne.n	80092da <__libc_init_array+0x2e>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d4:	4798      	blx	r3
 80092d6:	3601      	adds	r6, #1
 80092d8:	e7ee      	b.n	80092b8 <__libc_init_array+0xc>
 80092da:	f855 3b04 	ldr.w	r3, [r5], #4
 80092de:	4798      	blx	r3
 80092e0:	3601      	adds	r6, #1
 80092e2:	e7f2      	b.n	80092ca <__libc_init_array+0x1e>
 80092e4:	08009380 	.word	0x08009380
 80092e8:	08009380 	.word	0x08009380
 80092ec:	08009380 	.word	0x08009380
 80092f0:	08009384 	.word	0x08009384

080092f4 <_init>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr

08009300 <_fini>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr
